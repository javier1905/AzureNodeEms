!function(a){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return a[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=a,n.c=e,n.d=function(a,e,o){n.o(a,e)||Object.defineProperty(a,e,{enumerable:!0,get:o})},n.r=function(a){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(a,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(a,"__esModule",{value:!0})},n.t=function(a,e){if(1&e&&(a=n(a)),8&e)return a;if(4&e&&"object"==typeof a&&a&&a.__esModule)return a;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:a}),2&e&&"string"!=typeof a)for(var i in a)n.d(o,i,function(e){return a[e]}.bind(null,i));return o},n.n=function(a){var e=a&&a.__esModule?function(){return a.default}:function(){return a};return n.d(e,"a",e),e},n.o=function(a,e){return Object.prototype.hasOwnProperty.call(a,e)},n.p="",n(n.s=9)}([function(a,e){a.exports=require("mssql")},function(a,e,n){const o=n(0);var i;i={user:process.env.USERSQL,password:process.env.PASSWORDSQL,database:process.env.DATABASESQL,server:process.env.SERVERSQL,options:{enableArithAbort:!0,encrypt:!1}};var t={abrirConexion:void 0,cerrarConexion:void 0,abrirConexionPOOL:void 0,cerrarConexionPOOL:void 0};t.abrirConexion=async function(){await o.connect(i).then(a=>{a._connected||console.log("Error de Conexion",a._connected)})},t.cerrarConexion=async function(){await(void 0).close()};const r={};t.abrirConexionPOOL=async a=>{if(!Object.prototype.hasOwnProperty.call(r,a)){const e=new o.ConnectionPool(i),n=e.close.bind(e);return e.close=(...e)=>(delete r[a],n(...e)),await e.connect(),r[a]=e,r[a]}},t.cerrarConexionPOOL=()=>Promise.all(Object.values(r).map(a=>a.close())),a.exports=t},function(a,e){a.exports=require("express")},function(a,e){a.exports=require("jsonwebtoken")},function(a,e){a.exports={secret:"javier1905"}},function(a,e){a.exports=require("async")},function(a,e){a.exports=require("mongoose")},function(a,e){a.exports=require("bcrypt-nodejs")},function(a,e){a.exports=require("moment")},function(a,e,n){const o=n(2),i=n(10);const t=o();t.use(i()),t.use(o.json()),t.use(o.urlencoded({extended:!0})),t.use(n(11)),t.use("/api/authRouterReact/admin",n(12)),t.use("/api/authRouterReact/nivel1",n(13)),t.use("/api/authRouterReact/nivel2",n(14)),t.use("/api/authRouterReact/nivel3",n(15)),t.use("/api/authRouterReact/nivel4",n(16)),t.use("/api/authRouterReact/nivel5",n(17)),t.use("/api/maquinas",n(18)),t.use("/api/usuarios",n(19),n(20)),t.use("/api/logueo",n(24)),t.use("/api/autentificasion",n(25)),t.use("/api/piezas",n(26)),t.use("/api/moldes",n(27)),t.use("/api/defectos",n(28)),t.use("/api/operaciones",n(29)),t.use("/api/procesos",n(30)),t.use("/api/turnos",n(31)),t.use("/api/paradasMaquina",n(32)),t.use("/api/trabajadores",n(33)),t.use("/api/planillasProduccion",n(34)),t.use("/api/tiposProceso",n(35)),t.use("/api/clientes",n(36)),t.use("/api/tiposMaterial",n(37)),t.use("/api/areas",n(38)),t.use("/api/tiposMaquina",n(39)),t.use("/api/plantas",n(40)),t.use("/api/puestos",n(41)),t.use("/api/oee",n(42)),t.use("/api/reportes",n(43)),t.set("port",process.env.PORT||5e3),t.listen(t.get("port"),(a,e)=>{e?console.log(e):console.log("Servidor corriendo en el PUERTO",t.get("port"))})},function(a,e){a.exports=require("cors")},function(a,e,n){const o=n(3),{secret:i}=n(4);a.exports=function(a,e,n){if("/api/logueo"===a.path)return n();if(a.headers.authorization){const t=a.headers.authorization.split(" ")[1];o.verify(t,i,(a,o)=>{if(!a)return n();e.status(403).json({mensaje:a.message,otro:"error  en la commprovacion token"})})}else e.status(403).json({mensaje:"No envio el tojen en el headers"})}},function(a,e,n){const{Router:o}=n(2),i=n(3),{secret:t}=n(4),r=o();r.get("/",(a,e)=>{const n=a.headers.authorization.split(" ")[1];i.verify(n,t,(a,n)=>a?e.status(403).json({mensaje:a.message}):"admin"!==n.perfil?e.status(403).json({mensaje:"usted no es admin"}):void e.status(200).json({permiso:!0}))}),a.exports=r},function(a,e,n){const{Router:o}=n(2),i=n(3),{secret:t}=n(4),r=o();r.get("/",(a,e)=>{const n=a.headers.authorization.split(" ")[1];i.verify(n,t,(a,n)=>a?e.status(403).json({mensaje:a.message}):"nivel-1"!==n.perfil?e.status(403).json({mensaje:"usted no es nivel 1"}):void e.status(200).json({permiso:!0}))}),a.exports=r},function(a,e,n){const{Router:o}=n(2),i=n(3),{secret:t}=n(4),r=o();r.get("/",(a,e)=>{const n=a.headers.authorization.split(" ")[1];i.verify(n,t,(a,n)=>a?e.status(403).json({mensaje:a.message}):"nivel-2"!==n.perfil?e.status(403).json({mensaje:"usted no es nivel 2"}):void e.status(200).json({permiso:!0}))}),a.exports=r},function(a,e,n){const{Router:o}=n(2),i=n(3),{secret:t}=n(4),r=o();r.get("/",(a,e)=>{const n=a.headers.authorization.split(" ")[1];i.verify(n,t,(a,n)=>a?e.status(403).json({mensaje:a.message}):"nivel-3"!==n.perfil?e.status(403).json({mensaje:"usted no es nivel 3"}):void e.status(200).json({permiso:!0}))}),a.exports=r},function(a,e,n){const{Router:o}=n(2),i=n(3),{secret:t}=n(4),r=o();r.get("/",(a,e)=>{const n=a.headers.authorization.split(" ")[1];i.verify(n,t,(a,n)=>a?e.status(403).json({mensaje:a.message}):"nivel-4"!==n.perfil?e.status(403).json({mensaje:"usted no es nivel 4"}):void e.status(200).json({permiso:!0}))}),a.exports=r},function(a,e,n){const{Router:o}=n(2),i=n(3),{secret:t}=n(4),r=o();r.get("/",(a,e)=>{const n=a.headers.authorization.split(" ")[1];i.verify(n,t,(a,n)=>a?e.status(403).json({mensaje:a.message}):"nivel-5"!==n.perfil?e.status(403).json({mensaje:"usted no es nivel 5"}):void e.status(200).json({permiso:!0}))}),a.exports=r},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{Request:t}=n(0);(new t).query("select m.id as idMaquina , m.nombre as nombreMaquina , m.descripcion as descripcionMaquina ,\n    m.id_tipos_maquina as idTipoMaquina , tm.nombre as nombreTipoMaquina , m.id_planta as idPlanta , p.nombre as nombrePlanta\n    from maquinas m\n    join tipos_maquina tm on m.id_tipos_maquina = tm.id\n    join plantas p on m.id_planta = p.id\n    where m.estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),i.get("/xoperacion/:idOperacion",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1),{idOperacion:t}=a.params;await o();const{Request:r}=n(0);(new r).query(`select m.id as idMaquina, m.nombre as nombreMaquina\n    from maquinas m\n    join tipos_maquina tm on m.id_tipos_maquina = tm.id\n    where m.estado = 1 and tm.id_operacion = ${t}`,(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),i.post("/insert",async(a,e)=>{const{nombreMaquina:o,descripcionMaquina:i,idTipoMaquina:t,idPlanta:r}=a.body,{abrirConexionPOOL:s,cerrarConexionPOOL:c}=n(1),{Request:d,VarChar:u,Int:p}=n(0);try{const a=new d(await s("insertMaquina"));a.input("nombreMaquina",u,o),a.input("descripcionMaquina",u,i),a.input("idTipoMaquina",p,t),a.input("idPlanta",p,r);const n="insert into maquinas ( nombre , descripcion , id_tipos_maquina , id_planta , estado )\n    values\n    ( @nombreMaquina , @descripcionMaquina , @idTipoMaquina , @idPlanta , 1 )";await a.query(n)&&(c(),e.json({mensaje:"Maquina Insertada correctamente",status:200}))}catch(a){c(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idMaquina:o,nombreMaquina:i,descripcionMaquina:t,idTipoMaquina:r,idPlanta:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=n(1),{Request:u,VarChar:p,Int:l}=n(0);try{const a=new u(await c("updateMaquina"));a.input("nombreMaquina",p,i),a.input("descripcionMaquina",p,t),a.input("idTipoMaquina",l,r),a.input("idPlanta",l,s),a.input("idMaquina",l,o);const n="update maquinas\n    set\n    nombre = @nombreMaquina ,\n    descripcion = @descripcionMaquina ,\n    id_tipos_maquina = @idTipoMaquina ,\n    id_planta = @idPlanta\n    where id = @idMaquina";await a.query(n)&&(d(),e.json({mensaje:"Maquina actualizada correctamente",status:200}))}catch(a){d(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idMaquina:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deleteMaquina"));a.input("idMaquina",s,o);const n="update maquinas\n    set\n    estado = 0\n    where id = @idMaquina";await a.query(n)&&(t(),e.json({mensaje:"Maquina eliminada correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const o=n(3),{secret:i}=n(4);a.exports=(a,e,n)=>{const t=a.headers.authorization.split(" ")[1];o.verify(t,i,(a,o)=>a?e.status(403).json({mensaje:a.message}):"Admin"!==o.perfil?e.status(403).json({mensaje:"Acceso denegado por no ser admin"}):n())}},function(a,n,o){const{Router:i}=o(2),t=o(7);o(21);o(22),o(23);const r=i();r.get("/",async(a,n)=>{const{abrirConexionPOOL:i,cerrarConexionPOOL:t}=o(1);try{const a=await i("liastaUsuario"),r=new(o(0).Request)(a),s=await r.execute("pa_listaUsuarios");s?(t(),n.json(s.recordset)):(t(),n.status(404).json({status:403,mensaje:e.message}))}catch(a){t(),n.status(404).json({status:403,mensaje:a.message})}}),
//! lista de perfiles
r.get("/perfiles",async(a,n)=>{const{abrirConexionPOOL:i,cerrarConexionPOOL:t}=o(1);try{const a=await i("listaPerfiles"),r=new(o(0).Request)(a),s=await r.execute("pa_listaPerfiles");s?(t(),n.json(s.recordset)):(t(),n.status(404).json({status:403,mensaje:e.message}))}catch(a){t(),n.status(404).json({status:403,mensaje:a.message})}}),//! inser perfiles MONGO
//! consulta usuario por id
r.get("/:id",async(a,n)=>{const i=a.params.id,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=o(1);try{const a=await t("getUsexId"),s=o(0),c=new s.Request(a);c.input("idUsuario",s.Int,i);const d="select\n        u.id as idUsuario ,\n        u.userName as userName ,\n        u.email as email ,\n        u.nombre as nombreUsuario ,\n        u.apellido as apellidoUsuario ,\n        p.id as idPerfil ,\n        p.nombre as nombrePerfil\n        from usuarios u\n        join perfiles p on p.id = u.id_perfil\n        where u.id = @idUsuario",u=await c.query(d);u?(r(),n.json(u.recordset)):(r(),n.status(404).json({status:403,mensaje:e.message}))}catch(a){r(),n.status(404).json({status:403,mensaje:a.message})}}),//!guarda usuario
r.post("/",async(a,e)=>{const{abrirConexionPOOL:n,cerrarConexionPOOL:i}=o(1),{userName:r,password:s,email:c,nombre:d,apellido:u,idPerfil:p}=a.body;try{const a=await n("saveUser"),l=o(0),m=new l.Request(a);m.input("userName",l.VarChar,r),m.input("password",l.VarChar,t.hashSync(s)),m.input("email",l.VarChar,c),m.input("nombre",l.VarChar,d),m.input("apellido",l.VarChar,u),m.input("idPerfil",l.Int,p);const P=await m.execute("pa_insertUsuarios");P&&(i(),console.log(P),e.status(200).json({mensaje:"usuario insertado correctamente !"}))}catch(a){i(),e.status(403).json({error:a.message})}}),r.put("/",async(a,e)=>{const{abrirConexionPOOL:n,cerrarConexionPOOL:i}=o(1),{userName:r,password:s,email:c,nombre:d,apellido:u,idPerfil:p,idUsuario:l}=a.body;try{const a=await n("updateUser"),m=o(0),P=new m.Request(a);P.input("userName",m.VarChar,r),P.input("password",m.VarChar,t.hashSync(s)),P.input("email",m.VarChar,c),P.input("nombre",m.VarChar,d),P.input("apellido",m.VarChar,u),P.input("idPerfil",m.Int,p),P.input("idUsuario",m.Int,l);const j=await P.execute("pa_updateUsuarios");j&&(i(),console.log(j),e.status(200).json({mensaje:"usuario insertado correctamente !"}))}catch(a){i(),e.status(403).json({error:err.message})}}),a.exports=r},function(a,e,n){const o=n(6);var i;i=process.env.MONGODB_URI,o.connect(i,{useNewUrlParser:!0,useUnifiedTopology:!0});var t=o.connection;t.on("error",console.error.bind(console,"error de conexion")),t.once("open",()=>{console.log("Conectado a MONGODB")})},function(a,e,n){const o=n(6),i=new o.Schema({userName:{type:String,required:!0,unique:!0},password:{type:String,required:!0},email:{type:String,required:!0,unique:!0},nombre:{type:String,required:!0},apellido:{type:String,required:!0},perfil:{type:String,required:!0,enum:["Admin","nivel-1","nivel-2","nivel-3","nivel-4","nivel-5"]}});o.set("useCreateIndex",!0),o.set("useFindAndModify",!1),a.exports=o.model("usuario",i)},function(a,e,n){const o=n(6),i=new o.Schema({perfil:{type:String,require:!0,unique:!0,enum:["Admin","nivel-1","nivel-2","nivel-3","nivel-4","nivel-5"]}});o.set("useCreateIndex",!0),o.set("useFindAndModify",!1),a.exports=o.model("perfil",i)},function(a,e,n){const{Router:o}=n(2),i=n(7),{secret:t}=n(4),r=n(3),s=o();s.post("/",async(a,e,o)=>{const{abrirConexionPOOL:s,cerrarConexionPOOL:c}=n(1),{userName:d,password:u}=a.body;try{const a=await s("consultaUsuario"),{Request:o,VarChar:p}=n(0),l=new o(a);l.input("userName",p,d);const m=await l.execute("pa_getUsuarioXnombreUsuario");if(m.recordset.userName)if(c(),i.compareSync(u,m.recordset.password)){const a={userName:m.recordset.userName,email:m.recordset.email,nombre:m.recordset.nombreUsuario,apellido:m.recordset.apellidoUsuario,perfil:m.recordset.nombrePerfil};r.sign(a,t,{expiresIn:14400},(a,n)=>{a?e.status(404).json({mensaje:"Error al generar el token"}):e.json({token:n})})}else e.status(403).json({mensaje:"Password Incorrecta"});else c(),e.status(403).json({mensaje:"Usuario Inexistente !"})}catch(a){c(),e.status(404).json({e:a})}}),a.exports=s},function(a,e,n){const o=n(2),i=n(3),t=n(4),r=o();r.get("/",(a,e)=>{if(a.headers.authorization){const n=a.headers.authorization.split(" ")[1];i.verify(n,t.secret,(a,n)=>{a?e.status(403).json({mensaje:a.name}):e.status(200).json(n)})}else e.status(403).json({mensaje:"No envio el Token en el headers"})}),a.exports=r},function(a,e,n){const o=n(2).Router();o.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{Request:t}=new n(0);(new t).query("select p.id as idPieza, p.nombre as nombrePieza , p.id_cliente as idCliente , c.nombre as nombreCliente ,\n        p.id_tipos_material as idTipoMaterial , tm.nombre as nombreTipoMaterial\n        from piezas p\n        join clientes c on p.id_cliente = c.id\n        join tipos_material tm on p.id_tipos_material = tm.id\n        where p.estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),o.get("/xmaquina/:idMaquina",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{idMaquina:t}=a.params;var{Request:r}=n(0);(new r).query(`select p.id as idPieza, p.nombre as nombrePieza\n        from piezas p\n        join procesos pro\n        on pro.id_pieza = p.id\n        where p.estado = 1 and pro.id_maquina = ${t}`,(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),o.post("/insert",async(a,e)=>{const{nombrePieza:o,idCliente:i,idTipoMaterial:t}=a.body,{abrirConexionPOOL:r,cerrarConexionPOOL:s}=n(1);try{const a=await r("insertPieza"),{Request:c,Int:d,VarChar:u}=n(0),p=new c(a);p.input("nombrePieza",u,o),p.input("idCliente",d,i),p.input("idTipoMaterial",d,t);const l="insert into piezas ( nombre , id_cliente , id_tipos_material , estado )\n        values ( @nombrePieza , @idCliente , @idTipoMaterial , 1 )";await p.query(l)&&(s(),e.json({mensaje:"Pieza insertada correctamente"}))}catch(a){s(),e.json({mensaje:a.message})}}),o.put("/update",async(a,e)=>{const{idPieza:o,nombrePieza:i,idCliente:t,idTipoMaterial:r}=a.body,{abrirConexionPOOL:s,cerrarConexionPOOL:c}=n(1);try{const a=await s("updatePieza"),{Request:d,Int:u,VarChar:p}=n(0),l=new d(a);l.input("idPieza",u,o),l.input("nombrePieza",p,i),l.input("idCliente",u,t),l.input("idTipoMaterial",u,r);const m="update piezas\n        set\n        nombre = @nombrePieza ,\n        id_cliente = @idCliente ,\n        id_tipos_material = @idTipoMaterial\n        where id = @idPieza";await l.query(m)&&(c(),e.json({mensaje:"Pieza actualizada correctamente"}))}catch(a){c(),e.json({mensaje:a.message})}}),o.put("/delete",async(a,e)=>{const{idPieza:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("deletePieza"),{Request:r,Int:s}=n(0),c=new r(a);c.input("idPieza",s,o);const d="update piezas\n        set\n        estado = 0\n        where id = @idPieza";await c.query(d)&&(t(),e.json({mensaje:"Pieza eliminada correctamente"}))}catch(a){t(),e.json({mensaje:a.message})}}),a.exports=o},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{Request:t}=n(0);(new t).query("select m.id as idMolde , m.nombre as nombreMolde , m.id_pieza as idPieza , p.nombre as nombrePieza\n    from moldes m\n    join piezas p on m.id_pieza = p.id\n    where m.estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),i.get("/xpieza/:idPieza",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{idPieza:t}=a.params,{Request:r}=n(0);(new r).query("select id as idMolde, nombre as nombreMolde from moldes where estado = 1 and id_pieza = "+t,(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),i.post("/insert",async(a,e)=>{const{nombreMolde:o,idPieza:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1),{Request:s,VarChar:c,Int:d}=n(0);try{const a=new s(await t("insertMolde"));a.input("nombreMolde",c,o),a.input("idPieza",d,i);const n="insert into moldes ( nombre , id_pieza , estado )\n        values\n        ( @nombreMolde , @idPieza , 1 )";await a.query(n)&&(r(),e.json({mensaje:"Molde Insertado correctamente",status:200}))}catch(a){r(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idMolde:o,nombreMolde:i,idPieza:t}=a.body,{abrirConexionPOOL:r,cerrarConexionPOOL:s}=n(1),{Request:c,VarChar:d,Int:u}=n(0);try{const a=new c(await r("updateMolde"));a.input("nombreMolde",d,i),a.input("idPieza",u,t),a.input("idMolde",u,o);const n="update moldes\n        set\n        nombre = @nombreMolde ,\n        id_pieza = @idPieza\n        where id = @idMolde";await a.query(n)&&(s(),e.json({mensaje:"Molde actualizado correctamente",status:200}))}catch(a){s(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idMolde:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deleteMolde"));a.input("idMolde",s,o);const n="update moldes\n        set\n        estado = 0\n        where id = @idMolde";await a.query(n)&&(t(),e.json({mensaje:"Molde eliminado correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{Request:t}=n(0);(new t).query("select d.id as idDefecto, d.nombre as nombreDefecto, d.id_operacion as idOperacion,o.nombre as nombreOperacion from defectos d join operaciones o on d.id_operacion=o.id where d.estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),i.post("/insert",async(a,e)=>{const{nombreDefecto:o,idOperacion:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1),{Request:s,VarChar:c,Int:d}=n(0);try{const a=new s(await t("insertDefecto"));a.input("nombreDefecto",c,o),a.input("idOperacion",d,i);const n="insert into defectos ( nombre , id_operacion , estado )\n        values\n        ( @nombreDefecto , @idOperacion , 1 )";await a.query(n)&&(r(),e.json({mensaje:"Defecto Insertado correctamente",status:200}))}catch(a){r(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idDefecto:o,nombreDefecto:i,idOperacion:t}=a.body,{abrirConexionPOOL:r,cerrarConexionPOOL:s}=n(1),{Request:c,VarChar:d,Int:u}=n(0);try{const a=new c(await r("updateDefecto"));a.input("nombreDefecto",d,i),a.input("idOperacion",u,t),a.input("idDefecto",u,o);const n="update defectos\n        set\n        nombre = @nombreDefecto ,\n        id_operacion = @idOperacion\n        where id = @idDefecto";await a.query(n)&&(s(),e.json({mensaje:"Defecto actualizado correctamente",status:200}))}catch(a){s(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idDefecto:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deleteDefecto"));a.input("idDefecto",s,o);const n="update defectos\n        set\n        estado = 0\n        where id = @idDefecto";await a.query(n)&&(t(),e.json({mensaje:"Defecto eliminado correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();var{Request:t}=n(0);(new t).query("select id as idOperacion, nombre as nombreOperacion\n        from operaciones where estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),i.post("/insert",async(a,e)=>{const{nombreOperacion:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("insertOperacion"),{Request:r,VarChar:s}=n(0),c=new r(a);c.input("nombreOperacion",s,o);const d="insert into operaciones ( nombre , estado )\n        values\n        ( @nombreOperacion , 1 )";await c.query(d)&&(t(),e.json({mensaje:"Operacion insertada correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{nombreOperacion:o,idOperacion:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1),{Request:s,VarChar:c,Int:d}=n(0);try{const a=new s(await t("updateOperacion"));a.input("nombreOperacion",c,o),a.input("idOperacion",d,i);const n="update operaciones\n        set\n        nombre = @nombreOperacion\n        where id = @idOperacion";await a.query(n)&&(r(),e.json({mensaje:"Operacion actualizada correctamente",status:200}))}catch(a){r(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idOperacion:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deleteOperacion"));a.input("idOperacion",s,o);const n="update operaciones\n        set\n        estado = 0\n        where id = @idOperacion";await a.query(n)&&(t(),e.json({mensaje:"Operacion eliminada correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2);router=o(),router.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{Request:t}=n(0);(new t).query("select id as idTipoProceso, nombre as nombreTipoProceso\n        from tipos_proceso\n        where estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),router.post("/xmaquinapiezatipo",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{idMaquina:t,idPieza:r,idTipoProceso:s}=a.body,{Request:c}=n(0);(new c).query(`select pro.id as idProceso, pro.descripcion as descripcionProceso\n        from procesos pro\n        where pro.estado = 1\n        and pro.id_pieza = ${r}\n        and pro.id_maquina = ${t}\n        and pro.id_tipos_proceso = ${s}`,(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),router.get("/list",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),t=await o("selectProcesos"),{Transaction:r,Request:s}=n(0),c=new r(t);c.begin(async a=>{a&&(c.rollback(),i(),e.json({mensaje:a.message}));try{var n=[];const a=new s(c),r=new s(c),d="select p.id as idProceso , p.descripcion as descipcionProceso , p.id_pieza as idPieza ,\n            pie.nombre as nombrePieza , p.id_maquina as idMaquina , maq.nombre as nombreMaquina ,\n            p.id_tipos_proceso as idTipoProceso , tp.nombre as nombreTipoProceso\n            from procesos p\n            join piezas pie on p.id_pieza = pie.id\n            join maquinas maq on p.id_maquina = maq.id\n            join tipos_proceso tp on p.id_tipos_proceso = tp.id\n            where p.estado = 1",u=await a.query(d);if(u){n=u.recordset;var o="";Array.isArray(n)&&n.forEach((a,e)=>{o+=` ${a.idProceso} ,`}),o=""===o?null:o.trim().substring(0,o.length-2),console.log(o);const a=`select pxh.id as idPiezasXhs , pxh.cantidad as cantidadPiezasXhs , pxh.fe_desde as desdePiezasXhs ,\n                pxh.fe_hasta as hastaPiezasXhs , pxh.id_proceso as idProceso\n                from piezas_x_hora pxh\n                where pxh.id_proceso in (${o})`,s=await r.query(a);var t=[];s&&(console.log(t),t=s.recordset,console.log(s.recordset),n.forEach((a,e)=>{a.vecPiezasXhora=[],t.forEach((e,n)=>{parseInt(a.idProceso)===parseInt(e.idProceso)&&a.vecPiezasXhora.push(e)})}),c.commit(),i(),e.json(n))}}catch(a){c.rollback(),i(),e.json({mensaje:a.message})}})}),router.post("/insert",async(a,e)=>{const{descripcionProceso:o,idPieza:i,idMaquina:t,idTiposProceso:r,vecPiezasXhora:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=n(1);try{const a=await c("insertProceso"),{Transaction:u,Request:p,Date:l,Int:m,VarChar:P}=n(0),j=new u(a),b=new p(j),h=n(5);j.begin(async a=>{a&&(j.rollback(),d(),e.json({mensaje:a.message})),b.input("descripcionProceso",P,o),b.input("idPieza",m,i),b.input("idMaquina",m,t),b.input("idTiposProceso",m,r);const n=await b.query("insert into procesos ( descripcion , id_pieza , id_maquina , id_tipos_proceso , estado )\n            values\n            ( @descripcionProceso , @idPieza , @idMaquina , @idTiposProceso , 1 ) ;\n            declare @idProceso int\n            set @idProceso = ( select top 1 max ( id ) from procesos )\n            select @idProceso as idProceso");var c;n&&(c=n.recordsets[0][0].idProceso,Array.isArray(s)&&s.length>0&&h.eachSeries(s,(a,e)=>{const n=new p(j);n.input("cantidadPiezasXhs",m,a.cantidadPiezasXhs),n.input("desdePiezasXhs",l,a.desdePiezasXhs),n.input("hastaPiezasXhs",l,a.hastaPiezasXhs),n.input("idProceso",m,parseInt(c));n.query("insert into piezas_x_hora ( cantidad , fe_desde , fe_hasta , id_proceso , estado )\n                        values ( @cantidadPiezasXhs , @desdePiezasXhs , @hastaPiezasXhs , @idProceso , 1 )",(a,n)=>{a?e(a):e()})},a=>{a?(j.rollback(),d(),e.json({mensaje:a.message})):(j.commit(),d(),e.json({mensaje:"Proceso insertado correctamente"}))}))})}catch(a){myTransaction.rollback(),d(),e.json({mensaje:a.message})}}),router.put("/update",async(a,e)=>{const{idProceso:o,descripcionProceso:i,idPieza:t,idMaquina:r,idTiposProceso:s,vecPiezasXhora:c}=a.body,{abrirConexionPOOL:d,cerrarConexionPOOL:u}=n(1);try{const a=await d("insertProceso"),{Transaction:p,Request:l,Date:m,Int:P,VarChar:j}=n(0),b=new p(a),h=new l(b),_=n(5);b.begin(async a=>{a&&(b.rollback(),u(),e.json({mensaje:a.message})),h.input("descripcionProceso",j,i),h.input("idPieza",P,t),h.input("idMaquina",P,r),h.input("idTiposProceso",P,s),h.input("idProceso",P,o);await h.query("update procesos\n            set\n            descripcion = @descripcionProceso ,\n            id_pieza = @idPieza ,\n            id_maquina = @idMaquina ,\n            id_tipos_proceso = @idTiposProceso\n            where id = @idProceso ; delete piezas_x_hora where id_proceso = @idProceso")&&Array.isArray(c)&&c.length>0&&_.eachSeries(c,(a,e)=>{const n=new l(b);n.input("cantidadPiezasXhs",P,a.cantidadPiezasXhs),n.input("desdePiezasXhs",m,a.desdePiezasXhs),n.input("hastaPiezasXhs",m,a.hastaPiezasXhs),n.input("idProceso",P,parseInt(o));n.query("insert into piezas_x_hora ( cantidad , fe_desde , fe_hasta , id_proceso , estado )\n                        values ( @cantidadPiezasXhs , @desdePiezasXhs , @hastaPiezasXhs , @idProceso , 1 )",(a,n)=>{a?e(a):e()})},a=>{a?(b.rollback(),u(),e.json({mensaje:a.message})):(b.commit(),u(),e.json({mensaje:"Proceso actualizado correctamente"}))})})}catch(a){myTransaction.rollback(),u(),e.json({mensaje:a.message})}}),router.put("/delete",async(a,e)=>{const{idProceso:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("deleteProceso"),{Request:r,Int:s}=n(0),c=new r(a);c.input("idProceso",s,o);const d="update procesos\n        set\n        estado = 0\n        where id = @idProceso ";await c.query(d)&&(t(),e.json({mensaje:"Procesos eliminado correctamente"}))}catch(a){t(),e.json({mensaje:a.message})}}),a.exports=router},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();var{Request:t}=n(0);(new t).query("select t.id as idTurno, t.descripcion as descripcionTurno,t.hs_inicio as hsInicioTurno ,t.hs_fin as hsFinTurno  \n        from turnos t\n        where estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{var{abrirConexion:o,cerrarConexion:i}=n(1);await o();var{Request:t}=n(0);(new t).query("select pm.id as idParadaMaquina, pm.nombre as nombreParadaMaquina, pm.tipo as tipoParadaMaquina , pm.setup as setupParadaMaquina , pm.id_area as idArea, a.nombre as nombreArea\n        from paradas_maquina pm\n\t\tjoin areas a on pm.id_area=a.id\n        where pm.estado = 1",(a,n)=>{a?(i(),e.json({mensaje:a.message})):(i(),e.json(n.recordset))})}),i.post("/insert",async(a,e)=>{const{nombreParadaMaquina:o,tipoParadaMaquina:i,setupParadaMaquina:t,idArea:r}=a.body,{abrirConexionPOOL:s,cerrarConexionPOOL:c}=n(1),{Request:d,VarChar:u,Int:p,Bit:l}=n(0);try{const a=new d(await s("insertParadaMaquina"));a.input("nombreParadaMaquina",u,o),a.input("tipoParadaMaquina",l,i),a.input("idArea",p,r),a.input("setupParadaMaquina",p,t);const n="insert into paradas_maquina ( nombre , tipo , setup , id_area , estado )\n        values\n        ( @nombreParadaMaquina , @tipoParadaMaquina , @setupParadaMaquina , @idArea , 1 )";await a.query(n)&&(c(),e.json({mensaje:"Parada de Maquina Insertado correctamente",status:200}))}catch(a){c(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idParadaMaquina:o,nombreParadaMaquina:i,setupParadaMaquina:t,tipoParadaMaquina:r,idArea:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=n(1),{Request:u,VarChar:p,Int:l,Bit:m}=n(0);try{const a=new u(await c("updateParadaMaquina"));a.input("nombreParadaMaquina",p,i),a.input("tipoParadaMaquina",m,r),a.input("idArea",l,s),a.input("idParadaMaquina",l,o),a.input("setupParadaMaquina",l,t);const n="update paradas_maquina\n        set\n        nombre = @nombreParadaMaquina ,\n        tipo = @tipoParadaMaquina ,\n        setup = @setupParadaMaquina ,\n        id_area = @idArea\n        where id = @idParadaMaquina";await a.query(n)&&(d(),e.json({mensaje:"Parada de maquina actualizada correctamente",status:200}))}catch(a){d(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idParadaMaquina:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deleteParadaMaquina"));a.input("idParadaMaquina",s,o);const n="update paradas_maquina\n        set\n        estado = 0\n        where id = @idParadaMaquina";await a.query(n)&&(t(),e.json({mensaje:"Paradas de Maquina eliminada correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1),{Request:t}=n(0);await o(),(new t).query("select t.id as idTrabajador, t.nombre as nombreTrabajador, t.apellido as apellidoTrabajador,\n        t.f_nacimiento as nacimientoTrabajador, t.f_ingreso as ingresoTrabajador,\n        t.id_puesto as idPuesto, p.nombre as nombrePuesto\n        from trabajadores t\n        join puestos p on t.id_puesto=p.id\n        where t.estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),i.post("/insert",async(a,e)=>{const{nombreTrabajador:o,apellidoTrabajador:i,nacimientoTrabajador:t,ingresoTrabajador:r,idPuesto:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=(n(8),n(1));try{const a=await c("insertTrabajador"),{Request:u,Int:p,Date:l,VarChar:m}=n(0),P=new u(a);P.input("nombreTrabajador",m,o),P.input("apellidoTrabajador",m,i),P.input("nacimientoTrabajador",l,t),P.input("ingresoTrabajador",l,r),P.input("idPuesto",p,s);const j="set dateformat dmy ; insert into trabajadores ( nombre , apellido , f_nacimiento , f_ingreso , id_puesto , estado )\n        values\n        ( @nombreTrabajador , @apellidoTrabajador , @nacimientoTrabajador , @ingresoTrabajador , @idPuesto , 1 )";await P.query(j)&&(d(),e.json({mensaje:"Trabajador insertado correctamente",status:200}))}catch(a){d(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idTrabajador:o,nombreTrabajador:i,apellidoTrabajador:t,nacimientoTrabajador:r,ingresoTrabajador:s,idPuesto:c}=a.body,{abrirConexionPOOL:d,cerrarConexionPOOL:u}=n(1);try{const a=await d("updateTrabajador"),{Request:p,Int:l,Date:m,VarChar:P}=n(0),j=new p(a);j.input("nombreTrabajador",P,i),j.input("apellidoTrabajador",P,t),j.input("nacimientoTrabajador",m,r),j.input("ingresoTrabajador",m,s),j.input("idPuesto",l,c),j.input("idTrabajador",l,o);const b="update trabajadores\n                                    set\n                                    nombre = @nombreTrabajador ,\n                                    apellido = @apellidoTrabajador ,\n                                    f_nacimiento = @nacimientoTrabajador ,\n                                    f_ingreso = @ingresoTrabajador ,\n                                    id_puesto = @idPuesto\n                                    where id = @idTrabajador";await j.query(b)&&(u(),e.json({mensaje:"Trabajador actualizado correctamente",status:200}))}catch(a){u(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idTrabajador:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("deleteTrabajador"),{Request:r,Int:s}=n(0),c=new r(a);c.input("idTrabajador",s,o);const d="update trabajadores\n                                    set\n                                    estado = 0\n                                    where id = @idTrabajador";await c.query(d)&&(t(),e.json({mensaje:"Trabajador eliminado correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=n(8),t=o();t.post("/delete",async(a,e)=>{const{idPlanilla:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),r=await i("eliminaPlanilla"),{Request:s}=n(0),c=new s(r);try{await c.query(`update planillas_produccion\n        set\n        estado = 0\n        where id = ${parseInt(o)}`)&&(t(),e.json({mensaje:"Eliminacion exitosa !"}))}catch(a){t(),e.json({mensaje:a.message})}}),t.post("/listar",async(a,e)=>{const{fechaDesdeProduccion:o,fechaHastaProduccion:t,fechaDesdeFundicion:r,fechaHastaFundicon:s,idMaquina:c,idPieza:d,idMolde:u,idTipoProceso:p,idOperacion:l}=a.body,{abrirConexionPOOL:m,cerrarConexionPOOL:P}=n(1),j=await m(),{Transaction:b,Int:h}=n(0),_=new b(j),{Request:q}=n(0),y=n(0);_.begin(async a=>{a&&e.json({mensaje:a.message});const n=new q(_);n.input("fechaDesdeFundicion",y.Date,r),n.input("fechaHastaFundicon",y.Date,s),n.input("fechaDesdeProduccion",y.Date,o),n.input("fechaHastaProduccion",y.Date,t),n.input("idMaquina",h,""===c?null:parseInt(c)),n.input("idPieza",h,""===d?null:parseInt(d)),n.input("idMolde",h,""===u?null:parseInt(u)),n.input("idTipoProceso",h,""===p?null:parseInt(p)),n.input("idOperacion",h,""===l?null:parseInt(l));const m=new q(_),j=new q(_),b=new q(_);new q(_);var f,w,x,O,C=[];try{var M=await n.query("\n        select pl.id as idPlanilla, pl.fe_carga as fechaCarga, pl.fe_produccion as fechaProduccion, pl.fe_fundicion as fechaFundicion,\n        pl.hora_inicio as horaInicio , pl.hora_fin as horaFin, tm.id_operacion as idOperacion, maq.id as idMaquina ,maq.nombre as nombreMaquina , pie.id as idPieza,\n        pie.nombre as nombrePieza , mol.id as idMolde,  mol.nombre as nombreMolde , tp.id as idTipoProceso, tp.nombre as tipoProceso\n        , pl.id_proceso as idProceso\n        from planillas_produccion pl\n        join moldes mol on pl.id_molde = mol.id\n        join procesos p on pl.id_proceso = p.id\n        join piezas pie on p.id_pieza = pie.id\n        join maquinas maq on p.id_maquina = maq.id\n        join tipos_proceso tp on p.id_tipos_proceso = tp.id\n        join tipos_maquina tm on maq.id_tipos_maquina = tm.id\n        where pl.estado = 1\n        and  pl.fe_fundicion between @fechaDesdeFundicion and  @fechaHastaFundicon\n        and  pl.fe_produccion between  @fechaDesdeProduccion and  @fechaHastaProduccion\n        and (  @idMaquina  is null  or p.id_maquina =  @idMaquina  )\n        and (  @idPieza  is null  or p.id_pieza =  @idPieza  )\n        and (  @idMolde  is null  or pl.id_molde =  @idMolde  )\n        and (  @idTipoProceso  is null  or p.id_tipos_proceso =  @idTipoProceso  )\n        and (  @idOperacion  is null  or tm.id_operacion =   @idOperacion  ) ");if(Array.isArray(M.recordset)){M.recordset.forEach(a=>{var e={idPlanilla:a.idPlanilla,fechaCarga:a.fechaCarga,fechaProduccion:a.fechaProduccion,fechaFundicion:a.fechaFundicion,horaInicio:new i(a.horaInicio).format("HH:mm"),horaFin:new i(a.horaFin).format("HH:mm"),idOperacion:a.idOperacion,idMaquina:a.idMaquina,nombreMaquina:a.nombreMaquina,idPieza:a.idPieza,nombrePieza:a.nombrePieza,idMolde:a.idMolde,nombreMolde:a.nombreMolde,idTipoProceso:a.idTipoProceso,tipoProceso:a.tipoProceso,idProceso:a.idProceso};C.push(e)});var z="";C.forEach((a,e)=>{e===M.recordset.length-1?z+=`${parseInt(a.idPlanilla)} `:z+=`${parseInt(a.idPlanilla)} ,`}),""===z&&(z=null);var g=`select txp.id as idTrabajadorXplanilla , t.nombre as nombreTrabajador, t.apellido as apellidoTrabajador, tur.descripcion  as turnoTrabajador ,\n                txp.hora_inicio as horaInicio , txp.hora_fin as horaFin,  txp.pza_producidas as piezasProducidas ,\n                txp.calorias as calorias , txp.id_planilla as idPlanilla , txp.id_trabajador as idTrabajador , txp.id_turno as idTurno\n                from trabajador_x_planilla txp\n                join trabajadores t on txp.id_trabajador = t.id\n                join turnos tur on txp.id_turno = tur.id\n                where txp.estado = 1\n                and txp.id_planilla in ( ${z} )  ; `,T=` select pmxp.id as idParadaMaquinaXplanilla , pm.id as idParadaMaquina , pm.nombre as nombreParadaMaquina ,\n                pmxp.hora_incio as horaInicioParadaMaquina , pmxp.hora_fin as horaFinParadaMaquina , pmxp.id_planilla as idPlanilla , pm.tipo as tipoParadaMaquina\n                from paradas_maquinas_x_planilla pmxp\n                join paradas_maquina pm on pmxp.id_paradas_maquina = pm.id\n                where pmxp.estado = 1\n                and pmxp.id_planilla in ( ${z} ) ; `;const a=await m.query(g+T);if(a.recordsets[0]&&a.recordsets[1]){f=a.recordsets[0],O=a.recordsets[1];var v="";f.forEach((a,e)=>{e===f.length-1?v+=`${parseInt(a.idTrabajadorXplanilla)} `:v+=`${parseInt(a.idTrabajadorXplanilla)} ,`}),""===v&&(v=null);var R=` select rxtyp.id as idRechazoXtrabajadorYplanilla , d.nombre as nombreRechazo ,\n                    rxtyp.tipo as tipoRechazo , rxtyp.cantidad as cantidadRechazos , rxtyp.id_trabajador_x_planilla as idTrabajadorXplanilla , rxtyp.id_defecto as idDefecto\n                    from rechazos_x_trabajador_y_planilla rxtyp\n                    join defectos d on rxtyp.id_defecto = d.id\n                    where rxtyp.estado = 1\n                    and rxtyp.id_trabajador_x_planilla in ( ${v} ) ; `;const n=await j.query(R);if(n.recordset){w=n.recordset;var I="";w.forEach((a,e)=>{e===w.length-1?I+=`${parseInt(a.idRechazoXtrabajadorYplanilla)} `:I+=`${parseInt(a.idRechazoXtrabajadorYplanilla)} ,`}),""===I&&(I=null);const a=` select zxryp.id as idZona , zxryp.letra as letraZona ,\n                        zxryp.numero as numeroZona , zxryp.cantidad as cantidadZona ,\n                        zxryp.id_rechazos_x_trabajador_y_planilla as idRechazosXtrabajadorYplanilla\n                        from zonas_x_rechazo_x_planilla zxryp\n                        where zxryp.estado = 1\n                        and zxryp.id_rechazos_x_trabajador_y_planilla in ( ${I} ) ; `;var L=(a,e)=>{const n=new i(a).format("HH:mm");var o=new i(e).format("HH:mm"),t=new Date(`1995-12-17T03:${n}`),r=new Date(`1995-12-17T03:${o}`);return"06:00"===n&&"06:00"===o?1440:(r-t)/1e3<0?(r-t)/1e3+1440:(r-t)/1e3},D=await b.query(a);D.recordset&&(x=D.recordset,C.forEach((a,e)=>{a.vecOperarios=[],a.vecParadasMaquinaSeleccionada=[],O.forEach(e=>{if(parseInt(e.idPlanilla)===parseInt(a.idPlanilla)){var n={idParadaMaquinaXplanilla:e.idParadaMaquinaXplanilla,idParadaMaquina:e.idParadaMaquina,nombreParadaMaquina:e.nombreParadaMaquina,desdeParadaMaquina:new i(e.horaInicioParadaMaquina).format("HH:mm"),hastaParadaMaquina:new i(e.horaFinParadaMaquina).format("HH:mm"),duracionParadaMaquina:L(e.horaInicioParadaMaquina,e.horaFinParadaMaquina),tipoParadaMaquina:e.tipoParadaMaquina};a.vecParadasMaquinaSeleccionada.push(n)}}),f.forEach((e,n)=>{if(parseInt(a.idPlanilla)===parseInt(e.idPlanilla)){var o={idTrabajadorXplanilla:e.idTrabajadorXplanilla,idOperario:e.idTrabajador,idTurno:e.idTurno,nombreTrabajador:e.nombreTrabajador,nombre:e.idTrabajador,apellidoTrabajador:e.apellidoTrabajador,turnoTrabajador:e.turnoTrabajador,horaInicio:new i(e.horaInicio).format("HH:mm"),horaFin:new i(e.horaFin).format("HH:mm"),produccion:e.piezasProducidas,calorias:e.calorias,vecRechazo:[]};w.forEach(a=>{if(parseInt(o.idTrabajadorXplanilla)===parseInt(a.idTrabajadorXplanilla)){var e={idRechazoXtrabajadorYplanilla:a.idRechazoXtrabajadorYplanilla,idRechazo:a.idDefecto,nombreRechazo:a.nombreRechazo,tipo:a.tipoRechazo,cantidadRechazo:a.cantidadRechazos,vecZonas:[]};x.forEach(a=>{if(parseInt(a.idRechazosXtrabajadorYplanilla)===parseInt(e.idRechazoXtrabajadorYplanilla)){var n={idZona:a.idZona,letra:a.letraZona,numero:a.numeroZona,cantidad:a.cantidadZona};e.vecZonas.push(n)}}),o.vecRechazo.push(e)}}),a.vecOperarios.push(o)}})}),_.commit(),P(),e.json(C))}}}}catch(a){_.rollback(),P(),e.json({mensaje:a.message})}})}),t.post("/update",async(a,e)=>{var{fechaProduccion:o,fechaFundicion:i,idTurno:t,HoraInicioProduccion:r,HoraFinProduccion:s,idOperacion:c,idMaquina:d,idPieza:u,idMolde:p,idTipoProceso:l,vecOperarios:m,vecParadasMaquinaSeleccionada:P,idPlanilla:j}=a.body;console.log(j);const{abrirConexionPOOL:b,cerrarConexionPOOL:h}=n(1),_=await b("updatePlanilla"),{Transaction:q}=n(0),y=n(0),{Request:f,PreparedStatement:w}=n(0),x=await new q(_),O=await new w(x),C=await new f(x),M=n(5);x.begin((async function(a){if(a)console.log("err commit");else{(async()=>{try{if(await C.query(`\n                        delete zonas_x_rechazo_x_planilla\n                        where id_rechazos_x_trabajador_y_planilla in ( (select r.id\n                        from rechazos_x_trabajador_y_planilla r\n                        where r.id_trabajador_x_planilla in ( ( select t.id from trabajador_x_planilla t where t.id_planilla = ${j} ) ) ) ) ;\n                        delete rechazos_x_trabajador_y_planilla\n                        where id_trabajador_x_planilla in ( ( select t.id from trabajador_x_planilla t where t.id_planilla = ${j} ) ) ;\n                        delete trabajador_x_planilla where id_planilla = ${j} ;\n                        delete paradas_maquinas_x_planilla where id_planilla = ${j} ;\n                    `)){O.input("fe_produccion",y.Date),O.input("fe_fundicion",y.Date),O.input("hora_inicio",y.Time),O.input("hora_fin",y.Time),O.input("id_molde",y.Int),O.input("idPlanilla",y.Int),await O.prepare(`set dateformat dmy ;\n                            declare @idProce int ;\n                            set @idProce = (select top 1 id from procesos p  where p.id_maquina = ${d} and p.id_pieza = ${u} and id_tipos_proceso = ${l} ) ;\n                            update planillas_produccion\n                            set\n                            fe_produccion = @fe_produccion ,\n                            fe_fundicion = @fe_fundicion ,\n                            hora_inicio = @hora_inicio ,\n                            hora_fin = @hora_fin ,\n                            id_proceso = @idProce ,\n                            id_molde = @id_molde\n                            where id = @idPlanilla`);const c={fe_produccion:o,fe_fundicion:i,hora_inicio:new Date(`2020-02-15T${r}:00`),hora_fin:new Date(`2020-02-15T${s}:00`),id_turno:parseInt(t),id_molde:parseInt(p),idPlanilla:parseInt(j)};var a;if(a=await O.execute(c),await O.unprepare()&&(x.rollback(),h(),e.json({mensaje:"Error InsercionPlanilla"}).status(403)),a){var n=[];m.forEach(a=>{var e={calorias:parseInt(a.calorias),pza_producidas:parseInt(a.produccion),hora_inicio:new Date(`2020-02-15T${a.horaInicio}:00`),hora_fin:new Date(`2020-02-15T${a.horaFin}:00`),id_trabajador:parseInt(a.idOperario),id_planilla:parseInt(j),id_turno:parseInt(a.idTurno),vecRechazos:a.vecRechazo};n.push(e)}),M.eachSeries(n,(a,e)=>{const n=new f(x);n.input("calorias",y.Int,a.calorias),n.input("pza_producidas",y.Int,a.pza_producidas),n.input("id_turno",y.Int,a.id_turno),n.input("hora_inicio",y.Time,a.hora_inicio),n.input("hora_fin",y.Time,a.hora_fin),n.input("id_trabajador",y.Int,a.id_trabajador),n.input("id_planilla",y.Int,a.id_planilla);var o=[];a.vecRechazos.forEach(a=>{var e={cantidad:parseInt(a.cantidadRechazo),tipo:a.tipo?1:0,id_defecto:parseInt(a.idRechazo),vecZonas:a.vecZonas};o.push(e)});var i="insert into trabajador_x_planilla\n                                (calorias , pza_producidas, id_turno , hora_inicio , hora_fin , id_trabajador , id_planilla , estado)\n                                values\n                                (@calorias , @pza_producidas , @id_turno , @hora_inicio , @hora_fin , @id_trabajador , @id_planilla , 1) ;\n                                declare @id_trabajador_x_planilla int ;\n                                declare @id_rechazos_x_trabajador_y_planilla int ;\n                                set @id_trabajador_x_planilla = ( select max( id ) as idTrabajadorXplanilla from trabajador_x_planilla ) ; ";o.forEach(a=>{i+=`insert into rechazos_x_trabajador_y_planilla\n                                    (cantidad , tipo , id_defecto , id_trabajador_x_planilla , estado)\n                                    values\n                                    ( ${a.cantidad}, ${a.tipo} , ${a.id_defecto} , @id_trabajador_x_planilla ,1) ;\n                                    set @id_rechazos_x_trabajador_y_planilla = (select max(id) from rechazos_x_trabajador_y_planilla) ; `;var e=[];a.vecZonas.forEach(a=>{var n={cantidad:parseInt(a.cantidad),letra:a.letra,numero:parseInt(a.numero)};e.push(n)}),e.forEach(a=>{i+=` insert into zonas_x_rechazo_x_planilla\n                                        (cantidad , letra , numero , id_rechazos_x_trabajador_y_planilla , estado )\n                                        values\n                                        ( ${a.cantidad} , '${a.letra}' , ${a.numero} , @id_rechazos_x_trabajador_y_planilla , 1 ) ; `})}),n.query(i,(a,n)=>{a?e(a):e()})},a=>{if(a)x.rollback(),h(),e.json({mensaje:a.message}).status(403);else{var n=[];P.forEach(a=>{var e={hora_inicio:new Date(`2020-02-15T${a.desdeParadaMaquina}:00`),hora_fin:new Date(`2020-02-15T${a.hastaParadaMaquina}:00`),id_paradas_maquina:parseInt(a.idParadaMaquina),id_planilla:j};n.push(e)}),M.eachSeries(n,(a,e)=>{const n=new f(x);n.input("hora_incio",y.Time,a.hora_inicio),n.input("hora_fin",y.Time,a.hora_fin),n.input("id_paradas_maquina",y.Int,a.id_paradas_maquina),n.input("id_planilla",y.Int,a.id_planilla),n.query("insert into paradas_maquinas_x_planilla\n                                            ( hora_incio , hora_fin , id_paradas_maquina , id_planilla , estado )\n                                            values\n                                            ( @hora_incio , @hora_fin , @id_paradas_maquina , @id_planilla , 1 )",(a,n)=>{a?e(a):e()})},a=>{a?(x.rollback(),h(),e.json({mensaje:a.message}).status(403)):(x.commit(),h(),e.setHeader("Content-Type","text/event-stream"),e.status(200).json({mensaje:"Actualizacion exitosa"}))})}})}}}catch(a){x.rollback(),h(),e.json({mensaje:a.message,mensaje2:"Error catch FINAL"})}})()}}))}),t.post("/insert",async(a,e)=>{var o,{fechaProduccion:i,fechaFundicion:t,idTurno:r,HoraInicioProduccion:s,HoraFinProduccion:c,idOperacion:d,idMaquina:u,idPieza:p,idMolde:l,idTipoProceso:m,vecOperarios:P,vecParadasMaquinaSeleccionada:j}=a.body;const{abrirConexionPOOL:b,cerrarConexionPOOL:h}=n(1),_=await b("consultasa"),{Transaction:q}=n(0),y=n(0),{Request:f,PreparedStatement:w}=n(0),x=await new q(_),O=await new w(x),C=await new f(x),M=n(5);x.begin((async function(a){if(a)console.log("err commit");else{(async()=>{try{O.input("fe_produccion",y.Date),O.input("fe_fundicion",y.Date),O.input("hora_inicio",y.Time),O.input("hora_fin",y.Time),O.input("id_molde",y.Int),await O.prepare(`set dateformat dmy ;\n                        declare @idProce int ;\n                        set @idProce = (select top 1 id from procesos p  where p.id_maquina = ${u} and p.id_pieza = ${p} and id_tipos_proceso = ${m} and estado = 1 ) ;\n                        insert into planillas_produccion\n                        ( fe_carga , fe_produccion , fe_fundicion , hora_inicio , hora_fin , id_proceso , id_molde  , estado )\n                        values\n                        ( GETDATE() , @fe_produccion , @fe_fundicion , @hora_inicio , @hora_fin , @idProce , @id_molde , 1 )`);const d={fe_produccion:i,fe_fundicion:t,hora_inicio:new Date(`2020-02-15T${s}:00`),hora_fin:new Date(`2020-02-15T${c}:00`),id_turno:parseInt(r),id_molde:parseInt(l)};var a;if(a=await O.execute(d),await O.unprepare()&&(x.rollback(),h(),e.json({mensaje:"Error InsercionPlanilla".yellow})),a&&(o=await C.query("select max( id ) as idPlanilla from planillas_produccion")),o.recordset[0].idPlanilla&&!isNaN(o.recordset[0].idPlanilla)){var n=[];P.forEach(a=>{var e={calorias:parseInt(a.calorias),pza_producidas:parseInt(a.produccion),hora_inicio:new Date(`2020-02-15T${a.horaInicio}:00`),hora_fin:new Date(`2020-02-15T${a.horaFin}:00`),id_trabajador:parseInt(a.idOperario),id_planilla:parseInt(o.recordset[0].idPlanilla),id_turno:parseInt(a.idTurno),vecRechazos:a.vecRechazo};n.push(e)}),M.eachSeries(n,(a,e)=>{const n=new f(x);n.input("calorias",y.Int,a.calorias),n.input("pza_producidas",y.Int,a.pza_producidas),n.input("id_turno",y.Int,a.id_turno),n.input("hora_inicio",y.Time,a.hora_inicio),n.input("hora_fin",y.Time,a.hora_fin),n.input("id_trabajador",y.Int,a.id_trabajador),n.input("id_planilla",y.Int,a.id_planilla);var o=[];a.vecRechazos.forEach(a=>{var e={cantidad:parseInt(a.cantidadRechazo),tipo:a.tipo?1:0,id_defecto:parseInt(a.idRechazo),vecZonas:a.vecZonas};o.push(e)});var i="insert into trabajador_x_planilla\n                            (calorias , pza_producidas, id_turno , hora_inicio , hora_fin , id_trabajador , id_planilla , estado)\n                            values\n                            (@calorias , @pza_producidas , @id_turno , @hora_inicio , @hora_fin , @id_trabajador , @id_planilla , 1) ;\n                            declare @id_trabajador_x_planilla int ;\n                            declare @id_rechazos_x_trabajador_y_planilla int ;\n                            set @id_trabajador_x_planilla = ( select max( id ) as idTrabajadorXplanilla from trabajador_x_planilla ) ; ";o.forEach(a=>{i+=`insert into rechazos_x_trabajador_y_planilla\n                                (cantidad , tipo , id_defecto , id_trabajador_x_planilla , estado)\n                                values\n                                ( ${a.cantidad}, ${a.tipo} , ${a.id_defecto} , @id_trabajador_x_planilla ,1) ;\n                                set @id_rechazos_x_trabajador_y_planilla = (select max(id) from rechazos_x_trabajador_y_planilla) ; `;var e=[];a.vecZonas.forEach(a=>{var n={cantidad:parseInt(a.cantidad),letra:a.letra,numero:parseInt(a.numero)};e.push(n)}),e.forEach(a=>{i+=` insert into zonas_x_rechazo_x_planilla\n                                    (cantidad , letra , numero , id_rechazos_x_trabajador_y_planilla , estado )\n                                    values\n                                    ( ${a.cantidad} , '${a.letra}' , ${a.numero} , @id_rechazos_x_trabajador_y_planilla , 1 ) ; `})}),n.query(i,(a,n)=>{a?e(a):e()})},a=>{if(a)x.rollback(),h(),e.json({mensaje:a.message});else{var n=[];j.forEach(a=>{var e={hora_inicio:new Date(`2020-02-15T${a.desdeParadaMaquina}:00`),hora_fin:new Date(`2020-02-15T${a.hastaParadaMaquina}:00`),id_paradas_maquina:parseInt(a.idParadaMaquina),id_planilla:o.recordset[0].idPlanilla};n.push(e)}),M.eachSeries(n,(a,e)=>{const n=new f(x);n.input("hora_incio",y.Time,a.hora_inicio),n.input("hora_fin",y.Time,a.hora_fin),n.input("id_paradas_maquina",y.Int,a.id_paradas_maquina),n.input("id_planilla",y.Int,a.id_planilla),n.query("insert into paradas_maquinas_x_planilla\n                                        ( hora_incio , hora_fin , id_paradas_maquina , id_planilla , estado )\n                                        values\n                                        ( @hora_incio , @hora_fin , @id_paradas_maquina , @id_planilla , 1 )",(a,n)=>{a?e(a):e()})},a=>{a?(x.rollback(),h(),e.json({mensaje:a.message})):(x.commit(),h(),e.setHeader("Content-Type","text/event-stream"),e.json({mensaje:"Insercion exitora"}))})}})}//! FIN  IIF
}//! FIN DEL TRY
catch(a){x.rollback(),h(),e.json({mensaje:a.message,mensaje2:"Error catch FINAL"})}})()}}))}),a.exports=t},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{Request:t}=n(0);(new t).query("select id as idTipoProceso, nombre as nombreTipoProceso from tipos_proceso where estado = 1 ",(a,n)=>{a?(i(),e.json({mensaje:a.message})):(i(),e.json(n.recordset))})}),i.post("/",async(a,e)=>{const{idPieza:o,idMaquina:i}=a.body,{abrirConexion:t,cerrarConexion:r}=n(1);await t();const{Request:s}=n(0);(new s).query(`select tp.id as idTipoProceso, tp.nombre as nombreTipoProceso from tipos_proceso tp\n    join procesos p on tp.id = p.id_tipos_proceso where p.id_maquina = ${i} and p.id_pieza = ${o} and tp.estado = 1`,(a,n)=>{a?(r(),e.json({mensaje:a.message})):(r(),e.json(n.recordset))})}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/list",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),t=await o("consultaClientes"),{Request:r}=n(0),s=new r(t);try{const a=await s.query(" select c.id as idCliente , c.nombre as nombreCliente , c.razon_social as razonSocialCliente\n    from clientes c\n    where c.estado = 1");i(),e.json(a.recordset)}catch(a){i(),e.json({mensaje:a.message})}}),i.put("/delete",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),t=await o("deleteCliente"),{Request:r,Int:s}=n(0),c=new r(t);c.input("idCliente",s,parseInt(a.body.idCliente));try{await c.query("update clientes set estado = 0 where id = @idCliente")&&(i(),e.json({mensaje:"Cliente Eliminado Correctamente"}))}catch(a){i(),e.json({mensaje:a.message})}}),i.put("/update",async(a,e)=>{const{nombreCliente:o,razonSocialCliente:i,idCliente:t}=a.body,{abrirConexionPOOL:r,cerrarConexionPOOL:s}=n(1),c=await r("updateCliente"),{Request:d,Int:u,VarChar:p}=n(0),l=new d(c);l.input("nombreCliente",p,o),l.input("razonSocialCliente",p,i),l.input("idCliente",u,t);try{await l.query(" update clientes\n    set\n    nombre = @nombreCliente ,\n    razon_social = @razonSocialCliente\n    where id = @idCliente")&&(s(),e.json({mensaje:"Cliente Actualizado Correctamente "}))}catch(a){s(),e.json({mensaje:a.message})}}),i.post("/insert",async(a,e)=>{const{nombreCliente:o,razonSocialCliente:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1),{Request:s,VarChar:c}=n(0),d=new s(await t("insertCliente"));d.input("nombreCliente",c,o),d.input("razonSocialCliente",c,i);try{await d.query("insert into clientes ( nombre , razon_social , estado  ) values  ( @nombreCliente , @razonSocialCliente , 1 )")&&(r(),e.json({mensaje:"Cliente Insertado correctamente"}))}catch(a){r(),e.json({mensaje:a.message})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/list",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1);try{const a=await o("consultaListaClientes"),{Request:t}=n(0),r=new t(a),s="select id as idTipoMaterial , nombre as nombreTipoMaterial\n        from tipos_material\n        where estado = 1",c=await r.query(s);c&&(i(),e.json(c.recordset))}catch(a){i(),e.json({mensaje:a.message})}}),i.post("/insert",async(a,e)=>{const{nombreMaterial:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("insertTipoMatrial"),{Request:r,VarChar:s}=n(0),c=new r(a);c.input("nombreMaterial",s,o);const d="insert into tipos_material ( nombre , estado )\n        values ( @nombreMaterial , 1 )  ";await c.query(d)&&(t(),e.json({mensaje:"Tipo de Material insertado correctamente "}))}catch(a){t(),e.json({mensaje:a.message})}}),i.put("/update",async(a,e)=>{const{idTipoMaterial:o,nombreTipoMaterial:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1);try{const a=await t("updateTipoMaterial"),{Request:s,VarChar:c,Int:d}=n(0),u=new s(a);u.input("nombreTipoMaterial",c,i),u.input("idTipoMaterial",d,o);const p="update tipos_material\n        set\n        nombre = @nombreTipoMaterial\n        where id = @idTipoMaterial";await u.query(p)&&(r(),e.json({mensaje:"Tipo de Material actualizado correctamente "}))}catch(a){r(),e.json({mensaje:a.message})}}),i.put("/delete",async(a,e)=>{const{idTipoMaterial:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("deletTipoMaterial"),{Request:r,VarChar:s,Int:c}=n(0),d=new r(a);d.input("idTipoMaterial",c,o);const u="update tipos_material\n        set\n        estado = 0\n        where id = @idTipoMaterial";await d.query(u)&&(t(),e.json({mensaje:"Tipo de Material eliminado  correctamente "}))}catch(a){t(),e.json({mensaje:a.message})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1);try{const a=await o("listaAreas"),{Request:t}=new n(0),r=new t(a),s=await r.query("select id as idArea , nombre as nombreArea\n            from areas\n            where estado = 1");s&&(i(),e.json(s.recordset))}catch(a){i(),e.json({mensaje:a.message})}}),i.post("/insert",async(a,e)=>{const{nombreArea:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,VarChar:s}=n(0);try{const a=new r(await i("insertArea"));a.input("nombreArea",s,o);const n="insert into areas ( nombre , estado )\n        values\n        ( @nombreArea , 1 )";await a.query(n)&&(t(),e.json({mensaje:"Area Insertado correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idArea:o,nombreArea:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1),{Request:s,VarChar:c,Int:d}=n(0);try{const a=new s(await t("updateArea"));a.input("nombreArea",c,i),a.input("idArea",d,o);const n="update areas\n        set\n        nombre = @nombreArea\n        where id = @idArea";await a.query(n)&&(r(),e.json({mensaje:"Area actualizada correctamente",status:200}))}catch(a){r(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idArea:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deleteArea"));a.input("idArea",s,o);const n="update areas\n        set\n        estado = 0\n        where id = @idArea";await a.query(n)&&(t(),e.json({mensaje:"Area eliminada correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/list",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1);try{const a=await o("listaTiposMaquina"),{Request:t}=n(0),r=new t(a),s="select tm.id as idTipoMaquina , tm.nombre as nombreTipoMaquina , tm.id_operacion as idOperacion ,\n        o.nombre as nombreOperacion\n        from tipos_maquina tm\n        join operaciones o on tm.id_operacion = o.id\n        where tm.estado = 1",c=await r.query(s);c&&(i(),e.json(c.recordset))}catch(a){i(),e.json({mensaje:a.message})}}),i.post("/insert",async(a,e)=>{const{nombreTipoMaquina:o,idOperacion:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1),{Request:s,VarChar:c,Int:d}=n(0);try{const a=new s(await t("insertTipoMaquina"));a.input("nombreTipoMaquina",c,o),a.input("idOperacion",d,i);const n="insert into tipos_maquina ( nombre , id_operacion , estado )\n        values\n        ( @nombreTipoMaquina , @idOperacion , 1 )";await a.query(n)&&(r(),e.json({mensaje:"Tipo de maquina Insertada correctamente",status:200}))}catch(a){r(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idTipoMaquina:o,nombreTipoMaquina:i,idOperacion:t}=a.body,{abrirConexionPOOL:r,cerrarConexionPOOL:s}=n(1),{Request:c,VarChar:d,Int:u}=n(0);try{const a=new c(await r("updateTipoMaquina"));a.input("nombreTipoMaquina",d,i),a.input("idOperacion",u,t),a.input("idTipoMaquina",u,o);const n="update tipos_maquina\n        set\n        nombre = @nombreTipoMaquina ,\n        id_operacion = @idOperacion\n        where id = @idTipoMaquina";await a.query(n)&&(s(),e.json({mensaje:"Tipo de maquina actualizada correctamente",status:200}))}catch(a){s(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idTipoMaquina:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deleteTipoMaquina"));a.input("idTipoMaquina",s,o);const n="update tipos_maquina\n        set\n        estado = 0\n        where id = @idTipoMaquina";await a.query(n)&&(t(),e.json({mensaje:"Tipo de maquina eliminada correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/list",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1);try{const a=await o("listaPlantas"),{Request:t}=n(0),r=new t(a),s="select p.id as idPlanta , p.nombre as nombrePlanta , p.barrio as barrioPlanta ,\n        p.cp as codigoPostalPlanta , p.calle as callePlanta , p.altura_calle as alturaCallePlanta\n        from plantas p\n        where p.estado = 1",c=await r.query(s);c&&(i(),e.json(c.recordset))}catch(a){i(),e.json({mensaje:a.message})}}),i.post("/insert",async(a,e)=>{const{nombrePlanta:o,barrioPlanta:i,codigoPostalPlanta:t,callePlanta:r,alturaCallePlanta:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=n(1),{Request:u,VarChar:p,Int:l}=n(0);try{const a=new u(await c("insertPlanta"));a.input("nombrePlanta",p,o),a.input("barrioPlanta",p,i),a.input("codigoPostalPlanta",l,t),a.input("callePlanta",p,r),a.input("alturaCallePlanta",l,s);const n="insert into plantas ( nombre , barrio , cp , calle , altura_calle , estado )\n        values\n        ( @nombrePlanta , @barrioPlanta , @codigoPostalPlanta , @callePlanta , @alturaCallePlanta , 1 )";await a.query(n)&&(d(),e.json({mensaje:"Planta Insertada correctamente",status:200}))}catch(a){d(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idPlanta:o,nombrePlanta:i,barrioPlanta:t,codigoPostalPlanta:r,callePlanta:s,alturaCallePlanta:c}=a.body,{abrirConexionPOOL:d,cerrarConexionPOOL:u}=n(1),{Request:p,VarChar:l,Int:m}=n(0);try{const a=new p(await d("updatePlanta"));a.input("nombrePlanta",l,i),a.input("barrioPlanta",l,t),a.input("codigoPostalPlanta",m,r),a.input("callePlanta",l,s),a.input("alturaCallePlanta",m,c),a.input("idPlanta",m,o);const n="update plantas\n        set\n        nombre = @nombrePlanta ,\n        barrio = @barrioPlanta ,\n        cp = @codigoPostalPlanta ,\n        calle = @callePlanta ,\n        altura_calle = @alturaCallePlanta\n        where id = @idPlanta";await a.query(n)&&(u(),e.json({mensaje:"Planta actualizada correctamente",status:200}))}catch(a){u(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idPlanta:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deletePlanta"));a.input("idPlanta",s,o);const n="update plantas\n        set\n        estado = 0\n        where id = @idPlanta";await a.query(n)&&(t(),e.json({mensaje:"Planta eliminada correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/list",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1);try{const a=await o("listarPuestos"),{Request:t}=n(0),r=new t(a),s="select id as idPuesto , nombre as nombrePuesto from puestos where estado = 1",c=await r.query(s);c&&(i(),e.json(c.recordset))}catch(a){e.json({mensaje:a.message,status:403})}}),i.post("/insert",async(a,e)=>{const{nombrePuesto:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("insertPuesto"),{Request:r,VarChar:s}=n(0),c=new r(a);c.input("nombrePuesto",s,o);const d="insert into puestos ( nombre , estado )\n        values\n        ( @nombrePuesto , 1 )";await c.query(d)&&(t(),e.json({mensaje:"Puesto insertado correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idPuesto:o,nombrePuesto:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1);try{const a=await t("updatePuesto"),{Request:s,Int:c,Date:d,VarChar:u}=n(0),p=new s(a);p.input("nombrePuesto",u,i),p.input("idPuesto",c,o);const l="update puestos\n                                    set\n                                    nombre = @nombrePuesto\n                                    where id = @idPuesto";await p.query(l)&&(r(),e.json({mensaje:"Puesto actualizado correctamente",status:200}))}catch(a){r(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idPuesto:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("deletePuesto"),{Request:r,Int:s}=n(0),c=new r(a);c.input("idPuesto",s,o);const d="update puestos\n                                    set\n                                    estado = 0\n                                    where id = @idPuesto";await c.query(d)&&(t(),e.json({mensaje:"Puesto eliminado correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.post("/fundicion",async(a,e)=>{const{idMaquina:o,idPieza:i,idMolde:t,fechaFundicionDesde:r,fechaFundicionHasta:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=n(1),u=n(0);try{const a=await c("listaOEEfundicion"),n=new u.Request(a);n.input("idMaquina",u.Int,o),n.input("idPieza",u.Int,i),n.input("idMolde",u.Int,t),n.input("fechaFundicionDesde",u.Date,r),n.input("fechaFundicionHasta",u.Date,s);const p=await n.execute("pa_datosOEEfun");p&&(d(),e.json(p.recordset))}catch(a){d(),e.json({mensaje:a.message,status:403})}}),i.post("/granallado",async(a,e)=>{const{idMaquina:o,idPieza:i,idMolde:t,fechaProduccionDesde:r,fechaProduccionHasta:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=n(1),u=n(0);try{const a=await c("listaOEEgranallado"),n=new u.Request(a);n.input("idMaquina",u.Int,o),n.input("idPieza",u.Int,i),n.input("idMolde",u.Int,t),n.input("fechaProduccionDesde",u.Date,r),n.input("fechaProduccionHasta",u.Date,s);const p=await n.execute("pa_datosOEEgra");p&&(d(),e.json(p.recordset))}catch(a){d(),e.json({mensaje:a.message,status:403})}}),i.post("/mecanizado",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),{idMaquina:t,idPieza:r,idMolde:s,fechaProduccionDesde:c,fechaProduccionHasta:d}=a.body;try{const a=await o("listaOEEmecanizado"),u=n(0),p=new u.Request(a);p.input("idMaquina",u.Int,t),p.input("idPieza",u.Int,r),p.input("idMolde",u.Int,s),p.input("fechaProduccionDesde",u.Date,c),p.input("fechaProduccionHasta",u.Date,d);const l=await p.execute("pa_datosOEEmec");l&&(i(),e.json(l.recordset))}catch(a){i(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.post("/rechazosPrimeraVuelta",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),{fechaFundicionDesde:t,fechaFundicionHasta:r,idMaquina:s,idPieza:c,idMolde:d}=a.body;try{const a=n(0),u=await o("consultaReporteRechazos"),p=new a.Request(u);p.input("fechaFundicionDesde",a.Date,t),p.input("fechaFundicionHasta",a.Date,r),p.input("idMaquina",a.Int,s),p.input("idPieza",a.Int,c),p.input("idMolde",a.Int,d);const l=await p.execute("pa_rechazosTotales");l&&(i(),e.json(l.recordset))}catch(a){i(),e.json({status:403,mensaje:a.message})}}),i.post("/paradasMaquina",async(a,e)=>{const{idArea:o,fechaFundicionDesde:i,fechaFundicionHasta:t}=a.body,{abrirConexionPOOL:r,cerrarConexionPOOL:s}=n(1);try{const a=n(0),c=await r("reporteParadasMaquina"),d=new a.Request(c);d.input("idArea",a.Int,o),d.input("fechaFundicionDesde",a.Date,i),d.input("fechaFundicionHasta",a.Date,t);const u=await d.execute("pa_reporteParadasMaquina");u&&(s(),e.json(u.recordset))}catch(a){s(),e.json({mensaje:a.message})}}),i.post("/detalleParaMaquinaXmaquina",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),{fechaDesdeFundicion:t,fechaHastaFundicion:r,nombreMaquina:s,idArea:c}=a.body;try{const a=n(0),d=await o("consultaDetallePardaMaquina"),u=new a.Request(d);u.input("fechaDesdeFundicion",a.Date,t),u.input("fechaHastaFundicion",a.Date,r),u.input("nombreMaquina",a.VarChar,s),u.input("idArea",a.Int,c);const p=await u.execute("pa_detalleParadaMaquina");p&&(i(),e.json(p.recordset))}catch(a){i(),e.json({status:403,mensaje:a.message})}}),i.post("/paradasMaquinaXpm",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),{fechaDesdeFundicion:t,fechaHastaFundicion:r}=a.body;try{const a=n(0),s=await o("consultaPardaMaquinaXpm"),c=new a.Request(s);c.input("fechaDesdeFundicion",a.Date,t),c.input("fechaHastaFundicion",a.Date,r);const d=await c.execute("pa_reportePM");d&&(i(),e.json(d.recordset))}catch(a){i(),e.json({status:403,mensaje:a.message})}}),i.post("/detalleParaMaquinaXpm",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),{fechaDesdeFundicion:t,fechaHastaFundicion:r,nombreParadaMaquina:s}=a.body;try{const a=n(0),c=await o("consultaDetallePardaMaquinaXpm2"),d=new a.Request(c);d.input("fechaDesdeFundicion",a.Date,t),d.input("fechaHastaFundicion",a.Date,r),d.input("nombreParadaMaquina",a.VarChar,s);const u=await d.execute("pa_detalleParadaMaquina2");u&&(i(),e.json(u.recordset))}catch(a){i(),e.json({status:403,mensaje:a.message})}}),i.post("/rechazosXpieza",async(a,e)=>{const{fechaFundicionDesde:o,fechaFundicionHasta:i,idMaquina:t,idPieza:r,idMolde:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=n(1),u=n(0);try{const a=await c("consultaRechazosXmaquina"),n=new u.Request(a);n.input("fechaFundicionDesde",u.Date,o),n.input("fechaFundicionHasta",u.Date,i),n.input("idMaquina",u.Int,t),n.input("idPieza",u.Int,r),n.input("idMolde",u.Int,s);const p=await n.execute("pa_rechazosXpiezas");p&&(d(),e.json(p.recordset))}catch(a){d(),e.json({status:403,mensaje:a.message})}}),i.post("/calorias",async(a,e)=>{const{fechaProduccionDesde:o,fechaProduccionHasta:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1);try{const a=await t("reporteCalorias"),s=n(0),c=new s.Request(a);c.input("fechaProduccionDesde",s.Date,o),c.input("fechaProduccionHasta",s.Date,i);const d=await c.execute("pa_caloriasXtrabajador");d&&(r(),e.json(d.recordset))}catch(a){r(),e.json({status:403,mensaje:a.message})}}),i.post("/detalleCalorias",async(a,e)=>{const{fechaProduccionDesde:o,fechaProduccionHasta:i,idTrabajador:t}=a.body,{abrirConexionPOOL:r,cerrarConexionPOOL:s}=n(1);try{const a=await r("reporteDetalleCalorias"),c=n(0),d=new c.Request(a);d.input("fechaProduccionDesde",c.Date,o),d.input("fechaProduccionHasta",c.Date,i),d.input("idTrabajador",c.Int,t);const u=await d.execute("pa_detalleCaloriasTrabajadore");u&&(s(),e.json(u.recordset))}catch(a){s(),e.json({status:403,mensaje:a.message})}}),a.exports=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibXNzcWxcIiIsIndlYnBhY2s6Ly8vLi9jb25leGlvbmVzL3NxbFNlcnZlci5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJleHByZXNzXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwianNvbndlYnRva2VuXCIiLCJ3ZWJwYWNrOi8vLy4vQ09ORklHLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImFzeW5jXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibW9uZ29vc2VcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJiY3J5cHQtbm9kZWpzXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibW9tZW50XCIiLCJ3ZWJwYWNrOi8vLy4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY29yc1wiIiwid2VicGFjazovLy8uL3J1dGFzQXBpL2F1dGhBY2Nlc29zL2F1dGhBbGxSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vcnV0YXNBcGkvYXV0aEFjY2Vzb3NSZWFjdC9hdXRoQWRtaW5Sb3V0ZXJSZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS9hdXRoQWNjZXNvc1JlYWN0L2F1dGhOaXZlbDFSb3V0ZXJSZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS9hdXRoQWNjZXNvc1JlYWN0L2F1dGhOaXZlbDJSb3V0ZXJSZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS9hdXRoQWNjZXNvc1JlYWN0L2F1dGhOaXZlbDNSb3V0ZXJSZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS9hdXRoQWNjZXNvc1JlYWN0L2F1dGhOaXZlbDRSb3V0ZXJSZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS9hdXRoQWNjZXNvc1JlYWN0L2F1dGhOaXZlbDVSb3V0ZXJSZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS9tYXF1aW5hcy5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS9hdXRoQWNjZXNvcy9hdXRoQWRtaW5Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vcnV0YXNBcGkvdXN1YXJpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vY29uZXhpb25lcy9tb25nb0RiLmpzIiwid2VicGFjazovLy8uL2VzcXVlbWFzTW9uZ28vZXNxdWVtYVVzdWFyaW9zLmpzIiwid2VicGFjazovLy8uL2VzcXVlbWFzTW9uZ28vZXNxdWVtYVJvbGVzVXN1YXJpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vcnV0YXNBcGkvTG9ndWVvLmpzIiwid2VicGFjazovLy8uL3J1dGFzQXBpL0F1dGVudGlmaWNhc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS9waWV6YXMuanMiLCJ3ZWJwYWNrOi8vLy4vcnV0YXNBcGkvbW9sZGVzLmpzIiwid2VicGFjazovLy8uL3J1dGFzQXBpL2RlZmVjdG9zLmpzIiwid2VicGFjazovLy8uL3J1dGFzQXBpL29wZXJhY2lvbmVzLmpzIiwid2VicGFjazovLy8uL3J1dGFzQXBpL3Byb2Nlc29zLmpzIiwid2VicGFjazovLy8uL3J1dGFzQXBpL3R1cm5vcy5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS9wYXJhZGFzTWFxdWluYS5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS90cmFiYWphZG9yZXMuanMiLCJ3ZWJwYWNrOi8vLy4vcnV0YXNBcGkvcGxhbmlsbGFzUHJvZHVjY2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS90aXBvc1Byb2Nlc28uanMiLCJ3ZWJwYWNrOi8vLy4vcnV0YXNBcGkvY2xpZW50ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vcnV0YXNBcGkvdGlwb3NNYXRlcmlhbC5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS9hcmVhcy5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS90aXBvc01hcXVpbmEuanMiLCJ3ZWJwYWNrOi8vLy4vcnV0YXNBcGkvcGxhbnRhcy5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS9wdWVzdG9zLmpzIiwid2VicGFjazovLy8uL3J1dGFzQXBpL29lZS5qcyIsIndlYnBhY2s6Ly8vLi9ydXRhc0FwaS9yZXBvcnRlcy5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInJlcXVpcmUiLCJtc3NxbCIsIlVSSSIsInVzZXIiLCJwcm9jZXNzIiwiZW52IiwiVVNFUlNRTCIsInBhc3N3b3JkIiwiUEFTU1dPUkRTUUwiLCJkYXRhYmFzZSIsIkRBVEFCQVNFU1FMIiwic2VydmVyIiwiU0VSVkVSU1FMIiwib3B0aW9ucyIsImVuYWJsZUFyaXRoQWJvcnQiLCJlbmNyeXB0IiwiQ29uZXhpb25TUUwiLCJhYnJpckNvbmV4aW9uIiwidW5kZWZpbmVkIiwiY2VycmFyQ29uZXhpb24iLCJhYnJpckNvbmV4aW9uUE9PTCIsImNlcnJhckNvbmV4aW9uUE9PTCIsImFzeW5jIiwiY29ubmVjdCIsInRoZW4iLCJwb29sIiwiX2Nvbm5lY3RlZCIsImNvbnNvbGUiLCJsb2ciLCJjb25leGlvbiIsImNsb3NlIiwiY29uZXhpb25lcyIsIm5ld0NvbmV4aW9uIiwiQ29ubmVjdGlvblBvb2wiLCJhcmdzIiwiUHJvbWlzZSIsImFsbCIsInZhbHVlcyIsIm1hcCIsInNlY3JldCIsImV4cHJlc3MiLCJjb3JzIiwic2Vydmlkb3IiLCJ1c2UiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwic2V0IiwiUE9SVCIsImxpc3RlbiIsImUiLCJqd3QiLCJyZXEiLCJyZXMiLCJuZXh0IiwicGF0aCIsImhlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwidG9rZW4iLCJzcGxpdCIsInZlcmlmeSIsImRhdG9zIiwic3RhdHVzIiwibWVuc2FqZSIsIm1lc3NhZ2UiLCJvdHJvIiwiUm91dGVyIiwicm91dGVyIiwiZGF0b3NVc2VyIiwicGVyZmlsIiwicGVybWlzbyIsIlJlcXVlc3QiLCJxdWVyeSIsImVyciIsImRhdG8iLCJyZWNvcmRzZXQiLCJpZE9wZXJhY2lvbiIsInBhcmFtcyIsInBvc3QiLCJub21icmVNYXF1aW5hIiwiZGVzY3JpcGNpb25NYXF1aW5hIiwiaWRUaXBvTWFxdWluYSIsImlkUGxhbnRhIiwiYm9keSIsIlZhckNoYXIiLCJJbnQiLCJteVJlcXVlc3QiLCJpbnB1dCIsInB1dCIsImlkTWFxdWluYSIsImJjcnlwIiwicmVzdWx0IiwiZXhlY3V0ZSIsImlkIiwidXNlck5hbWUiLCJlbWFpbCIsIm5vbWJyZSIsImFwZWxsaWRvIiwiaWRQZXJmaWwiLCJoYXNoU3luYyIsImVycm9yIiwiaWRVc3VhcmlvIiwibW9uZ29vc2UiLCJNT05HT0RCX1VSSSIsInVzZU5ld1VybFBhcnNlciIsInVzZVVuaWZpZWRUb3BvbG9neSIsImNvbm5lY3Rpb24iLCJvbiIsIm9uY2UiLCJ1c3VhcmlvIiwiU2NoZW1hIiwidHlwZSIsIlN0cmluZyIsInJlcXVpcmVkIiwidW5pcXVlIiwiZW51bSIsIm1vZGVsIiwiYmNyeXB0IiwiY29tcGFyZVN5bmMiLCJtaVVzdWFyaW8iLCJub21icmVVc3VhcmlvIiwiYXBlbGxpZG9Vc3VhcmlvIiwibm9tYnJlUGVyZmlsIiwic2lnbiIsImV4cGlyZXNJbiIsIkNPTkZJRyIsIm5vbWJyZVBpZXphIiwiaWRDbGllbnRlIiwiaWRUaXBvTWF0ZXJpYWwiLCJpZFBpZXphIiwibm9tYnJlTW9sZGUiLCJpZE1vbGRlIiwibm9tYnJlRGVmZWN0byIsImlkRGVmZWN0byIsIm5vbWJyZU9wZXJhY2lvbiIsImlkVGlwb1Byb2Nlc28iLCJUcmFuc2FjdGlvbiIsIm15VHJhbnNhY3Rpb24iLCJiZWdpbiIsImVycm9yVHJhbnNhYyIsInJvbGxiYWNrIiwidmVjUHJvY2Vzb3MiLCJteVJlcXVlc3RQaWV6YVhocyIsInJlc3BvbnNlIiwiaWRQcm9jZXNvcyIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJpZFByb2Nlc28iLCJ0cmltIiwic3Vic3RyaW5nIiwibGVuZ3RoIiwicXVlcnlQaWV6YVhocyIsInJlc3VscnB6WGhzIiwidmVjUGllemFzWGhvcmEiLCJwelhocyIsImluZGV4IiwicGFyc2VJbnQiLCJwdXNoIiwiY29tbWl0IiwiZGVzY3JpcGNpb25Qcm9jZXNvIiwiaWRUaXBvc1Byb2Nlc28iLCJEYXRlIiwibXlSZXF1ZXN0UHJvY2VzbyIsImFzaW5jcm9ubyIsImVycm9yVHJhc2FjdGlvbnMiLCJyZXNwb25zZVByb2Nlc29zIiwicmVjb3Jkc2V0cyIsImVhY2hTZXJpZXMiLCJwaWV6YVhocyIsImNhbGxiYWNrIiwibXlSZXF1ZXN0UGllWGhzIiwiY2FudGlkYWRQaWV6YXNYaHMiLCJkZXNkZVBpZXphc1hocyIsImhhc3RhUGllemFzWGhzIiwiZXJyb3JDYWxiYWNrIiwicXVlcnlQcm9jZXNvcyIsIm5vbWJyZVBhcmFkYU1hcXVpbmEiLCJ0aXBvUGFyYWRhTWFxdWluYSIsInNldHVwUGFyYWRhTWFxdWluYSIsImlkQXJlYSIsIkJpdCIsImlkUGFyYWRhTWFxdWluYSIsIm5vbWJyZVRyYWJhamFkb3IiLCJhcGVsbGlkb1RyYWJhamFkb3IiLCJuYWNpbWllbnRvVHJhYmFqYWRvciIsImluZ3Jlc29UcmFiYWphZG9yIiwiaWRQdWVzdG8iLCJpZFRyYWJhamFkb3IiLCJNb21lbnQiLCJpZFBsYW5pbGxhIiwiY29uZXhpb25BYmllcnRhIiwiY29uc3VsdGEiLCJmZWNoYURlc2RlUHJvZHVjY2lvbiIsImZlY2hhSGFzdGFQcm9kdWNjaW9uIiwiZmVjaGFEZXNkZUZ1bmRpY2lvbiIsImZlY2hhSGFzdGFGdW5kaWNvbiIsInRyYW5zYWNjaW9uIiwiY29uc3VsdGFQbGFuaWxsYSIsImNvbnN1bHRhT3BlcmFyaW9zWHBsYW5pbGxhIiwiY29uc3VsdGFSZWNoYXpvcyIsImNvbnN1bHRhWm9uYXMiLCJ2ZWNUcmFiYWphZG9yZXMiLCJ2ZWNSZWNoYXpvcyIsInZlY1pvbmFzIiwidmVjUE0iLCJ2ZWNQbGFuaWxsYVByb2R1Y2Npb24iLCJyZXN1bHRQbGFuaWxsYVByb2R1Y2Npb24iLCJwbGEiLCJwbGFuaWxsYSIsImZlY2hhQ2FyZ2EiLCJmZWNoYVByb2R1Y2Npb24iLCJmZWNoYUZ1bmRpY2lvbiIsImhvcmFJbmljaW8iLCJmb3JtYXQiLCJob3JhRmluIiwidGlwb1Byb2Nlc28iLCJsaXN0YUlkUGxhbmlsbGFzUHJvZHVjIiwiaW5kZXhQbGFuaWxsYSIsInNxbENvbnN1bHRhT3BlcmFyaW9zWHBsYW5pbGxhIiwic3FsQ29uc3VsdGFQTSIsInRyYWJhamFkb3Jlc1hwbGFuaWxsYSIsImxpc3RhSWRUcmFiYWphZG9yZXMiLCJpZFRyYWJhamFkb3JYcGxhbmlsbGEiLCJzcWxDb25zdWx0YVJlY2hhem9zIiwicmVjaGF6b3MiLCJsaXN0YUlkUmVjaGF6b3MiLCJyZSIsImluZGV4UmVjaGF6byIsImlkUmVjaGF6b1h0cmFiYWphZG9yWXBsYW5pbGxhIiwic3FsQ29uc3VsdGFab25hcyIsImRpcmVyZW5jaWFFbk1pbnV0b3MiLCJoX2luaWNpbyIsImhfZmluIiwiaERlc2RlIiwiaEhhc3RhIiwibGlzdGFab25hcyIsInBsIiwidmVjT3BlcmFyaW9zIiwidmVjUGFyYWRhc01hcXVpbmFTZWxlY2Npb25hZGEiLCJwbSIsInBhcmFkYU1hcSIsImlkUGFyYWRhTWFxdWluYVhwbGFuaWxsYSIsImRlc2RlUGFyYWRhTWFxdWluYSIsImhvcmFJbmljaW9QYXJhZGFNYXF1aW5hIiwiaGFzdGFQYXJhZGFNYXF1aW5hIiwiaG9yYUZpblBhcmFkYU1hcXVpbmEiLCJkdXJhY2lvblBhcmFkYU1hcXVpbmEiLCJ0ciIsImluZGV4VHJhYmFqYWRvciIsInRyYVhwbGEiLCJpZE9wZXJhcmlvIiwiaWRUdXJubyIsInR1cm5vVHJhYmFqYWRvciIsInByb2R1Y2Npb24iLCJwaWV6YXNQcm9kdWNpZGFzIiwiY2Fsb3JpYXMiLCJ2ZWNSZWNoYXpvIiwicmVjaCIsImlkUmVjaGF6byIsIm5vbWJyZVJlY2hhem8iLCJ0aXBvIiwidGlwb1JlY2hhem8iLCJjYW50aWRhZFJlY2hhem8iLCJjYW50aWRhZFJlY2hhem9zIiwiem9uIiwiaWRSZWNoYXpvc1h0cmFiYWphZG9yWXBsYW5pbGxhIiwiem9uYVhyZWNoYSIsImlkWm9uYSIsImxldHJhIiwibGV0cmFab25hIiwibnVtZXJvIiwibnVtZXJvWm9uYSIsImNhbnRpZGFkIiwiY2FudGlkYWRab25hIiwiSG9yYUluaWNpb1Byb2R1Y2Npb24iLCJIb3JhRmluUHJvZHVjY2lvbiIsIlByZXBhcmVkU3RhdGVtZW50IiwicHNfaW5zZXJjaW9uUGxhbmlsbGFQcm9kdWNjaW9uIiwiZGVsZXRlWm9uYXNSZWNoYXpvc09wZXJhcmlvc1BtIiwiVGltZSIsInByZXBhcmUiLCJkYXRvc1BsYW5pbGxhUHJvZHVjY2lvbiIsImZlX3Byb2R1Y2Npb24iLCJmZV9mdW5kaWNpb24iLCJob3JhX2luaWNpbyIsImhvcmFfZmluIiwiaWRfdHVybm8iLCJpZF9tb2xkZSIsInJlc3VsdEMxIiwidW5wcmVwYXJlIiwidmVjT3BlcmFyaW9zWHBsYW5pbGxhIiwib3BlcmFyaW8iLCJvcCIsInB6YV9wcm9kdWNpZGFzIiwiaWRfdHJhYmFqYWRvciIsImlkX3BsYW5pbGxhIiwidHJhYmFqYWRvciIsInBzX2luc2VyY2lvblRyYWJhamFkb3Jlc1hQbGFuaWxsYSIsInZlY1JlY2hhem9zVHJhYmFqYWRvclhwbGFuaWxsYSIsInJlY2hhem9aIiwiaWRfZGVmZWN0byIsInJlY2hhem8iLCJ2ZWNab25hc1hyZWNoYXpvIiwiem9uYSIsInpvbyIsInZlY1BhcmFkYXNEZU1hcXVpbmEiLCJwYXJhTUFDIiwiaWRfcGFyYWRhc19tYXF1aW5hIiwiUE0iLCJjYWxsYmFja1BNIiwiY29uc3VsdGFJbnNlcmNpb25QYXJhZGFzRGVNYXF1aW5hIiwiRVIiLCJyZXN1bHRQTSIsImVycm9SIiwic2V0SGVhZGVyIiwibWVuc2FqZTIiLCJtZXRvZG9UcmFuc2FjY2lvbiIsImlkUGxhbmlsbGFQcm9kdWNjaW9uIiwiY29uc3VsdGFJRHBsYW5pbGxhUHJvZHVjY2lvbiIsInllbGxvdyIsImlzTmFOIiwiY29uZXhpb24yIiwibXlSZXF1ZXN0MiIsIm5vbWJyZUNsaWVudGUiLCJyYXpvblNvY2lhbENsaWVudGUiLCJub21icmVNYXRlcmlhbCIsIm5vbWJyZVRpcG9NYXRlcmlhbCIsIm15UmVxdWlyZXMiLCJub21icmVBcmVhIiwibm9tYnJlVGlwb01hcXVpbmEiLCJub21icmVQbGFudGEiLCJiYXJyaW9QbGFudGEiLCJjb2RpZ29Qb3N0YWxQbGFudGEiLCJjYWxsZVBsYW50YSIsImFsdHVyYUNhbGxlUGxhbnRhIiwibm9tYnJlUHVlc3RvIiwiZmVjaGFGdW5kaWNpb25EZXNkZSIsImZlY2hhRnVuZGljaW9uSGFzdGEiLCJteVJlcXVlcyIsImZlY2hhUHJvZHVjY2lvbkRlc2RlIiwiZmVjaGFQcm9kdWNjaW9uSGFzdGEiLCJmZWNoYUhhc3RhRnVuZGljaW9uIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzND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QUFJVCxLQUFLLENBQUdrQixPQUFTLElBQU1DLFFBQVViLEVBQUVjLGFBRy9DakcsRUFBT0QsUUFBVXFHIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA5KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm1zc3FsXCIpOyIsImNvbnN0IG1zc3FsID0gcmVxdWlyZSgnbXNzcWwnKTtcclxuaWYocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpeyByZXF1aXJlKCdjb2xvcnMnKSB9XHJcblxyXG52YXIgVVJJXHJcblxyXG5pZihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jyl7XHJcbiAgICBVUkkgPSB7XHJcbiAgICAgICAgdXNlcjogJ0RCamF2JywgLyogREJqYXYgZW1zREIgICovXHJcbiAgICAgICAgcGFzc3dvcmQ6ICdiZWxncmFubzQ1NScsXHJcbiAgICAgICAgZGF0YWJhc2U6ICdFTVNfREJfU1FMJyxcclxuICAgICAgICBwb3J0OjE0MzMsXHJcbiAgICAgICAgc2VydmVyOidERVNLVE9QLUcxSTA5N0MnLCAvKiBERVNLVE9QLUcxSTA5N0MgIFBDMjM2MCAqL1xyXG4gICAgICAgIG9wdGlvbnM6e1xyXG4gICAgICAgICAgICBhcHBOYW1lOidlbXMtbm9kZS1hcGknLFxyXG4gICAgICAgICAgICBlbmFibGVBcml0aEFib3J0OnRydWUsXHJcbiAgICAgICAgICAgIGVuY3J5cHQ6ZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgICAgLFxyXG4gICAgICAgIGNvbm5lY3Rpb25UaW1lT3V0OjE1MDAwMCxcclxuICAgICAgICBkcml2ZXI6J3RlZGlvdXMnLFxyXG4gICAgICAgIHN0cmVhbTpmYWxzZSxcclxuICAgICAgICBwb29sOntcclxuICAgICAgICAgICAgbWF4OjIwLFxyXG4gICAgICAgICAgICBtaW46MCxcclxuICAgICAgICAgICAgaWRsZVRpbWVvdXRNaWxsaXM6MzAwMDAsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmVsc2V7XHJcbiAgICBVUkkgPSB7XHJcbiAgICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuVVNFUlNRTCxcclxuICAgICAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuUEFTU1dPUkRTUUwsXHJcbiAgICAgICAgZGF0YWJhc2U6IHByb2Nlc3MuZW52LkRBVEFCQVNFU1FMLFxyXG4gICAgICAgIHNlcnZlcjpwcm9jZXNzLmVudi5TRVJWRVJTUUwsXHJcbiAgICAgICAgb3B0aW9uczp7XHJcbiAgICAgICAgICAgIGVuYWJsZUFyaXRoQWJvcnQ6dHJ1ZSxcclxuICAgICAgICAgICAgZW5jcnlwdDpmYWxzZVxyXG4gICAgICAgIH0sXHJcbiAgICB9XHJcbn1cclxuXHJcbnZhciBDb25leGlvblNRTCA9IHsgYWJyaXJDb25leGlvbjp1bmRlZmluZWQsIGNlcnJhckNvbmV4aW9uOnVuZGVmaW5lZCwgYWJyaXJDb25leGlvblBPT0w6dW5kZWZpbmVkLCBjZXJyYXJDb25leGlvblBPT0w6dW5kZWZpbmVkIH1cclxudmFyIGNvbmV4aW9uXHJcbkNvbmV4aW9uU1FMLmFicmlyQ29uZXhpb24gPSBhc3luYyBmdW5jdGlvbiAoKXtcclxuICAgIGF3YWl0IG1zc3FsLmNvbm5lY3QoVVJJKVxyXG4gICAgLnRoZW4ocG9vbD0+e1xyXG4gICAgICAgIGlmKHBvb2wuX2Nvbm5lY3RlZCl7XHJcbiAgICAgICAgICAgIGlmKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDb25lY2lvbiBTUUwgU0VSVkVSJy5ibHVlLCcgQUJJRVJUQScuZ3JlZW4pXHJcbiAgICAgICAgICAgICAgICBjb25leGlvbiA9IHBvb2xcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgZGUgQ29uZXhpb24nLHBvb2wuX2Nvbm5lY3RlZClcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59XHJcbkNvbmV4aW9uU1FMLmNlcnJhckNvbmV4aW9uID0gYXN5bmMgZnVuY3Rpb24gKCl7XHJcbiAgICBhd2FpdCBjb25leGlvbi5jbG9zZSgpXHJcbiAgICBpZihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jyl7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0NvbmVjaW9uIFNRTCBTRVJWRVInLmJsdWUsJyBDRVJSQURBJy5ncmVlbilcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgY29uZXhpb25lcyA9IHt9XHJcblxyXG5Db25leGlvblNRTC5hYnJpckNvbmV4aW9uUE9PTCA9IGFzeW5jIG5hbWUgPT57XHJcbiAgICBpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmV4aW9uZXMsbmFtZSkpe1xyXG4gICAgICAgIGNvbnN0IG5ld0NvbmV4aW9uID0gbmV3IG1zc3FsLkNvbm5lY3Rpb25Qb29sKFVSSSlcclxuICAgICAgICBjb25zdCBjbG9zZSA9IG5ld0NvbmV4aW9uLmNsb3NlLmJpbmQobmV3Q29uZXhpb24pXHJcbiAgICAgICAgbmV3Q29uZXhpb24uY2xvc2UgPSAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgICAgICBkZWxldGUgY29uZXhpb25lc1tuYW1lXVxyXG4gICAgICAgICAgICByZXR1cm4gY2xvc2UoLi4uYXJncylcclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgbmV3Q29uZXhpb24uY29ubmVjdCgpXHJcbiAgICAgICAgY29uZXhpb25lc1tuYW1lXSA9IG5ld0NvbmV4aW9uXHJcbiAgICAgICAgcmV0dXJuIGNvbmV4aW9uZXNbbmFtZV1cclxuICAgIH1cclxufVxyXG5cclxuQ29uZXhpb25TUUwuY2VycmFyQ29uZXhpb25QT09MID0gKCkgPT57XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LnZhbHVlcyhjb25leGlvbmVzKS5tYXAoKHBvb2wpPT57XHJcbiAgICAgICAgcmV0dXJuIHBvb2wuY2xvc2UoKVxyXG4gICAgfSkpXHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBDb25leGlvblNRTCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImV4cHJlc3NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwianNvbndlYnRva2VuXCIpOyIsIm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgc2VjcmV0OidqYXZpZXIxOTA1J1xyXG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYXN5bmNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibW9uZ29vc2VcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYmNyeXB0LW5vZGVqc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJtb21lbnRcIik7IiwiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxyXG5jb25zdCBjb3JzID0gcmVxdWlyZSgnY29ycycpXHJcbnZhciBtb3JnYW5cclxuXHJcbmlmKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKXtcclxuICAgIHJlcXVpcmUoJ2NvbG9ycycpXHJcbiAgICBtb3JnYW4gPSByZXF1aXJlKCdtb3JnYW4nKVxyXG59XHJcbi8vIGNvbnNvbGUubG9nKHByb2Nlc3MuZW52Lk5PREVfRU5WKVxyXG5cclxuY29uc3Qgc2Vydmlkb3IgPSBleHByZXNzKClcclxuc2Vydmlkb3IudXNlKGNvcnMoKSlcclxuXHJcbi8vIG1pZGRlbHdhcmVcclxuXHJcbnNlcnZpZG9yLnVzZShleHByZXNzLmpzb24oKSlcclxuc2Vydmlkb3IudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7ZXh0ZW5kZWQ6IHRydWV9KSlcclxuc2Vydmlkb3IudXNlKHJlcXVpcmUoJy4vcnV0YXNBcGkvYXV0aEFjY2Vzb3MvYXV0aEFsbFJvdXRlcicpKVxyXG5cclxuXHJcbmlmKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKXtcclxuICAgIHNlcnZpZG9yLnVzZShtb3JnYW4oJ2RldicpKVxyXG59XHJcblxyXG5zZXJ2aWRvci51c2UoJy9hcGkvYXV0aFJvdXRlclJlYWN0L2FkbWluJyxyZXF1aXJlKCcuL3J1dGFzQXBpL2F1dGhBY2Nlc29zUmVhY3QvYXV0aEFkbWluUm91dGVyUmVhY3QnKSlcclxuc2Vydmlkb3IudXNlKCcvYXBpL2F1dGhSb3V0ZXJSZWFjdC9uaXZlbDEnLHJlcXVpcmUoJy4vcnV0YXNBcGkvYXV0aEFjY2Vzb3NSZWFjdC9hdXRoTml2ZWwxUm91dGVyUmVhY3QnKSlcclxuc2Vydmlkb3IudXNlKCcvYXBpL2F1dGhSb3V0ZXJSZWFjdC9uaXZlbDInLHJlcXVpcmUoJy4vcnV0YXNBcGkvYXV0aEFjY2Vzb3NSZWFjdC9hdXRoTml2ZWwyUm91dGVyUmVhY3QnKSlcclxuc2Vydmlkb3IudXNlKCcvYXBpL2F1dGhSb3V0ZXJSZWFjdC9uaXZlbDMnLHJlcXVpcmUoJy4vcnV0YXNBcGkvYXV0aEFjY2Vzb3NSZWFjdC9hdXRoTml2ZWwzUm91dGVyUmVhY3QnKSlcclxuc2Vydmlkb3IudXNlKCcvYXBpL2F1dGhSb3V0ZXJSZWFjdC9uaXZlbDQnLHJlcXVpcmUoJy4vcnV0YXNBcGkvYXV0aEFjY2Vzb3NSZWFjdC9hdXRoTml2ZWw0Um91dGVyUmVhY3QnKSlcclxuc2Vydmlkb3IudXNlKCcvYXBpL2F1dGhSb3V0ZXJSZWFjdC9uaXZlbDUnLHJlcXVpcmUoJy4vcnV0YXNBcGkvYXV0aEFjY2Vzb3NSZWFjdC9hdXRoTml2ZWw1Um91dGVyUmVhY3QnKSlcclxuc2Vydmlkb3IudXNlKCcvYXBpL21hcXVpbmFzJyxyZXF1aXJlKCcuL3J1dGFzQXBpL21hcXVpbmFzJykpXHJcbnNlcnZpZG9yLnVzZSgnL2FwaS91c3VhcmlvcycscmVxdWlyZSgnLi9ydXRhc0FwaS9hdXRoQWNjZXNvcy9hdXRoQWRtaW5Sb3V0ZXInKSxyZXF1aXJlKCcuL3J1dGFzQXBpL3VzdWFyaW9zJykpXHJcbnNlcnZpZG9yLnVzZSgnL2FwaS9sb2d1ZW8nLHJlcXVpcmUoJy4vcnV0YXNBcGkvTG9ndWVvJykpXHJcbnNlcnZpZG9yLnVzZSgnL2FwaS9hdXRlbnRpZmljYXNpb24nLHJlcXVpcmUoJy4vcnV0YXNBcGkvQXV0ZW50aWZpY2FzaW9uJykpXHJcbnNlcnZpZG9yLnVzZSgnL2FwaS9waWV6YXMnLHJlcXVpcmUoJy4vcnV0YXNBcGkvcGllemFzJykpXHJcbnNlcnZpZG9yLnVzZSgnL2FwaS9tb2xkZXMnLHJlcXVpcmUoJy4vcnV0YXNBcGkvbW9sZGVzJykpXHJcbnNlcnZpZG9yLnVzZSgnL2FwaS9kZWZlY3RvcycscmVxdWlyZSgnLi9ydXRhc0FwaS9kZWZlY3RvcycpKVxyXG5zZXJ2aWRvci51c2UoJy9hcGkvb3BlcmFjaW9uZXMnLHJlcXVpcmUoJy4vcnV0YXNBcGkvb3BlcmFjaW9uZXMnKSlcclxuc2Vydmlkb3IudXNlKCcvYXBpL3Byb2Nlc29zJyxyZXF1aXJlKCcuL3J1dGFzQXBpL3Byb2Nlc29zJykpXHJcbnNlcnZpZG9yLnVzZSgnL2FwaS90dXJub3MnLHJlcXVpcmUoJy4vcnV0YXNBcGkvdHVybm9zJykpXHJcbnNlcnZpZG9yLnVzZSgnL2FwaS9wYXJhZGFzTWFxdWluYScscmVxdWlyZSgnLi9ydXRhc0FwaS9wYXJhZGFzTWFxdWluYScpKVxyXG5zZXJ2aWRvci51c2UoJy9hcGkvdHJhYmFqYWRvcmVzJyxyZXF1aXJlKCcuL3J1dGFzQXBpL3RyYWJhamFkb3JlcycpKVxyXG5zZXJ2aWRvci51c2UoJy9hcGkvcGxhbmlsbGFzUHJvZHVjY2lvbicscmVxdWlyZSgnLi9ydXRhc0FwaS9wbGFuaWxsYXNQcm9kdWNjaW9uJykpXHJcbnNlcnZpZG9yLnVzZSgnL2FwaS90aXBvc1Byb2Nlc28nLHJlcXVpcmUoJy4vcnV0YXNBcGkvdGlwb3NQcm9jZXNvJykpXHJcbnNlcnZpZG9yLnVzZSgnL2FwaS9jbGllbnRlcycsIHJlcXVpcmUoICcuL3J1dGFzQXBpL2NsaWVudGVzJyApIClcclxuc2Vydmlkb3IudXNlICgnL2FwaS90aXBvc01hdGVyaWFsJywgcmVxdWlyZSAoICcuL3J1dGFzQXBpL3RpcG9zTWF0ZXJpYWwnICkgKVxyXG5zZXJ2aWRvci51c2UgKCcvYXBpL2FyZWFzJywgcmVxdWlyZSAoICcuL3J1dGFzQXBpL2FyZWFzJyApIClcclxuc2Vydmlkb3IudXNlICggJy9hcGkvdGlwb3NNYXF1aW5hJyAsIHJlcXVpcmUgKCAnLi9ydXRhc0FwaS90aXBvc01hcXVpbmEnICkpXHJcbnNlcnZpZG9yLnVzZSAoICcvYXBpL3BsYW50YXMnICwgcmVxdWlyZSAoICcuL3J1dGFzQXBpL3BsYW50YXMnICkpXHJcbnNlcnZpZG9yLnVzZSAoICcvYXBpL3B1ZXN0b3MnICwgcmVxdWlyZSAoICcuL3J1dGFzQXBpL3B1ZXN0b3MnICkgKVxyXG5zZXJ2aWRvci51c2UgKCAnL2FwaS9vZWUnICwgcmVxdWlyZSAoICcuL3J1dGFzQXBpL29lZScgKSApXHJcbnNlcnZpZG9yLnVzZSAoJy9hcGkvcmVwb3J0ZXMnICwgcmVxdWlyZSAoICcuL3J1dGFzQXBpL3JlcG9ydGVzJyApKVxyXG5cclxuLy9TZXR0aW5nc1xyXG5zZXJ2aWRvci5zZXQoJ3BvcnQnLHByb2Nlc3MuZW52LlBPUlQgfHwgNTAwMClcclxuXHJcbnNlcnZpZG9yLmxpc3RlbihzZXJ2aWRvci5nZXQoJ3BvcnQnKSwobSxlKT0+e1xyXG4gICAgaWYoZSl7Y29uc29sZS5sb2coZSl9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jyl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTZXJ2aWRvciBjb3JyaWVuZG8gZW4gZWwgUFVFUlRPJy55ZWxsb3csc2Vydmlkb3IuZ2V0KCdwb3J0JykpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTZXJ2aWRvciBjb3JyaWVuZG8gZW4gZWwgUFVFUlRPJyxzZXJ2aWRvci5nZXQoJ3BvcnQnKSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yc1wiKTsiLCJjb25zdCBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKVxyXG5jb25zdCB7c2VjcmV0fSA9IHJlcXVpcmUoJy4uLy4uL0NPTkZJRycpXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZXEgLCByZXMgLG5leHQpIHtcclxuICAgIGlmIChyZXEucGF0aCAhPT0gJy9hcGkvbG9ndWVvJykge1xyXG4gICAgICAgIGlmKCAhcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbikge1xyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDQwMykuanNvbih7bWVuc2FqZSA6ICdObyBlbnZpbyBlbCB0b2plbiBlbiBlbCBoZWFkZXJzJ30pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbi5zcGxpdCgnICcpWzFdXHJcbiAgICAgICAgICAgIGp3dC52ZXJpZnkodG9rZW4gLHNlY3JldCAsICggZSAsIGRhdG9zICk9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDMpLmpzb24oe21lbnNhamUgOiBlLm1lc3NhZ2UgLCBvdHJvIDogJ2Vycm9yICBlbiBsYSBjb21tcHJvdmFjaW9uIHRva2VuJ30pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dCgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBuZXh0KClcclxuICAgIH1cclxufSIsImNvbnN0IHtSb3V0ZXJ9ID0gcmVxdWlyZSgnZXhwcmVzcycpXHJcbmNvbnN0IGp3dCA9IHJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpXHJcbmNvbnN0IHtzZWNyZXR9ID0gcmVxdWlyZSgnLi4vLi4vQ09ORklHJylcclxuXHJcbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpXHJcblxyXG5yb3V0ZXIuZ2V0KCcvJywocmVxLHJlcyk9PiB7XHJcblxyXG4gICAgY29uc3QgdG9rZW4gPSByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uLnNwbGl0KCcgJylbMV1cclxuICAgIGp3dC52ZXJpZnkodG9rZW4sc2VjcmV0LChlLGRhdG9zVXNlcik9PiB7XHJcbiAgICAgICAgaWYoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oe21lbnNhamU6IGUubWVzc2FnZX0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZihkYXRvc1VzZXIucGVyZmlsID09PSAnYWRtaW4nKSB7XHJcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7cGVybWlzbyA6IHRydWV9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHttZW5zYWplOiAndXN0ZWQgbm8gZXMgYWRtaW4nfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn0pXHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXIiLCJjb25zdCB7Um91dGVyfSA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxyXG5jb25zdCBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKVxyXG5jb25zdCB7c2VjcmV0fSA9IHJlcXVpcmUoJy4uLy4uL0NPTkZJRycpXHJcblxyXG5jb25zdCByb3V0ZXIgPSBSb3V0ZXIoKVxyXG5cclxucm91dGVyLmdldCgnLycsKHJlcSxyZXMpPT4ge1xyXG5cclxuICAgIGNvbnN0IHRva2VuID0gcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbi5zcGxpdCgnICcpWzFdXHJcbiAgICBqd3QudmVyaWZ5KHRva2VuLHNlY3JldCwoZSxkYXRvc1VzZXIpPT4ge1xyXG4gICAgICAgIGlmKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHttZW5zYWplOiBlLm1lc3NhZ2V9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYoZGF0b3NVc2VyLnBlcmZpbCA9PT0gJ25pdmVsLTEnKSB7XHJcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7cGVybWlzbyA6IHRydWV9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHttZW5zYWplOiAndXN0ZWQgbm8gZXMgbml2ZWwgMSd9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufSlcclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlciIsImNvbnN0IHtSb3V0ZXJ9ID0gcmVxdWlyZSgnZXhwcmVzcycpXHJcbmNvbnN0IGp3dCA9IHJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpXHJcbmNvbnN0IHtzZWNyZXR9ID0gcmVxdWlyZSgnLi4vLi4vQ09ORklHJylcclxuXHJcbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpXHJcblxyXG5yb3V0ZXIuZ2V0KCcvJywocmVxLHJlcyk9PiB7XHJcblxyXG4gICAgY29uc3QgdG9rZW4gPSByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uLnNwbGl0KCcgJylbMV1cclxuICAgIGp3dC52ZXJpZnkodG9rZW4sc2VjcmV0LChlLGRhdG9zVXNlcik9PiB7XHJcbiAgICAgICAgaWYoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oe21lbnNhamU6IGUubWVzc2FnZX0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZihkYXRvc1VzZXIucGVyZmlsID09PSAnbml2ZWwtMicpIHtcclxuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtwZXJtaXNvIDogdHJ1ZX0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oe21lbnNhamU6ICd1c3RlZCBubyBlcyBuaXZlbCAyJ30pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59KVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcm91dGVyIiwiY29uc3Qge1JvdXRlcn0gPSByZXF1aXJlKCdleHByZXNzJylcclxuY29uc3Qgand0ID0gcmVxdWlyZSgnanNvbndlYnRva2VuJylcclxuY29uc3Qge3NlY3JldH0gPSByZXF1aXJlKCcuLi8uLi9DT05GSUcnKVxyXG5cclxuY29uc3Qgcm91dGVyID0gUm91dGVyKClcclxuXHJcbnJvdXRlci5nZXQoJy8nLChyZXEscmVzKT0+IHtcclxuXHJcbiAgICBjb25zdCB0b2tlbiA9IHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24uc3BsaXQoJyAnKVsxXVxyXG4gICAgand0LnZlcmlmeSh0b2tlbixzZWNyZXQsKGUsZGF0b3NVc2VyKT0+IHtcclxuICAgICAgICBpZihlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7bWVuc2FqZTogZS5tZXNzYWdlfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmKGRhdG9zVXNlci5wZXJmaWwgPT09ICduaXZlbC0zJykge1xyXG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe3Blcm1pc28gOiB0cnVlfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7bWVuc2FqZTogJ3VzdGVkIG5vIGVzIG5pdmVsIDMnfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn0pXHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXIiLCJjb25zdCB7Um91dGVyfSA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxyXG5jb25zdCBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKVxyXG5jb25zdCB7c2VjcmV0fSA9IHJlcXVpcmUoJy4uLy4uL0NPTkZJRycpXHJcblxyXG5jb25zdCByb3V0ZXIgPSBSb3V0ZXIoKVxyXG5cclxucm91dGVyLmdldCgnLycsKHJlcSxyZXMpPT4ge1xyXG5cclxuICAgIGNvbnN0IHRva2VuID0gcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbi5zcGxpdCgnICcpWzFdXHJcbiAgICBqd3QudmVyaWZ5KHRva2VuLHNlY3JldCwoZSxkYXRvc1VzZXIpPT4ge1xyXG4gICAgICAgIGlmKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHttZW5zYWplOiBlLm1lc3NhZ2V9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYoZGF0b3NVc2VyLnBlcmZpbCA9PT0gJ25pdmVsLTQnKSB7XHJcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7cGVybWlzbyA6IHRydWV9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHttZW5zYWplOiAndXN0ZWQgbm8gZXMgbml2ZWwgNCd9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufSlcclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlciIsImNvbnN0IHtSb3V0ZXJ9ID0gcmVxdWlyZSgnZXhwcmVzcycpXHJcbmNvbnN0IGp3dCA9IHJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpXHJcbmNvbnN0IHtzZWNyZXR9ID0gcmVxdWlyZSgnLi4vLi4vQ09ORklHJylcclxuXHJcbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpXHJcblxyXG5yb3V0ZXIuZ2V0KCcvJywocmVxLHJlcyk9PiB7XHJcblxyXG4gICAgY29uc3QgdG9rZW4gPSByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uLnNwbGl0KCcgJylbMV1cclxuICAgIGp3dC52ZXJpZnkodG9rZW4sc2VjcmV0LChlLGRhdG9zVXNlcik9PiB7XHJcbiAgICAgICAgaWYoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oe21lbnNhamU6IGUubWVzc2FnZX0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZihkYXRvc1VzZXIucGVyZmlsID09PSAnbml2ZWwtNScpIHtcclxuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtwZXJtaXNvIDogdHJ1ZX0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oe21lbnNhamU6ICd1c3RlZCBubyBlcyBuaXZlbCA1J30pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59KVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcm91dGVyIiwiY29uc3Qge1JvdXRlcn0gPSByZXF1aXJlKCdleHByZXNzJylcclxuXHJcbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpXHJcblxyXG5yb3V0ZXIuZ2V0KCcvJywgYXN5bmMgKHJlcSxyZXMpPT57XHJcbiAgY29uc3Qge2FicmlyQ29uZXhpb24sY2VycmFyQ29uZXhpb259ID0gcmVxdWlyZSgnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInKVxyXG4gIGF3YWl0IGFicmlyQ29uZXhpb24oKVxyXG4gIGNvbnN0IHtSZXF1ZXN0fSA9IHJlcXVpcmUoJ21zc3FsJylcclxuICBjb25zdCBjb25zdWx0YSA9IG5ldyBSZXF1ZXN0KClcclxuICBjb25zdWx0YS5xdWVyeShcclxuICAgIGBzZWxlY3QgbS5pZCBhcyBpZE1hcXVpbmEgLCBtLm5vbWJyZSBhcyBub21icmVNYXF1aW5hICwgbS5kZXNjcmlwY2lvbiBhcyBkZXNjcmlwY2lvbk1hcXVpbmEgLFxyXG4gICAgbS5pZF90aXBvc19tYXF1aW5hIGFzIGlkVGlwb01hcXVpbmEgLCB0bS5ub21icmUgYXMgbm9tYnJlVGlwb01hcXVpbmEgLCBtLmlkX3BsYW50YSBhcyBpZFBsYW50YSAsIHAubm9tYnJlIGFzIG5vbWJyZVBsYW50YVxyXG4gICAgZnJvbSBtYXF1aW5hcyBtXHJcbiAgICBqb2luIHRpcG9zX21hcXVpbmEgdG0gb24gbS5pZF90aXBvc19tYXF1aW5hID0gdG0uaWRcclxuICAgIGpvaW4gcGxhbnRhcyBwIG9uIG0uaWRfcGxhbnRhID0gcC5pZFxyXG4gICAgd2hlcmUgbS5lc3RhZG8gPSAxYCxcclxuICAgIChlcnIsZGF0byk9PntcclxuICAgICAgaWYoIWVycil7cmVzLmpzb24oZGF0by5yZWNvcmRzZXQpOyBjZXJyYXJDb25leGlvbigpIH0gZWxzZSB7IHJlcy5qc29uKHttZW5zYWplOmVyci5tZXNzYWdlfSk7IGNlcnJhckNvbmV4aW9uKCkgfVxyXG4gICAgfVxyXG4gIClcclxufSlcclxucm91dGVyLmdldCgnL3hvcGVyYWNpb24vOmlkT3BlcmFjaW9uJywgYXN5bmMgKHJlcSxyZXMpPT57XHJcbiAgY29uc3Qge2FicmlyQ29uZXhpb24sY2VycmFyQ29uZXhpb259ID0gcmVxdWlyZSgnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInKVxyXG4gIGNvbnN0IHtpZE9wZXJhY2lvbn0gPSByZXEucGFyYW1zXHJcbiAgYXdhaXQgYWJyaXJDb25leGlvbigpXHJcbiAgY29uc3Qge1JlcXVlc3R9ID0gcmVxdWlyZSgnbXNzcWwnKVxyXG4gIGNvbnN0IGNvbnN1bHRhID0gbmV3IFJlcXVlc3QoKVxyXG4gIGNvbnN1bHRhLnF1ZXJ5KFxyXG4gICAgYHNlbGVjdCBtLmlkIGFzIGlkTWFxdWluYSwgbS5ub21icmUgYXMgbm9tYnJlTWFxdWluYVxyXG4gICAgZnJvbSBtYXF1aW5hcyBtXHJcbiAgICBqb2luIHRpcG9zX21hcXVpbmEgdG0gb24gbS5pZF90aXBvc19tYXF1aW5hID0gdG0uaWRcclxuICAgIHdoZXJlIG0uZXN0YWRvID0gMSBhbmQgdG0uaWRfb3BlcmFjaW9uID0gJHtpZE9wZXJhY2lvbn1gLFxyXG4gICAgKGVycixkYXRvKT0+e1xyXG4gICAgICBpZighZXJyKXtyZXMuanNvbihkYXRvLnJlY29yZHNldCk7IGNlcnJhckNvbmV4aW9uKCkgfSBlbHNlIHsgcmVzLmpzb24oe21lbnNhamU6ZXJyLm1lc3NhZ2V9KTsgY2VycmFyQ29uZXhpb24oKSB9XHJcbiAgICB9XHJcbiAgKVxyXG59IClcclxucm91dGVyLnBvc3QgKCAnL2luc2VydCcsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gIGNvbnN0IHsgbm9tYnJlTWFxdWluYSAsIGRlc2NyaXBjaW9uTWFxdWluYSAsIGlkVGlwb01hcXVpbmEgLCBpZFBsYW50YSB9ID0gcmVxLmJvZHlcclxuICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgY29uc3QgeyBSZXF1ZXN0ICwgVmFyQ2hhciAsIEludCB9ID0gcmVxdWlyZSAoICdtc3NxbCcgKVxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ2luc2VydE1hcXVpbmEnIClcclxuICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgbXlSZXF1ZXN0LmlucHV0ICggJ25vbWJyZU1hcXVpbmEnICwgVmFyQ2hhciAsIG5vbWJyZU1hcXVpbmEgKVxyXG4gICAgbXlSZXF1ZXN0LmlucHV0ICggJ2Rlc2NyaXBjaW9uTWFxdWluYScgLCBWYXJDaGFyICwgZGVzY3JpcGNpb25NYXF1aW5hIClcclxuICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZFRpcG9NYXF1aW5hJyAsIEludCAsIGlkVGlwb01hcXVpbmEgKVxyXG4gICAgbXlSZXF1ZXN0LmlucHV0ICggJ2lkUGxhbnRhJyAsIEludCAsIGlkUGxhbnRhIClcclxuICAgIGNvbnN0IHF1ZXJ5ID0gYGluc2VydCBpbnRvIG1hcXVpbmFzICggbm9tYnJlICwgZGVzY3JpcGNpb24gLCBpZF90aXBvc19tYXF1aW5hICwgaWRfcGxhbnRhICwgZXN0YWRvIClcclxuICAgIHZhbHVlc1xyXG4gICAgKCBAbm9tYnJlTWFxdWluYSAsIEBkZXNjcmlwY2lvbk1hcXVpbmEgLCBAaWRUaXBvTWFxdWluYSAsIEBpZFBsYW50YSAsIDEgKWBcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdNYXF1aW5hIEluc2VydGFkYSBjb3JyZWN0YW1lbnRlJyAsIHN0YXR1cyA6IDIwMCB9IClcclxuICAgIH1cclxuICB9XHJcbiAgY2F0Y2ggKCBlICkge1xyXG4gICAgY2VycmFyQ29uZXhpb25QT09MICggKVxyXG4gICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgLCBzdGF0dXMgOiA0MDMgfSApXHJcbiAgfVxyXG59KVxyXG5yb3V0ZXIucHV0ICggJy91cGRhdGUnLCBhc3luYyAoIHJlcSAsIHJlcyApID0+IHtcclxuICBjb25zdCB7IGlkTWFxdWluYSAsIG5vbWJyZU1hcXVpbmEgLCBkZXNjcmlwY2lvbk1hcXVpbmEgLCBpZFRpcG9NYXF1aW5hICwgaWRQbGFudGEgfSA9IHJlcS5ib2R5XHJcbiAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gIGNvbnN0IHsgUmVxdWVzdCAsIFZhckNoYXIgLCBJbnQgfSA9IHJlcXVpcmUgKCAnbXNzcWwnIClcclxuICB0cnkge1xyXG4gICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICd1cGRhdGVNYXF1aW5hJyApXHJcbiAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgUmVxdWVzdCAoIGNvbmV4aW9uIClcclxuICAgIG15UmVxdWVzdC5pbnB1dCAoICdub21icmVNYXF1aW5hJyAsIFZhckNoYXIgLCBub21icmVNYXF1aW5hIClcclxuICAgIG15UmVxdWVzdC5pbnB1dCAoICdkZXNjcmlwY2lvbk1hcXVpbmEnICwgVmFyQ2hhciAsIGRlc2NyaXBjaW9uTWFxdWluYSApXHJcbiAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRUaXBvTWFxdWluYScgLCBJbnQgLCBpZFRpcG9NYXF1aW5hIClcclxuICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZFBsYW50YScgLCBJbnQgLCBpZFBsYW50YSApXHJcbiAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRNYXF1aW5hJyAsIEludCAsIGlkTWFxdWluYSApXHJcbiAgICBjb25zdCBxdWVyeSA9IGB1cGRhdGUgbWFxdWluYXNcclxuICAgIHNldFxyXG4gICAgbm9tYnJlID0gQG5vbWJyZU1hcXVpbmEgLFxyXG4gICAgZGVzY3JpcGNpb24gPSBAZGVzY3JpcGNpb25NYXF1aW5hICxcclxuICAgIGlkX3RpcG9zX21hcXVpbmEgPSBAaWRUaXBvTWFxdWluYSAsXHJcbiAgICBpZF9wbGFudGEgPSBAaWRQbGFudGFcclxuICAgIHdoZXJlIGlkID0gQGlkTWFxdWluYWBcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdNYXF1aW5hIGFjdHVhbGl6YWRhIGNvcnJlY3RhbWVudGUnICwgc3RhdHVzIDogMjAwIH0gKVxyXG4gICAgfVxyXG4gIH1cclxuICBjYXRjaCAoIGUgKSB7XHJcbiAgICBjZXJyYXJDb25leGlvblBPT0wgKCApXHJcbiAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICB9XHJcbn0gKVxyXG5yb3V0ZXIucHV0ICggJy9kZWxldGUnLCBhc3luYyAoIHJlcSAsIHJlcyApID0+IHtcclxuICBjb25zdCB7IGlkTWFxdWluYSB9ID0gcmVxLmJvZHlcclxuICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgY29uc3QgeyBSZXF1ZXN0ICwgSW50IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAnZGVsZXRlTWFxdWluYScgKVxyXG4gICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRNYXF1aW5hJyAsIEludCAsIGlkTWFxdWluYSApXHJcbiAgICBjb25zdCBxdWVyeSA9IGB1cGRhdGUgbWFxdWluYXNcclxuICAgIHNldFxyXG4gICAgZXN0YWRvID0gMFxyXG4gICAgd2hlcmUgaWQgPSBAaWRNYXF1aW5hYFxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgaWYgKCByZXN1bHQgKSB7XHJcbiAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogJ01hcXVpbmEgZWxpbWluYWRhIGNvcnJlY3RhbWVudGUnICwgc3RhdHVzIDogMjAwIH0gKVxyXG4gICAgfVxyXG4gIH1cclxuICBjYXRjaCAoIGUgKSB7XHJcbiAgICBjZXJyYXJDb25leGlvblBPT0wgKCApXHJcbiAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICB9XHJcbn0pXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlciIsImNvbnN0IGp3dCA9IHJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpXHJcbmNvbnN0IHtzZWNyZXR9ID0gcmVxdWlyZSAoJy4uLy4uL0NPTkZJRycpXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9ICggcmVxICwgcmVzICxuZXh0KSA9PiB7XHJcbiAgICBjb25zdCB0b2tlbiA9IHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24uc3BsaXQoJyAnKVsxXVxyXG4gICAgand0LnZlcmlmeSh0b2tlbiwgc2VjcmV0ICwgKGUgLCBkYXRvc1VzZXIpID0+IHtcclxuICAgICAgICBpZihlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7bWVuc2FqZSA6IGUubWVzc2FnZX0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZihkYXRvc1VzZXIucGVyZmlsICE9PSAnQWRtaW4nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oe21lbnNhamUgOiAnQWNjZXNvIGRlbmVnYWRvIHBvciBubyBzZXIgYWRtaW4nfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn0iLCJjb25zdCB7Um91dGVyfSA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxyXG5jb25zdCBiY3J5cCA9IHJlcXVpcmUoJ2JjcnlwdC1ub2RlanMnKVxyXG5yZXF1aXJlKCcuLi9jb25leGlvbmVzL21vbmdvRGInKVxyXG5jb25zdCBVc3VhcmlvID0gcmVxdWlyZSgnLi4vZXNxdWVtYXNNb25nby9lc3F1ZW1hVXN1YXJpb3MnKVxyXG5jb25zdCBQZXJmaWwgPSByZXF1aXJlKCcuLi9lc3F1ZW1hc01vbmdvL2VzcXVlbWFSb2xlc1VzdWFyaW9zJylcclxuXHJcbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpO1xyXG5cclxuLy8gcm91dGVyLmdldCgnLycsYXN5bmMgKHJlcSxyZXMpPT57XHJcbi8vICAgICBhd2FpdCBVc3VhcmlvLmZpbmQoKGUsZGF0byk9PntcclxuLy8gICAgICAgICBlID8gcmVzLnN0YXR1cyg0MDMpLnNlbmQoJ0Vycm9yIGVuIGVsIHJlcXVlc3QnKSA6XHJcbi8vICAgICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQoZGF0bylcclxuLy8gICAgIH0pXHJcbi8vIH0pXHJcbi8vICEgbGlzdGFkbyBkZSB1c3Vhcmlvc1xyXG5yb3V0ZXIuZ2V0KCcvJyxhc3luYyAocmVxLHJlcyk9PntcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0x9ID0gcmVxdWlyZSAoJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJylcclxuICAgIHRyeXtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MKCAnbGlhc3RhVXN1YXJpbycpXHJcbiAgICAgICAgY29uc3QgbXNzcWwgPSByZXF1aXJlKCdtc3NxbCcpXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IG1zc3FsLlJlcXVlc3QoY29uZXhpb24pXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LmV4ZWN1dGUoJ3BhX2xpc3RhVXN1YXJpb3MnKVxyXG4gICAgICAgIGlmKHJlc3VsdCl7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCgpXHJcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3VsdC5yZWNvcmRzZXQpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCgpXHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHtzdGF0dXM6IDQwMyxtZW5zYWplOmUubWVzc2FnZX0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2goZSl7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MKClcclxuICAgICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7c3RhdHVzOiA0MDMsbWVuc2FqZTplLm1lc3NhZ2V9KVxyXG4gICAgfVxyXG59KVxyXG5cclxuLy8gcm91dGVyLmdldCgnL3BlcmZpbGVzJyxhc3luYyAocmVxLHJlcyk9PntcclxuLy8gICAgIHRyeXtcclxuLy8gICAgICAgICBjb25zdCBsaXN0YVBlcmZpbGVzID0gYXdhaXQgUGVyZmlsLmZpbmQoKVxyXG4vLyAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKGxpc3RhUGVyZmlsZXMpXHJcbi8vICAgICB9XHJcbi8vICAgICBjYXRjaChlKXtcclxuLy8gICAgICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7bWVuc2FqZTplLm1lc3NhZ2V9KVxyXG4vLyAgICAgfVxyXG4vLyB9KVxyXG4vLyEgbGlzdGEgZGUgcGVyZmlsZXNcclxucm91dGVyLmdldCgnL3BlcmZpbGVzJyxhc3luYyAocmVxLHJlcyk9PntcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0x9ID0gcmVxdWlyZSAoJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJylcclxuICAgIHRyeXtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MKCAnbGlzdGFQZXJmaWxlcycpXHJcbiAgICAgICAgY29uc3QgbXNzcWwgPSByZXF1aXJlKCdtc3NxbCcpXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IG1zc3FsLlJlcXVlc3QoY29uZXhpb24pXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LmV4ZWN1dGUoJ3BhX2xpc3RhUGVyZmlsZXMnKVxyXG4gICAgICAgIGlmKHJlc3VsdCl7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCgpXHJcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3VsdC5yZWNvcmRzZXQpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCgpXHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHtzdGF0dXM6IDQwMyxtZW5zYWplOmUubWVzc2FnZX0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2goZSl7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MKClcclxuICAgICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7c3RhdHVzOiA0MDMsbWVuc2FqZTplLm1lc3NhZ2V9KVxyXG4gICAgfVxyXG59KVxyXG4vLyEgaW5zZXIgcGVyZmlsZXMgTU9OR09cclxuLy8gcm91dGVyLnBvc3QoJy9wZXJmaWxlcycsYXN5bmMgKHJlcSxyZXMpPT57XHJcbi8vICAgICB0cnl7XHJcbi8vICAgICAgICAgY29uc3Qge3BlcmZpbH0gPSByZXEuYm9keVxyXG4vLyAgICAgICAgIGNvbnN0IG5ld1BlcmZpbCA9IG5ldyBQZXJmaWwoe3BlcmZpbH0pXHJcbi8vICAgICAgICAgYXdhaXQgbmV3UGVyZmlsLnNhdmUoKVxyXG4vLyAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHttZW5zYWplOidHdWFyZGFkbyBFeGl0b3NhbWVudGUgISd9KVxyXG4vLyAgICAgfVxyXG4vLyAgICAgY2F0Y2goZSl7XHJcbi8vICAgICAgICAgcmVzLnN0YXR1cyg0MDMpLmpzb24oe21lbnNhamU6ZS5tZXNzYWdlfSlcclxuLy8gICAgIH1cclxuLy8gfSlcclxuXHJcbi8vIHJvdXRlci5nZXQoJy86aWQnLGFzeW5jIChyZXEscmVzKT0+e1xyXG4vLyAgICAgdHJ5e1xyXG4vLyAgICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc3VhcmlvLmZpbmRCeUlkICggeyBfaWQ6cmVxLnBhcmFtcy5pZCB9IClcclxuLy8gICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih1c2VyKVxyXG4vLyAgICAgfVxyXG4vLyAgICAgY2F0Y2goZSl7XHJcbi8vICAgICAgICAgcmVzLnN0YXR1cyg0MDMpLmpzb24oe21lbnNhamU6ZS5tZXNzYWdlfSlcclxuLy8gICAgIH1cclxuLy8gfSlcclxuLy8hIGNvbnN1bHRhIHVzdWFyaW8gcG9yIGlkXHJcbnJvdXRlci5nZXQoJy86aWQnLGFzeW5jIChyZXEscmVzKT0+e1xyXG4gICAgY29uc3QgaWQgPSByZXEucGFyYW1zLmlkXHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MfSA9IHJlcXVpcmUgKCcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicpXHJcbiAgICB0cnl7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCggJ2dldFVzZXhJZCcpXHJcbiAgICAgICAgY29uc3QgbXNzcWwgPSByZXF1aXJlKCdtc3NxbCcpXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IG1zc3FsLlJlcXVlc3QoY29uZXhpb24pXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCdpZFVzdWFyaW8nICwgbXNzcWwuSW50ICwgaWQpXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgc2VsZWN0XHJcbiAgICAgICAgdS5pZCBhcyBpZFVzdWFyaW8gLFxyXG4gICAgICAgIHUudXNlck5hbWUgYXMgdXNlck5hbWUgLFxyXG4gICAgICAgIHUuZW1haWwgYXMgZW1haWwgLFxyXG4gICAgICAgIHUubm9tYnJlIGFzIG5vbWJyZVVzdWFyaW8gLFxyXG4gICAgICAgIHUuYXBlbGxpZG8gYXMgYXBlbGxpZG9Vc3VhcmlvICxcclxuICAgICAgICBwLmlkIGFzIGlkUGVyZmlsICxcclxuICAgICAgICBwLm5vbWJyZSBhcyBub21icmVQZXJmaWxcclxuICAgICAgICBmcm9tIHVzdWFyaW9zIHVcclxuICAgICAgICBqb2luIHBlcmZpbGVzIHAgb24gcC5pZCA9IHUuaWRfcGVyZmlsXHJcbiAgICAgICAgd2hlcmUgdS5pZCA9IEBpZFVzdWFyaW9gXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5KHF1ZXJ5KVxyXG4gICAgICAgIGlmKHJlc3VsdCl7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCgpXHJcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3VsdC5yZWNvcmRzZXQpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCgpXHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHtzdGF0dXM6IDQwMyxtZW5zYWplOmUubWVzc2FnZX0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2goZSl7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MKClcclxuICAgICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7c3RhdHVzOiA0MDMsbWVuc2FqZTplLm1lc3NhZ2V9KVxyXG4gICAgfVxyXG59KVxyXG5cclxuLy8hZ3VhcmRhIHVzdWFyaW9cclxucm91dGVyLnBvc3QoJy8nLGFzeW5jIChyZXEscmVzKT0+e1xyXG4gICAgY29uc3Qge2FicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MfSA9IHJlcXVpcmUoJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJylcclxuICAgIGNvbnN0ICB7dXNlck5hbWUscGFzc3dvcmQsZW1haWwsbm9tYnJlLGFwZWxsaWRvLGlkUGVyZmlsfSA9IHJlcS5ib2R5XHJcbiAgICB0cnl7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCgnc2F2ZVVzZXInKVxyXG4gICAgICAgIGNvbnN0IG1zc3FsID0gcmVxdWlyZSAoJ21zc3FsJylcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgbXNzcWwuUmVxdWVzdChjb25leGlvbilcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoJ3VzZXJOYW1lJyAsIG1zc3FsLlZhckNoYXIgLCB1c2VyTmFtZSlcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoJ3Bhc3N3b3JkJyAsIG1zc3FsLlZhckNoYXIgLCBiY3J5cC5oYXNoU3luYyhwYXNzd29yZCkpXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCdlbWFpbCcgLCBtc3NxbC5WYXJDaGFyICwgZW1haWwpXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCdub21icmUnICwgbXNzcWwuVmFyQ2hhciAsIG5vbWJyZSlcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoJ2FwZWxsaWRvJyAsIG1zc3FsLlZhckNoYXIgLCBhcGVsbGlkbylcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoJ2lkUGVyZmlsJyAsIG1zc3FsLkludCAsIGlkUGVyZmlsKVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5leGVjdXRlKCdwYV9pbnNlcnRVc3VhcmlvcycpXHJcbiAgICAgICAgaWYocmVzdWx0KXtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MKClcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KVxyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IG1lbnNhamU6ICd1c3VhcmlvIGluc2VydGFkbyBjb3JyZWN0YW1lbnRlICEnIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2goZXJyKXtcclxuICAgICAgICBjZXJyYXJDb25leGlvblBPT0woKVxyXG4gICAgICAgIHJlcy5zdGF0dXMoNDAzKS5qc29uKHtlcnJvcjplcnIubWVzc2FnZX0pXHJcbiAgICB9XHJcbn0pXHJcbi8vIHJvdXRlci5wb3N0KCcvJyxhc3luYyAocmVxLHJlcyk9PntcclxuLy8gICAgIGNvbnN0IHthYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTH0gPSByZXF1aXJlKCcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicpXHJcbi8vICAgICBjb25zdCAge3VzZXJOYW1lLHBhc3N3b3JkLGVtYWlsLG5vbWJyZSxhcGVsbGlkbyxpZFBlcmZpbH0gPSByZXEuYm9keVxyXG4vLyAgICAgdHJ5e1xyXG4vLyAgICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0woJ3NhdmVVc2VyJylcclxuLy8gICAgICAgICBwYXNzd29yZCA9IGJjcnlwLmhhc2hTeW5jKHBhc3N3b3JkKVxyXG4gICAgICAgIFxyXG4vLyAgICAgICAgIGNvbnN0IG5ld1VzZXI9IG5ldyBVc3VhcmlvKHt1c2VyTmFtZSxwYXNzd29yZCxlbWFpbCxub21icmUsYXBlbGxpZG8scGVyZmlsfSlcclxuLy8gICAgICAgICBjb25zdCBkYXRvID0gYXdhaXQgbmV3VXNlci5zYXZlKClcclxuLy8gICAgICAgICBpZihkYXRvKXsgcmVzLnN0YXR1cygyMDApLmpzb24oe21lbnNhamU6J1VzdWFyaW8gZ3VhcmRhZG8gZXhpdG9zYW1lbnRlICEnfSkgfVxyXG4vLyAgICAgfVxyXG4vLyAgICAgY2F0Y2goZXJyKXtcclxuLy8gICAgICAgICByZXMuc3RhdHVzKDQwMykuanNvbih7ZXJyb3I6ZXJyLm1lc3NhZ2V9KVxyXG4vLyAgICAgfVxyXG4vLyB9KVxyXG5cclxuLy8gcm91dGVyLnB1dCgnLzppZCcsKHJlcSxyZXMpPT57XHJcbi8vICAgICBjb25zdCB7aWR9ID0gcmVxLnBhcmFtc1xyXG4vLyAgICAgY29uc3QgYm9keSA9IHJlcS5ib2R5XHJcbi8vICAgICBpZihib2R5LnBhc3N3b3JkKXtib2R5LnBhc3N3b3JkID0gYmNyeXAuaGFzaFN5bmMoYm9keS5wYXNzd29yZCkgfVxyXG4vLyAgICAgVXN1YXJpby5maW5kQnlJZEFuZFVwZGF0ZSh7X2lkOmlkfSxib2R5LChlLGQpPT57XHJcbi8vICAgICAgICAgZT8gcmVzLnN0YXR1cyg0MDMpLmpzb24oe2Vycm9yOmUubWVzc2FnZX0pIDpcclxuLy8gICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7bWVuc2FqZTonTW9kaWZpY2FkbyBjb3JyZWN0YW1lbnRlICEnfSlcclxuLy8gICAgIH0pXHJcbi8vIH0pXHJcbnJvdXRlci5wdXQoJy8nLCBhc3luYyAocmVxLHJlcyk9PntcclxuICAgIGNvbnN0IHthYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTH0gPSByZXF1aXJlKCcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicpXHJcbiAgICBjb25zdCAge3VzZXJOYW1lLHBhc3N3b3JkLGVtYWlsLG5vbWJyZSxhcGVsbGlkbyxpZFBlcmZpbCAsIGlkVXN1YXJpb30gPSByZXEuYm9keVxyXG4gICAgdHJ5e1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0woJ3VwZGF0ZVVzZXInKVxyXG4gICAgICAgIGNvbnN0IG1zc3FsID0gcmVxdWlyZSAoJ21zc3FsJylcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgbXNzcWwuUmVxdWVzdChjb25leGlvbilcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoJ3VzZXJOYW1lJyAsIG1zc3FsLlZhckNoYXIgLCB1c2VyTmFtZSlcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoJ3Bhc3N3b3JkJyAsIG1zc3FsLlZhckNoYXIgLCBiY3J5cC5oYXNoU3luYyhwYXNzd29yZCkpXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCdlbWFpbCcgLCBtc3NxbC5WYXJDaGFyICwgZW1haWwpXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCdub21icmUnICwgbXNzcWwuVmFyQ2hhciAsIG5vbWJyZSlcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoJ2FwZWxsaWRvJyAsIG1zc3FsLlZhckNoYXIgLCBhcGVsbGlkbylcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoJ2lkUGVyZmlsJyAsIG1zc3FsLkludCAsIGlkUGVyZmlsKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCgnaWRVc3VhcmlvJyAsIG1zc3FsLkludCAsIGlkVXN1YXJpbylcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QuZXhlY3V0ZSgncGFfdXBkYXRlVXN1YXJpb3MnKVxyXG4gICAgICAgIGlmKHJlc3VsdCl7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCgpXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdClcclxuICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oeyBtZW5zYWplOiAndXN1YXJpbyBpbnNlcnRhZG8gY29ycmVjdGFtZW50ZSAhJyB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoKGUpe1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCgpXHJcbiAgICAgICAgcmVzLnN0YXR1cyg0MDMpLmpzb24oe2Vycm9yOmVyci5tZXNzYWdlfSlcclxuICAgIH1cclxufSlcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcm91dGVyOyIsImNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKVxyXG5pZihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jyl7XHJcbnJlcXVpcmUoJ2NvbG9ycycpXHJcbn1cclxuXHJcbnZhciBVUkk7XHJcbmlmKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKXtcclxuICAgICBVUkkgPSAnbW9uZ29kYjovL2xvY2FsaG9zdDo1MDAwOjI3MDE3L3VzdWFyaW9zRU1TJ1xyXG59XHJcbmVsc2V7XHJcbiAgICAgVVJJID0gcHJvY2Vzcy5lbnYuTU9OR09EQl9VUkkgICAgIFxyXG59XHJcblxyXG5tb25nb29zZS5jb25uZWN0KFVSSSx7dXNlTmV3VXJsUGFyc2VyOnRydWUsdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlfSk7XHJcblxyXG52YXIgY29uZXhpb24gPSBtb25nb29zZS5jb25uZWN0aW9uO1xyXG5cclxuY29uZXhpb24ub24oJ2Vycm9yJyxjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSwnZXJyb3IgZGUgY29uZXhpb24nKSk7XHJcblxyXG5jb25leGlvbi5vbmNlKCdvcGVuJywoKT0+e1xyXG4gICAgIGlmKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKXtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdDb25lY3RhZG8gYSBNT05HT0RCJy5yZWQpXHJcbiAgICAgfSBcclxuICAgICBlbHNle1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ0NvbmVjdGFkbyBhIE1PTkdPREInKVxyXG4gICAgIH1cclxufSlcclxuIiwiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpXHJcblxyXG5jb25zdCB1c3VhcmlvID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XHJcblxyXG4gICAgdXNlck5hbWU6IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgcmVxdWlyZWQ6dHJ1ZSxcclxuICAgICAgICB1bmlxdWU6dHJ1ZVxyXG4gICAgfSxcclxuICAgIHBhc3N3b3JkOntcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgcmVxdWlyZWQ6dHJ1ZVxyXG4gICAgfSxcclxuICAgIGVtYWlsOntcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgcmVxdWlyZWQ6dHJ1ZSxcclxuICAgICAgICB1bmlxdWU6dHJ1ZVxyXG4gICAgfSxcclxuICAgIG5vbWJyZTp7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOnRydWVcclxuICAgIH0sXHJcbiAgICBhcGVsbGlkbzp7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOnRydWVcclxuICAgIH0sXHJcbiAgICBwZXJmaWw6e1xyXG4gICAgICAgIHR5cGU6U3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOnRydWUsXHJcbiAgICAgICAgZW51bTpbJ0FkbWluJywnbml2ZWwtMScsJ25pdmVsLTInLCduaXZlbC0zJywnbml2ZWwtNCcsJ25pdmVsLTUnXVxyXG4gICAgfVxyXG59KVxyXG5tb25nb29zZS5zZXQoJ3VzZUNyZWF0ZUluZGV4JywgdHJ1ZSlcclxubW9uZ29vc2Uuc2V0KCd1c2VGaW5kQW5kTW9kaWZ5JywgZmFsc2UpXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IG1vbmdvb3NlLm1vZGVsKCd1c3VhcmlvJyx1c3VhcmlvKSIsImNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKVxyXG5cclxuY29uc3QgcGVyZmlsID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XHJcbiAgICBwZXJmaWw6e1xyXG4gICAgICAgIHR5cGU6U3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmU6dHJ1ZSxcclxuICAgICAgICB1bmlxdWU6dHJ1ZSxcclxuICAgICAgICBlbnVtOlsnQWRtaW4nLCduaXZlbC0xJywnbml2ZWwtMicsJ25pdmVsLTMnLCduaXZlbC00Jywnbml2ZWwtNSddXHJcbiAgICB9XHJcbn0pXHJcblxyXG5tb25nb29zZS5zZXQoJ3VzZUNyZWF0ZUluZGV4JywgdHJ1ZSlcclxubW9uZ29vc2Uuc2V0KCd1c2VGaW5kQW5kTW9kaWZ5JywgZmFsc2UpXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IG1vbmdvb3NlLm1vZGVsKCdwZXJmaWwnLHBlcmZpbCkiLCJjb25zdCB7Um91dGVyfSA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxyXG5jb25zdCBiY3J5cHQgPXJlcXVpcmUoJ2JjcnlwdC1ub2RlanMnKVxyXG4vLyBjb25zdCBVc3VhcmlvID0gcmVxdWlyZSgnLi4vZXNxdWVtYXNNb25nby9lc3F1ZW1hVXN1YXJpb3MnKVxyXG5jb25zdCB7c2VjcmV0fSA9IHJlcXVpcmUoJy4uL0NPTkZJRycpXHJcbmNvbnN0IGp3dCA9IHJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpXHJcbi8vIGNvbnN0IENPTkZJRyA9IHJlcXVpcmUoJy4uL0NPTkZJRycpXHJcblxyXG5jb25zdCByb3V0ZXIgPSBSb3V0ZXIoKTtcclxuXHJcbnJvdXRlci5wb3N0KCcvJyxhc3luYyAocmVxLHJlcyxuZXh0KT0+e1xyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTH0gPSByZXF1aXJlKCcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicpXHJcbiAgICBjb25zdCB7dXNlck5hbWUgLCBwYXNzd29yZCB9ID0gcmVxLmJvZHlcclxuICAgIHRyeXtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MKCdjb25zdWx0YVVzdWFyaW8nKVxyXG4gICAgICAgIGNvbnN0IHtSZXF1ZXN0ICwgVmFyQ2hhcn0gPSByZXF1aXJlKCdtc3NxbCcpXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QoY29uZXhpb24pXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCd1c2VyTmFtZScgLCBWYXJDaGFyICwgdXNlck5hbWUpXHJcbiAgICAgICAgY29uc3QgdXN1YXJpbyA9IGF3YWl0IG15UmVxdWVzdC5leGVjdXRlKCdwYV9nZXRVc3VhcmlvWG5vbWJyZVVzdWFyaW8nKVxyXG4gICAgICAgIGlmKHVzdWFyaW8ucmVjb3Jkc2V0LnVzZXJOYW1lKXtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MKClcclxuICAgICAgICAgICAgaWYoICFiY3J5cHQuY29tcGFyZVN5bmMocGFzc3dvcmQgLCB1c3VhcmlvLnJlY29yZHNldC5wYXNzd29yZCApKSB7XHJcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDQwMykuanNvbih7bWVuc2FqZTonUGFzc3dvcmQgSW5jb3JyZWN0YSd9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWlVc3VhcmlvID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJOYW1lOnVzdWFyaW8ucmVjb3Jkc2V0LnVzZXJOYW1lICxcclxuICAgICAgICAgICAgICAgICAgICBlbWFpbDp1c3VhcmlvLnJlY29yZHNldC5lbWFpbCAsXHJcbiAgICAgICAgICAgICAgICAgICAgbm9tYnJlOnVzdWFyaW8ucmVjb3Jkc2V0Lm5vbWJyZVVzdWFyaW8gLFxyXG4gICAgICAgICAgICAgICAgICAgIGFwZWxsaWRvOnVzdWFyaW8ucmVjb3Jkc2V0LmFwZWxsaWRvVXN1YXJpbyAsXHJcbiAgICAgICAgICAgICAgICAgICAgcGVyZmlsOnVzdWFyaW8ucmVjb3Jkc2V0Lm5vbWJyZVBlcmZpbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgand0LnNpZ24obWlVc3VhcmlvICwgc2VjcmV0LCB7ZXhwaXJlc0luOjE0NDAwfSAsICAoZSAsIHRva2VuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHsgcmVzLnN0YXR1cyg0MDQpLmpzb24oe21lbnNhamU6J0Vycm9yIGFsIGdlbmVyYXIgZWwgdG9rZW4nfSkgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNleyAgcmVzLmpzb24gKHt0b2tlbn0pIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MKClcclxuICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDMpLmpzb24oe21lbnNhamU6J1VzdWFyaW8gSW5leGlzdGVudGUgISd9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoKGUpe1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCgpXHJcbiAgICAgICAgcmVzLnN0YXR1cyg0MDQpLmpzb24oe2V9KTtcclxuICAgIH1cclxufSlcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcm91dGVyIiwiY29uc3QgUm91dGVyID0gcmVxdWlyZSgnZXhwcmVzcycpXHJcbmNvbnN0IGp3dCA9IHJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpXHJcbmNvbnN0IENPTkZJRyA9IHJlcXVpcmUoJy4uL0NPTkZJRycpXHJcblxyXG5jb25zdCByb3V0ZXI9Um91dGVyKCk7XHJcblxyXG5yb3V0ZXIuZ2V0KCcvJywocmVxLHJlcyk9PntcclxuXHJcbiAgICBpZighcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbil7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg0MDMpLmpzb24oe21lbnNhamU6J05vIGVudmlvIGVsIFRva2VuIGVuIGVsIGhlYWRlcnMnfSlcclxuICAgIH1lbHNle1xyXG4gICAgICAgIGNvbnN0IHRva2VuID0gcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbi5zcGxpdCgnICcpWzFdO1xyXG4gICAgICAgIGp3dC52ZXJpZnkodG9rZW4sQ09ORklHLnNlY3JldCwoZSxkKT0+e1xyXG4gICAgICAgICAgICBpZihlKXtcclxuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoNDAzKS5qc29uKHttZW5zYWplOmUubmFtZX0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKGQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59KVxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcjsiLCJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpXHJcbmNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKClcclxuXHJcbnJvdXRlci5nZXQoJy8nLGFzeW5jIChyZXEscmVzKT0+e1xyXG4gICAgY29uc3Qge2FicmlyQ29uZXhpb24sY2VycmFyQ29uZXhpb259ID0gcmVxdWlyZSgnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInKVxyXG4gICAgYXdhaXQgYWJyaXJDb25leGlvbigpXHJcbiAgICBjb25zdCB7UmVxdWVzdH0gPSBuZXcgcmVxdWlyZSgnbXNzcWwnKVxyXG4gICAgY29uc3QgY29uc3VsdGEgPSBuZXcgUmVxdWVzdCgpXHJcbiAgICBjb25zdWx0YS5xdWVyeShcclxuICAgICAgICBgc2VsZWN0IHAuaWQgYXMgaWRQaWV6YSwgcC5ub21icmUgYXMgbm9tYnJlUGllemEgLCBwLmlkX2NsaWVudGUgYXMgaWRDbGllbnRlICwgYy5ub21icmUgYXMgbm9tYnJlQ2xpZW50ZSAsXHJcbiAgICAgICAgcC5pZF90aXBvc19tYXRlcmlhbCBhcyBpZFRpcG9NYXRlcmlhbCAsIHRtLm5vbWJyZSBhcyBub21icmVUaXBvTWF0ZXJpYWxcclxuICAgICAgICBmcm9tIHBpZXphcyBwXHJcbiAgICAgICAgam9pbiBjbGllbnRlcyBjIG9uIHAuaWRfY2xpZW50ZSA9IGMuaWRcclxuICAgICAgICBqb2luIHRpcG9zX21hdGVyaWFsIHRtIG9uIHAuaWRfdGlwb3NfbWF0ZXJpYWwgPSB0bS5pZFxyXG4gICAgICAgIHdoZXJlIHAuZXN0YWRvID0gMWAsXHJcbiAgICAgICAgKGVycixkYXRvKT0+e1xyXG4gICAgICAgICAgICBpZighZXJyKXtyZXMuanNvbihkYXRvLnJlY29yZHNldCk7IGNlcnJhckNvbmV4aW9uKCkgfSBlbHNlIHsgcmVzLmpzb24oe21lbnNhamU6ZXJyLm1lc3NhZ2V9KTsgY2VycmFyQ29uZXhpb24oKSB9XHJcbiAgICAgICAgfVxyXG4gICAgKVxyXG59KVxyXG5yb3V0ZXIuZ2V0KCcveG1hcXVpbmEvOmlkTWFxdWluYScsIGFzeW5jIChyZXEscmVzKT0+eyAvLyAhIExJU1RBRE8gREUgUElFWkFTIFNFR1VOIE1BUVVJTkFcclxuICAgIGNvbnN0IHthYnJpckNvbmV4aW9uLGNlcnJhckNvbmV4aW9ufSA9IHJlcXVpcmUoJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJylcclxuICAgIGF3YWl0IGFicmlyQ29uZXhpb24oKVxyXG4gICAgY29uc3Qge2lkTWFxdWluYX0gPSByZXEucGFyYW1zXHJcbiAgICB2YXIge1JlcXVlc3R9ID0gcmVxdWlyZSgnbXNzcWwnKVxyXG4gICAgdmFyIGNvbnN1bHRhID0gbmV3IFJlcXVlc3QoKVxyXG4gICAgY29uc3VsdGEucXVlcnkoXHJcbiAgICAgICAgYHNlbGVjdCBwLmlkIGFzIGlkUGllemEsIHAubm9tYnJlIGFzIG5vbWJyZVBpZXphXHJcbiAgICAgICAgZnJvbSBwaWV6YXMgcFxyXG4gICAgICAgIGpvaW4gcHJvY2Vzb3MgcHJvXHJcbiAgICAgICAgb24gcHJvLmlkX3BpZXphID0gcC5pZFxyXG4gICAgICAgIHdoZXJlIHAuZXN0YWRvID0gMSBhbmQgcHJvLmlkX21hcXVpbmEgPSAke2lkTWFxdWluYX1gLFxyXG4gICAgICAgIChlcnIsZGF0byk9PntcclxuICAgICAgICAgICAgaWYoIWVycil7cmVzLmpzb24oZGF0by5yZWNvcmRzZXQpOyBjZXJyYXJDb25leGlvbigpIH0gZWxzZSB7IHJlcy5qc29uKHttZW5zYWplOmVyci5tZXNzYWdlfSk7IGNlcnJhckNvbmV4aW9uKCkgfSBcclxuICAgICAgICB9XHJcbiAgICApXHJcbn0pXHJcbnJvdXRlci5wb3N0ICggJy9pbnNlcnQnICwgYXN5bmMgKCByZXEsIHJlcykgPT4ge1xyXG4gICAgY29uc3QgeyBub21icmVQaWV6YSAsIGlkQ2xpZW50ZSAsIGlkVGlwb01hdGVyaWFsIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ2luc2VydFBpZXphJyApXHJcbiAgICAgICAgY29uc3QgeyBSZXF1ZXN0ICwgSW50ICwgVmFyQ2hhciB9ID0gcmVxdWlyZSAoICdtc3NxbCcgKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdub21icmVQaWV6YScgLCBWYXJDaGFyICwgbm9tYnJlUGllemEgKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZENsaWVudGUnICwgSW50ICwgaWRDbGllbnRlIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRUaXBvTWF0ZXJpYWwnICwgSW50ICwgaWRUaXBvTWF0ZXJpYWwgKVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gYGluc2VydCBpbnRvIHBpZXphcyAoIG5vbWJyZSAsIGlkX2NsaWVudGUgLCBpZF90aXBvc19tYXRlcmlhbCAsIGVzdGFkbyApXHJcbiAgICAgICAgdmFsdWVzICggQG5vbWJyZVBpZXphICwgQGlkQ2xpZW50ZSAsIEBpZFRpcG9NYXRlcmlhbCAsIDEgKWBcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QucXVlcnkgKCBxdWVyeSApXHJcbiAgICAgICAgaWYgKCByZXN1bHQgKSB7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogJ1BpZXphIGluc2VydGFkYSBjb3JyZWN0YW1lbnRlJyB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSB9IClcclxuICAgIH1cclxufSApXHJcbnJvdXRlci5wdXQgKCAnL3VwZGF0ZScgLCBhc3luYyAoIHJlcSwgcmVzKSA9PiB7XHJcbiAgICBjb25zdCB7IGlkUGllemEgLCBub21icmVQaWV6YSAsIGlkQ2xpZW50ZSAsIGlkVGlwb01hdGVyaWFsIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ3VwZGF0ZVBpZXphJyApXHJcbiAgICAgICAgY29uc3QgeyBSZXF1ZXN0ICwgSW50ICwgVmFyQ2hhciB9ID0gcmVxdWlyZSAoICdtc3NxbCcgKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZFBpZXphJyAsIEludCAsIGlkUGllemEgKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdub21icmVQaWV6YScgLCBWYXJDaGFyICwgbm9tYnJlUGllemEgKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZENsaWVudGUnICwgSW50ICwgaWRDbGllbnRlIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRUaXBvTWF0ZXJpYWwnICwgSW50ICwgaWRUaXBvTWF0ZXJpYWwgKVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gYHVwZGF0ZSBwaWV6YXNcclxuICAgICAgICBzZXRcclxuICAgICAgICBub21icmUgPSBAbm9tYnJlUGllemEgLFxyXG4gICAgICAgIGlkX2NsaWVudGUgPSBAaWRDbGllbnRlICxcclxuICAgICAgICBpZF90aXBvc19tYXRlcmlhbCA9IEBpZFRpcG9NYXRlcmlhbFxyXG4gICAgICAgIHdoZXJlIGlkID0gQGlkUGllemFgXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdQaWV6YSBhY3R1YWxpemFkYSBjb3JyZWN0YW1lbnRlJyB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSB9IClcclxuICAgIH1cclxufSApXHJcbnJvdXRlci5wdXQgKCAnL2RlbGV0ZScgLCBhc3luYyAoIHJlcSwgcmVzKSA9PiB7XHJcbiAgICBjb25zdCB7IGlkUGllemEgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAnZGVsZXRlUGllemEnIClcclxuICAgICAgICBjb25zdCB7IFJlcXVlc3QgLCBJbnQgIH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2lkUGllemEnICwgSW50ICwgaWRQaWV6YSApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgdXBkYXRlIHBpZXphc1xyXG4gICAgICAgIHNldFxyXG4gICAgICAgIGVzdGFkbyA9IDBcclxuICAgICAgICB3aGVyZSBpZCA9IEBpZFBpZXphYFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnUGllemEgZWxpbWluYWRhIGNvcnJlY3RhbWVudGUnIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZS5tZXNzYWdlIH0gKVxyXG4gICAgfVxyXG59IClcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcm91dGVyIiwiY29uc3Qge1JvdXRlcn0gPSByZXF1aXJlKCdleHByZXNzJylcclxuXHJcbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpXHJcblxyXG5yb3V0ZXIuZ2V0KCcvJyxhc3luYyAocmVxLHJlcyk9PntcclxuICAgIGNvbnN0IHthYnJpckNvbmV4aW9uLGNlcnJhckNvbmV4aW9ufSA9IHJlcXVpcmUoJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJylcclxuICAgIGF3YWl0IGFicmlyQ29uZXhpb24oKVxyXG4gICAgY29uc3Qge1JlcXVlc3R9ID0gcmVxdWlyZSgnbXNzcWwnKVxyXG4gICAgY29uc3QgY29uc3VsdGEgPSBuZXcgUmVxdWVzdCgpXHJcbiAgICBjb25zdCBxdWVyeSA9IGBzZWxlY3QgbS5pZCBhcyBpZE1vbGRlICwgbS5ub21icmUgYXMgbm9tYnJlTW9sZGUgLCBtLmlkX3BpZXphIGFzIGlkUGllemEgLCBwLm5vbWJyZSBhcyBub21icmVQaWV6YVxyXG4gICAgZnJvbSBtb2xkZXMgbVxyXG4gICAgam9pbiBwaWV6YXMgcCBvbiBtLmlkX3BpZXphID0gcC5pZFxyXG4gICAgd2hlcmUgbS5lc3RhZG8gPSAxYFxyXG4gICAgY29uc3VsdGEucXVlcnkoIHF1ZXJ5ICwoZXJyLGRhdG8pPT57XHJcbiAgICAgICAgaWYoIWVycil7cmVzLmpzb24oZGF0by5yZWNvcmRzZXQpOyBjZXJyYXJDb25leGlvbigpIH0gZWxzZSB7IHJlcy5qc29uKHttZW5zYWplOmVyci5tZXNzYWdlfSk7IGNlcnJhckNvbmV4aW9uKCkgfVxyXG4gICAgfSlcclxufSlcclxucm91dGVyLmdldCgnL3hwaWV6YS86aWRQaWV6YScsIGFzeW5jIChyZXEscmVzKT0+e1xyXG4gICAgY29uc3Qge2FicmlyQ29uZXhpb24sY2VycmFyQ29uZXhpb259ID0gcmVxdWlyZSgnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInKVxyXG4gICAgYXdhaXQgYWJyaXJDb25leGlvbigpXHJcbiAgICBjb25zdCB7aWRQaWV6YX0gPSByZXEucGFyYW1zXHJcbiAgICBjb25zdCB7UmVxdWVzdH0gPSByZXF1aXJlKCdtc3NxbCcpXHJcbiAgICBjb25zdCBjb25zdWx0YSA9IG5ldyBSZXF1ZXN0KClcclxuICAgIGNvbnN1bHRhLnF1ZXJ5KCdzZWxlY3QgaWQgYXMgaWRNb2xkZSwgbm9tYnJlIGFzIG5vbWJyZU1vbGRlIGZyb20gbW9sZGVzIHdoZXJlIGVzdGFkbyA9IDEgYW5kIGlkX3BpZXphID0gJytpZFBpZXphLChlcnIsZGF0byk9PntcclxuICAgICAgICBpZighZXJyKXtyZXMuanNvbihkYXRvLnJlY29yZHNldCk7IGNlcnJhckNvbmV4aW9uKCkgfSBlbHNlIHsgcmVzLmpzb24oe21lbnNhamU6ZXJyLm1lc3NhZ2V9KTsgY2VycmFyQ29uZXhpb24oKSB9XHJcbiAgICB9KVxyXG59KVxyXG5cclxuXHJcbnJvdXRlci5wb3N0ICggJy9pbnNlcnQnLCBhc3luYyAoIHJlcSAsIHJlcyApID0+IHtcclxuICAgIGNvbnN0IHsgbm9tYnJlTW9sZGUgLCBpZFBpZXphIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgY29uc3QgeyBSZXF1ZXN0ICwgVmFyQ2hhciAsIEludCB9ID0gcmVxdWlyZSAoICdtc3NxbCcgKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ2luc2VydE1vbGRlJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ25vbWJyZU1vbGRlJyAsIFZhckNoYXIgLCBub21icmVNb2xkZSApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2lkUGllemEnICwgSW50ICwgaWRQaWV6YSApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgaW5zZXJ0IGludG8gbW9sZGVzICggbm9tYnJlICwgaWRfcGllemEgLCBlc3RhZG8gKVxyXG4gICAgICAgIHZhbHVlc1xyXG4gICAgICAgICggQG5vbWJyZU1vbGRlICwgQGlkUGllemEgLCAxIClgXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdNb2xkZSBJbnNlcnRhZG8gY29ycmVjdGFtZW50ZScgLCBzdGF0dXMgOiAyMDAgfSApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICAgIH1cclxufSlcclxucm91dGVyLnB1dCAoICcvdXBkYXRlJywgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IGlkTW9sZGUgLCBub21icmVNb2xkZSAsIGlkUGllemEgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICBjb25zdCB7IFJlcXVlc3QgLCBWYXJDaGFyICwgSW50IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAndXBkYXRlTW9sZGUnIClcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgUmVxdWVzdCAoIGNvbmV4aW9uIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnbm9tYnJlTW9sZGUnICwgVmFyQ2hhciAsIG5vbWJyZU1vbGRlIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRQaWV6YScgLCBJbnQgLCBpZFBpZXphIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRNb2xkZScgLCBJbnQgLCBpZE1vbGRlIClcclxuICAgICAgICBjb25zdCBxdWVyeSA9IGB1cGRhdGUgbW9sZGVzXHJcbiAgICAgICAgc2V0XHJcbiAgICAgICAgbm9tYnJlID0gQG5vbWJyZU1vbGRlICxcclxuICAgICAgICBpZF9waWV6YSA9IEBpZFBpZXphXHJcbiAgICAgICAgd2hlcmUgaWQgPSBAaWRNb2xkZWBcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QucXVlcnkgKCBxdWVyeSApXHJcbiAgICAgICAgaWYgKCByZXN1bHQgKSB7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogJ01vbGRlIGFjdHVhbGl6YWRvIGNvcnJlY3RhbWVudGUnICwgc3RhdHVzIDogMjAwIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgLCBzdGF0dXMgOiA0MDMgfSApXHJcbiAgICB9XHJcbn0pXHJcbnJvdXRlci5wdXQgKCAnL2RlbGV0ZScsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBpZE1vbGRlIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgY29uc3QgeyBSZXF1ZXN0ICwgSW50IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAnZGVsZXRlTW9sZGUnIClcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgUmVxdWVzdCAoIGNvbmV4aW9uIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRNb2xkZScgLCBJbnQgLCBpZE1vbGRlIClcclxuICAgICAgICBjb25zdCBxdWVyeSA9IGB1cGRhdGUgbW9sZGVzXHJcbiAgICAgICAgc2V0XHJcbiAgICAgICAgZXN0YWRvID0gMFxyXG4gICAgICAgIHdoZXJlIGlkID0gQGlkTW9sZGVgXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdNb2xkZSBlbGltaW5hZG8gY29ycmVjdGFtZW50ZScgLCBzdGF0dXMgOiAyMDAgfSApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICAgIH1cclxufSlcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcm91dGVyXHJcbiIsImNvbnN0IHtSb3V0ZXJ9ID0gcmVxdWlyZSgnZXhwcmVzcycpXHJcblxyXG5jb25zdCByb3V0ZXIgPSBSb3V0ZXIoKVxyXG5cclxucm91dGVyLmdldCgnLycsYXN5bmMgKHJlcSxyZXMpPT57XHJcbiAgICBjb25zdCB7YWJyaXJDb25leGlvbixjZXJyYXJDb25leGlvbn0gPSByZXF1aXJlKCcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicpXHJcbiAgICBhd2FpdCBhYnJpckNvbmV4aW9uKClcclxuICAgIGNvbnN0IHtSZXF1ZXN0fSA9IHJlcXVpcmUoJ21zc3FsJylcclxuICAgIHZhciBjb25zdWx0YSA9IG5ldyBSZXF1ZXN0KClcclxuICAgIGNvbnN1bHRhLnF1ZXJ5KCdzZWxlY3QgZC5pZCBhcyBpZERlZmVjdG8sIGQubm9tYnJlIGFzIG5vbWJyZURlZmVjdG8sIGQuaWRfb3BlcmFjaW9uIGFzIGlkT3BlcmFjaW9uLG8ubm9tYnJlIGFzIG5vbWJyZU9wZXJhY2lvbiBmcm9tIGRlZmVjdG9zIGQgam9pbiBvcGVyYWNpb25lcyBvIG9uIGQuaWRfb3BlcmFjaW9uPW8uaWQgd2hlcmUgZC5lc3RhZG8gPSAxJywoZXJyLGRhdG8pPT57XHJcbiAgICAgICAgaWYoIWVycil7cmVzLmpzb24oZGF0by5yZWNvcmRzZXQpOyBjZXJyYXJDb25leGlvbigpIH0gZWxzZSB7IHJlcy5qc29uKHttZW5zYWplOmVyci5tZXNzYWdlfSk7IGNlcnJhckNvbmV4aW9uKCkgfVxyXG4gICAgfSlcclxufSlcclxuXHJcbnJvdXRlci5wb3N0ICggJy9pbnNlcnQnLCBhc3luYyAoIHJlcSAsIHJlcyApID0+IHtcclxuICAgIGNvbnN0IHsgbm9tYnJlRGVmZWN0byAsIGlkT3BlcmFjaW9uIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgY29uc3QgeyBSZXF1ZXN0ICwgVmFyQ2hhciAsIEludCB9ID0gcmVxdWlyZSAoICdtc3NxbCcgKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ2luc2VydERlZmVjdG8nIClcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgUmVxdWVzdCAoIGNvbmV4aW9uIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnbm9tYnJlRGVmZWN0bycgLCBWYXJDaGFyICwgbm9tYnJlRGVmZWN0byApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2lkT3BlcmFjaW9uJyAsIEludCAsIGlkT3BlcmFjaW9uIClcclxuICAgICAgICBjb25zdCBxdWVyeSA9IGBpbnNlcnQgaW50byBkZWZlY3RvcyAoIG5vbWJyZSAsIGlkX29wZXJhY2lvbiAsIGVzdGFkbyApXHJcbiAgICAgICAgdmFsdWVzXHJcbiAgICAgICAgKCBAbm9tYnJlRGVmZWN0byAsIEBpZE9wZXJhY2lvbiAsIDEgKWBcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QucXVlcnkgKCBxdWVyeSApXHJcbiAgICAgICAgaWYgKCByZXN1bHQgKSB7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogJ0RlZmVjdG8gSW5zZXJ0YWRvIGNvcnJlY3RhbWVudGUnICwgc3RhdHVzIDogMjAwIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgLCBzdGF0dXMgOiA0MDMgfSApXHJcbiAgICB9XHJcbn0pXHJcbnJvdXRlci5wdXQgKCAnL3VwZGF0ZScsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBpZERlZmVjdG8gLCBub21icmVEZWZlY3RvICwgaWRPcGVyYWNpb24gfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICBjb25zdCB7IFJlcXVlc3QgLCBWYXJDaGFyICwgSW50IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAndXBkYXRlRGVmZWN0bycgKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdub21icmVEZWZlY3RvJyAsIFZhckNoYXIgLCBub21icmVEZWZlY3RvIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRPcGVyYWNpb24nICwgSW50ICwgaWRPcGVyYWNpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZERlZmVjdG8nICwgSW50ICwgaWREZWZlY3RvIClcclxuICAgICAgICBjb25zdCBxdWVyeSA9IGB1cGRhdGUgZGVmZWN0b3NcclxuICAgICAgICBzZXRcclxuICAgICAgICBub21icmUgPSBAbm9tYnJlRGVmZWN0byAsXHJcbiAgICAgICAgaWRfb3BlcmFjaW9uID0gQGlkT3BlcmFjaW9uXHJcbiAgICAgICAgd2hlcmUgaWQgPSBAaWREZWZlY3RvYFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnRGVmZWN0byBhY3R1YWxpemFkbyBjb3JyZWN0YW1lbnRlJyAsIHN0YXR1cyA6IDIwMCB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggKVxyXG4gICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZS5tZXNzYWdlICwgc3RhdHVzIDogNDAzIH0gKVxyXG4gICAgfVxyXG59KVxyXG5yb3V0ZXIucHV0ICggJy9kZWxldGUnLCBhc3luYyAoIHJlcSAsIHJlcyApID0+IHtcclxuICAgIGNvbnN0IHsgaWREZWZlY3RvIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgY29uc3QgeyBSZXF1ZXN0ICwgSW50IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAnZGVsZXRlRGVmZWN0bycgKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZERlZmVjdG8nICwgSW50ICwgaWREZWZlY3RvIClcclxuICAgICAgICBjb25zdCBxdWVyeSA9IGB1cGRhdGUgZGVmZWN0b3NcclxuICAgICAgICBzZXRcclxuICAgICAgICBlc3RhZG8gPSAwXHJcbiAgICAgICAgd2hlcmUgaWQgPSBAaWREZWZlY3RvYFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnRGVmZWN0byBlbGltaW5hZG8gY29ycmVjdGFtZW50ZScgLCBzdGF0dXMgOiAyMDAgfSApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICAgIH1cclxufSlcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcm91dGVyIiwiY29uc3Qge1JvdXRlcn0gPSByZXF1aXJlKCdleHByZXNzJylcclxuY29uc3Qgcm91dGVyID0gUm91dGVyKClcclxuXHJcbnJvdXRlci5nZXQgKCAnLycsYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb24gLCBjZXJyYXJDb25leGlvbiB9ID0gcmVxdWlyZSAoJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJylcclxuICAgIGF3YWl0IGFicmlyQ29uZXhpb24gKCAgKVxyXG4gICAgdmFyIHtSZXF1ZXN0fSA9IHJlcXVpcmUgKCdtc3NxbCcpXHJcbiAgICB2YXIgY29uc3VsdGEgPSBuZXcgUmVxdWVzdCAoICApXHJcbiAgICBjb25zdWx0YS5xdWVyeShcclxuICAgICAgICBgc2VsZWN0IGlkIGFzIGlkT3BlcmFjaW9uLCBub21icmUgYXMgbm9tYnJlT3BlcmFjaW9uXHJcbiAgICAgICAgZnJvbSBvcGVyYWNpb25lcyB3aGVyZSBlc3RhZG8gPSAxYCxcclxuICAgICAgICAoZXJyLGRhdG8pID0+IHtcclxuICAgICAgICAgICAgaWYoIWVycil7cmVzLmpzb24oZGF0by5yZWNvcmRzZXQpOyBjZXJyYXJDb25leGlvbigpIH0gZWxzZSB7IHJlcy5qc29uKHttZW5zYWplOmVyci5tZXNzYWdlfSk7IGNlcnJhckNvbmV4aW9uKCkgfVxyXG4gICAgICAgIH1cclxuICAgIClcclxufSApXHJcbnJvdXRlci5wb3N0ICggJy9pbnNlcnQnICwgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IG5vbWJyZU9wZXJhY2lvbiB9ID0gcmVxLmJvZHlcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdpbnNlcnRPcGVyYWNpb24nIClcclxuICAgICAgICBjb25zdCB7IFJlcXVlc3QgLCBWYXJDaGFyIH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ25vbWJyZU9wZXJhY2lvbicgLCBWYXJDaGFyICwgbm9tYnJlT3BlcmFjaW9uIClcclxuICAgICAgICBjb25zdCBxdWVyeSA9IGBpbnNlcnQgaW50byBvcGVyYWNpb25lcyAoIG5vbWJyZSAsIGVzdGFkbyApXHJcbiAgICAgICAgdmFsdWVzXHJcbiAgICAgICAgKCBAbm9tYnJlT3BlcmFjaW9uICwgMSApYFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnT3BlcmFjaW9uIGluc2VydGFkYSBjb3JyZWN0YW1lbnRlJyAsIHN0YXR1cyA6IDIwMCB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICAgIH1cclxufSApXHJcbnJvdXRlci5wdXQgKCAnL3VwZGF0ZScsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBub21icmVPcGVyYWNpb24gLCBpZE9wZXJhY2lvbiB9ID0gcmVxLmJvZHlcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIGNvbnN0IHsgUmVxdWVzdCAsIFZhckNoYXIgLCBJbnQgfSA9IHJlcXVpcmUgKCAnbXNzcWwnIClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICd1cGRhdGVPcGVyYWNpb24nIClcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgUmVxdWVzdCAoIGNvbmV4aW9uIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnbm9tYnJlT3BlcmFjaW9uJyAsIFZhckNoYXIgLCBub21icmVPcGVyYWNpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZE9wZXJhY2lvbicgLCBJbnQgLCBpZE9wZXJhY2lvbiApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgdXBkYXRlIG9wZXJhY2lvbmVzXHJcbiAgICAgICAgc2V0XHJcbiAgICAgICAgbm9tYnJlID0gQG5vbWJyZU9wZXJhY2lvblxyXG4gICAgICAgIHdoZXJlIGlkID0gQGlkT3BlcmFjaW9uYFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnT3BlcmFjaW9uIGFjdHVhbGl6YWRhIGNvcnJlY3RhbWVudGUnICwgc3RhdHVzIDogMjAwIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoIClcclxuICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZS5tZXNzYWdlICwgc3RhdHVzIDogNDAzIH0gKVxyXG4gICAgfVxyXG59IClcclxucm91dGVyLnB1dCAoICcvZGVsZXRlJywgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IGlkT3BlcmFjaW9uIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgY29uc3QgeyBSZXF1ZXN0ICwgSW50IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAnZGVsZXRlT3BlcmFjaW9uJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2lkT3BlcmFjaW9uJyAsIEludCAsIGlkT3BlcmFjaW9uIClcclxuICAgICAgICBjb25zdCBxdWVyeSA9IGB1cGRhdGUgb3BlcmFjaW9uZXNcclxuICAgICAgICBzZXRcclxuICAgICAgICBlc3RhZG8gPSAwXHJcbiAgICAgICAgd2hlcmUgaWQgPSBAaWRPcGVyYWNpb25gXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdPcGVyYWNpb24gZWxpbWluYWRhIGNvcnJlY3RhbWVudGUnICwgc3RhdHVzIDogMjAwIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgLCBzdGF0dXMgOiA0MDMgfSApXHJcbiAgICB9XHJcbn0gKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXIiLCJjb25zdCB7Um91dGVyfSA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxyXG5yb3V0ZXIgPSBSb3V0ZXIoKVxyXG5cclxucm91dGVyLmdldCgnLycsYXN5bmMgKHJlcSxyZXMpPT57XHJcbiAgICBjb25zdCB7YWJyaXJDb25leGlvbixjZXJyYXJDb25leGlvbn0gPSByZXF1aXJlKCcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicpXHJcbiAgICBhd2FpdCBhYnJpckNvbmV4aW9uKClcclxuICAgIGNvbnN0IHtSZXF1ZXN0fSA9IHJlcXVpcmUoJ21zc3FsJylcclxuICAgIHZhciBjb25zdWx0YSA9IG5ldyBSZXF1ZXN0KClcclxuICAgIGNvbnN1bHRhLnF1ZXJ5KFxyXG4gICAgICAgIGBzZWxlY3QgaWQgYXMgaWRUaXBvUHJvY2Vzbywgbm9tYnJlIGFzIG5vbWJyZVRpcG9Qcm9jZXNvXHJcbiAgICAgICAgZnJvbSB0aXBvc19wcm9jZXNvXHJcbiAgICAgICAgd2hlcmUgZXN0YWRvID0gMWAsXHJcbiAgICAgICAgKGVycixkYXRvKT0+e1xyXG4gICAgICAgICAgICBpZighZXJyKXtyZXMuanNvbihkYXRvLnJlY29yZHNldCk7IGNlcnJhckNvbmV4aW9uKCkgfSBlbHNlIHsgcmVzLmpzb24oe21lbnNhamU6ZXJyLm1lc3NhZ2V9KTsgY2VycmFyQ29uZXhpb24oKSB9XHJcbiAgICAgICAgfVxyXG4gICAgKVxyXG59KVxyXG5yb3V0ZXIucG9zdCgnL3htYXF1aW5hcGllemF0aXBvJyxhc3luYyAocmVxLHJlcyk9PntcclxuICAgIGNvbnN0IHthYnJpckNvbmV4aW9uLGNlcnJhckNvbmV4aW9ufSA9IHJlcXVpcmUoJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJylcclxuICAgIGF3YWl0IGFicmlyQ29uZXhpb24oKVxyXG4gICAgY29uc3Qge2lkTWFxdWluYSxpZFBpZXphLGlkVGlwb1Byb2Nlc299ID0gcmVxLmJvZHlcclxuICAgIGNvbnN0IHtSZXF1ZXN0fSA9IHJlcXVpcmUoJ21zc3FsJylcclxuICAgIHZhciBjb25zdWx0YSA9IG5ldyBSZXF1ZXN0KClcclxuICAgIGNvbnN1bHRhLnF1ZXJ5KFxyXG4gICAgICAgIGBzZWxlY3QgcHJvLmlkIGFzIGlkUHJvY2VzbywgcHJvLmRlc2NyaXBjaW9uIGFzIGRlc2NyaXBjaW9uUHJvY2Vzb1xyXG4gICAgICAgIGZyb20gcHJvY2Vzb3MgcHJvXHJcbiAgICAgICAgd2hlcmUgcHJvLmVzdGFkbyA9IDFcclxuICAgICAgICBhbmQgcHJvLmlkX3BpZXphID0gJHtpZFBpZXphfVxyXG4gICAgICAgIGFuZCBwcm8uaWRfbWFxdWluYSA9ICR7aWRNYXF1aW5hfVxyXG4gICAgICAgIGFuZCBwcm8uaWRfdGlwb3NfcHJvY2VzbyA9ICR7aWRUaXBvUHJvY2Vzb31gLFxyXG4gICAgICAgIChlcnIsZGF0byk9PntcclxuICAgICAgICAgICAgaWYoIWVycil7cmVzLmpzb24oZGF0by5yZWNvcmRzZXQpOyBjZXJyYXJDb25leGlvbigpIH0gZWxzZSB7IHJlcy5qc29uKHttZW5zYWplOmVyci5tZXNzYWdlfSk7IGNlcnJhckNvbmV4aW9uKCkgfVxyXG4gICAgICAgIH1cclxuICAgIClcclxufSlcclxucm91dGVyLmdldCAoJy9saXN0JyAsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdzZWxlY3RQcm9jZXNvcycgKVxyXG4gICAgY29uc3QgeyBUcmFuc2FjdGlvbiAsIFJlcXVlc3QgfSA9IHJlcXVpcmUgKCAnbXNzcWwnIClcclxuICAgIGNvbnN0IG15VHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24gKCBjb25leGlvbiApXHJcbiAgICBteVRyYW5zYWN0aW9uLmJlZ2luICggYXN5bmMgKCBlcnJvclRyYW5zYWMgKSA9PiB7XHJcbiAgICAgICAgaWYgKCBlcnJvclRyYW5zYWMgKSB7XHJcbiAgICAgICAgICAgIG15VHJhbnNhY3Rpb24ucm9sbGJhY2sgKCAgKVxyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGVycm9yVHJhbnNhYy5tZXNzYWdlIH0gKVxyXG4gICAgICAgIH1cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YXIgdmVjUHJvY2Vzb3MgPSBbICBdXHJcbiAgICAgICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggbXlUcmFuc2FjdGlvbiApXHJcbiAgICAgICAgICAgIGNvbnN0IG15UmVxdWVzdFBpZXphWGhzID0gbmV3IFJlcXVlc3QgKCBteVRyYW5zYWN0aW9uIClcclxuICAgICAgICAgICAgY29uc3QgcXVlcnkgPSBgc2VsZWN0IHAuaWQgYXMgaWRQcm9jZXNvICwgcC5kZXNjcmlwY2lvbiBhcyBkZXNjaXBjaW9uUHJvY2VzbyAsIHAuaWRfcGllemEgYXMgaWRQaWV6YSAsXHJcbiAgICAgICAgICAgIHBpZS5ub21icmUgYXMgbm9tYnJlUGllemEgLCBwLmlkX21hcXVpbmEgYXMgaWRNYXF1aW5hICwgbWFxLm5vbWJyZSBhcyBub21icmVNYXF1aW5hICxcclxuICAgICAgICAgICAgcC5pZF90aXBvc19wcm9jZXNvIGFzIGlkVGlwb1Byb2Nlc28gLCB0cC5ub21icmUgYXMgbm9tYnJlVGlwb1Byb2Nlc29cclxuICAgICAgICAgICAgZnJvbSBwcm9jZXNvcyBwXHJcbiAgICAgICAgICAgIGpvaW4gcGllemFzIHBpZSBvbiBwLmlkX3BpZXphID0gcGllLmlkXHJcbiAgICAgICAgICAgIGpvaW4gbWFxdWluYXMgbWFxIG9uIHAuaWRfbWFxdWluYSA9IG1hcS5pZFxyXG4gICAgICAgICAgICBqb2luIHRpcG9zX3Byb2Nlc28gdHAgb24gcC5pZF90aXBvc19wcm9jZXNvID0gdHAuaWRcclxuICAgICAgICAgICAgd2hlcmUgcC5lc3RhZG8gPSAxYFxyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICAgICAgaWYgKCByZXNwb25zZSApIHtcclxuICAgICAgICAgICAgICAgIHZlY1Byb2Nlc29zID0gcmVzcG9uc2UucmVjb3Jkc2V0XHJcbiAgICAgICAgICAgICAgICB2YXIgaWRQcm9jZXNvcyA9ICcnXHJcbiAgICAgICAgICAgICAgICBpZiAoIEFycmF5LmlzQXJyYXkgKCB2ZWNQcm9jZXNvcyApICApIHtcclxuICAgICAgICAgICAgICAgICAgICB2ZWNQcm9jZXNvcy5mb3JFYWNoICggKCBwICwgaSApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWRQcm9jZXNvcyArPSBgICR7cC5pZFByb2Nlc299ICxgXHJcbiAgICAgICAgICAgICAgICAgICAgfSApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaWRQcm9jZXNvcyA9PT0gJycgKSB7IGlkUHJvY2Vzb3MgPSBudWxsIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgeyBpZFByb2Nlc29zID0gaWRQcm9jZXNvcy50cmltICggICkuc3Vic3RyaW5nICggMCAsICBpZFByb2Nlc29zLmxlbmd0aCAtMiApIH1cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nICggaWRQcm9jZXNvcyApXHJcbiAgICAgICAgICAgICAgICBjb25zdCBxdWVyeVBpZXphWGhzID0gYHNlbGVjdCBweGguaWQgYXMgaWRQaWV6YXNYaHMgLCBweGguY2FudGlkYWQgYXMgY2FudGlkYWRQaWV6YXNYaHMgLCBweGguZmVfZGVzZGUgYXMgZGVzZGVQaWV6YXNYaHMgLFxyXG4gICAgICAgICAgICAgICAgcHhoLmZlX2hhc3RhIGFzIGhhc3RhUGllemFzWGhzICwgcHhoLmlkX3Byb2Nlc28gYXMgaWRQcm9jZXNvXHJcbiAgICAgICAgICAgICAgICBmcm9tIHBpZXphc194X2hvcmEgcHhoXHJcbiAgICAgICAgICAgICAgICB3aGVyZSBweGguaWRfcHJvY2VzbyBpbiAoJHtpZFByb2Nlc29zfSlgXHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHJwelhocyA9IGF3YWl0IG15UmVxdWVzdFBpZXphWGhzLnF1ZXJ5ICggcXVlcnlQaWV6YVhocyApXHJcbiAgICAgICAgICAgICAgICB2YXIgdmVjUGllemFzWGhvcmEgPSBbICBdXHJcbiAgICAgICAgICAgICAgICBpZiAoIHJlc3VscnB6WGhzICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nICggdmVjUGllemFzWGhvcmEgKVxyXG4gICAgICAgICAgICAgICAgICAgIHZlY1BpZXphc1hob3JhID0gcmVzdWxycHpYaHMucmVjb3Jkc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cgKCByZXN1bHJwelhocy5yZWNvcmRzZXQgKVxyXG4gICAgICAgICAgICAgICAgICAgIHZlY1Byb2Nlc29zLmZvckVhY2ggKCAoIHAgLCBpICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwLnZlY1BpZXphc1hob3JhID0gWyBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY1BpZXphc1hob3JhLmZvckVhY2ggKCAoIHB6WGhzICwgaW5kZXggKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcnNlSW50ICggcC5pZFByb2Nlc28gKSA9PT0gcGFyc2VJbnQgKCBwelhocy5pZFByb2Nlc28gKSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLnZlY1BpZXphc1hob3JhLnB1c2ggKCBwelhocyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gKVxyXG4gICAgICAgICAgICAgICAgICAgIG15VHJhbnNhY3Rpb24uY29tbWl0ICggIClcclxuICAgICAgICAgICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5qc29uICggdmVjUHJvY2Vzb3MgKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICAgICAgbXlUcmFuc2FjdGlvbi5yb2xsYmFjayAoICApXHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZS5tZXNzYWdlIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH0gKVxyXG59IClcclxuXHJcbnJvdXRlci5wb3N0ICggJy9pbnNlcnQnICwgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IGRlc2NyaXBjaW9uUHJvY2VzbyAsIGlkUGllemEgLCBpZE1hcXVpbmEgLCBpZFRpcG9zUHJvY2VzbyAsIHZlY1BpZXphc1hob3JhIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ2luc2VydFByb2Nlc28nIClcclxuICAgICAgICBjb25zdCAgeyBUcmFuc2FjdGlvbiAsIFJlcXVlc3QgLERhdGUgLCBJbnQgLCBWYXJDaGFyIH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICAgICAgY29uc3QgbXlUcmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbiAoIGNvbmV4aW9uIClcclxuICAgICAgICBjb25zdCBteVJlcXVlc3RQcm9jZXNvID0gbmV3IFJlcXVlc3QgKCBteVRyYW5zYWN0aW9uIClcclxuICAgICAgICBjb25zdCBhc2luY3Jvbm8gPSByZXF1aXJlICggJ2FzeW5jJyApXHJcbiAgICAgICAgbXlUcmFuc2FjdGlvbi5iZWdpbiAoIGFzeW5jICggZXJyb3JUcmFzYWN0aW9ucyApID0+IHtcclxuICAgICAgICAgICAgaWYgKCBlcnJvclRyYXNhY3Rpb25zICkge1xyXG4gICAgICAgICAgICAgICAgbXlUcmFuc2FjdGlvbi5yb2xsYmFjayAoICApXHJcbiAgICAgICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlcnJvclRyYXNhY3Rpb25zLm1lc3NhZ2UgfSApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbXlSZXF1ZXN0UHJvY2Vzby5pbnB1dCAoICdkZXNjcmlwY2lvblByb2Nlc28nICwgVmFyQ2hhciAsICBkZXNjcmlwY2lvblByb2Nlc28gKVxyXG4gICAgICAgICAgICBteVJlcXVlc3RQcm9jZXNvLmlucHV0ICggJ2lkUGllemEnICwgSW50ICwgIGlkUGllemEgKVxyXG4gICAgICAgICAgICBteVJlcXVlc3RQcm9jZXNvLmlucHV0ICggJ2lkTWFxdWluYScgLCBJbnQgLCAgaWRNYXF1aW5hIClcclxuICAgICAgICAgICAgbXlSZXF1ZXN0UHJvY2Vzby5pbnB1dCAoICdpZFRpcG9zUHJvY2VzbycgLCBJbnQgLCAgaWRUaXBvc1Byb2Nlc28gKVxyXG4gICAgICAgICAgICBjb25zdCBxdWVyeVByb2Nlc29zID0gYGluc2VydCBpbnRvIHByb2Nlc29zICggZGVzY3JpcGNpb24gLCBpZF9waWV6YSAsIGlkX21hcXVpbmEgLCBpZF90aXBvc19wcm9jZXNvICwgZXN0YWRvIClcclxuICAgICAgICAgICAgdmFsdWVzXHJcbiAgICAgICAgICAgICggQGRlc2NyaXBjaW9uUHJvY2VzbyAsIEBpZFBpZXphICwgQGlkTWFxdWluYSAsIEBpZFRpcG9zUHJvY2VzbyAsIDEgKSA7XHJcbiAgICAgICAgICAgIGRlY2xhcmUgQGlkUHJvY2VzbyBpbnRcclxuICAgICAgICAgICAgc2V0IEBpZFByb2Nlc28gPSAoIHNlbGVjdCB0b3AgMSBtYXggKCBpZCApIGZyb20gcHJvY2Vzb3MgKVxyXG4gICAgICAgICAgICBzZWxlY3QgQGlkUHJvY2VzbyBhcyBpZFByb2Nlc29gXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlUHJvY2Vzb3MgPSBhd2FpdCBteVJlcXVlc3RQcm9jZXNvLnF1ZXJ5ICggcXVlcnlQcm9jZXNvcyApXHJcbiAgICAgICAgICAgIHZhciBpZFByb2Nlc29cclxuICAgICAgICAgICAgaWYgKCByZXNwb25zZVByb2Nlc29zICkge1xyXG4gICAgICAgICAgICAgICAgaWRQcm9jZXNvID0gcmVzcG9uc2VQcm9jZXNvcy5yZWNvcmRzZXRzWzBdWzBdLmlkUHJvY2Vzb1xyXG4gICAgICAgICAgICAgICAgaWYgKCBBcnJheS5pc0FycmF5ICggdmVjUGllemFzWGhvcmEgKSAmJiB2ZWNQaWV6YXNYaG9yYS5sZW5ndGggPiAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFzaW5jcm9uby5lYWNoU2VyaWVzICggdmVjUGllemFzWGhvcmEgLCAoIHBpZXphWGhzICwgY2FsbGJhY2sgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG15UmVxdWVzdFBpZVhocyA9IG5ldyBSZXF1ZXN0ICggbXlUcmFuc2FjdGlvbiApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG15UmVxdWVzdFBpZVhocy5pbnB1dCAoICdjYW50aWRhZFBpZXphc1hocycgLCBJbnQgLCBwaWV6YVhocy5jYW50aWRhZFBpZXphc1hocyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG15UmVxdWVzdFBpZVhocy5pbnB1dCAoICdkZXNkZVBpZXphc1hocycgLCBEYXRlICwgcGllemFYaHMuZGVzZGVQaWV6YXNYaHMgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBteVJlcXVlc3RQaWVYaHMuaW5wdXQgKCAnaGFzdGFQaWV6YXNYaHMnICwgRGF0ZSAsIHBpZXphWGhzLmhhc3RhUGllemFzWGhzIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXlSZXF1ZXN0UGllWGhzLmlucHV0ICggJ2lkUHJvY2VzbycgLCBJbnQgLCBwYXJzZUludCAoIGlkUHJvY2VzbyApIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcXVlcnlQaWV4aHMgPSBgaW5zZXJ0IGludG8gcGllemFzX3hfaG9yYSAoIGNhbnRpZGFkICwgZmVfZGVzZGUgLCBmZV9oYXN0YSAsIGlkX3Byb2Nlc28gLCBlc3RhZG8gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgKCBAY2FudGlkYWRQaWV6YXNYaHMgLCBAZGVzZGVQaWV6YXNYaHMgLCBAaGFzdGFQaWV6YXNYaHMgLCBAaWRQcm9jZXNvICwgMSApYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBteVJlcXVlc3RQaWVYaHMucXVlcnkgKCBxdWVyeVBpZXhocyAsICggZXJyb3IgLCByZXN1bHQgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGVycm9yICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrICggZXJyb3IgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IClcclxuICAgICAgICAgICAgICAgICAgICB9ICwgKCBlcnJvckNhbGJhY2sgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZXJyb3JDYWxiYWNrICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXlUcmFuc2FjdGlvbi5yb2xsYmFjayAoICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGVycm9yQ2FsYmFjay5tZXNzYWdlIH0gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXlUcmFuc2FjdGlvbi5jb21taXQgKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogJ1Byb2Nlc28gaW5zZXJ0YWRvIGNvcnJlY3RhbWVudGUnIH0gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IClcclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICBteVRyYW5zYWN0aW9uLnJvbGxiYWNrICggIClcclxuICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZS5tZXNzYWdlIH0gKVxyXG4gICAgfVxyXG59IClcclxucm91dGVyLnB1dCAoICcvdXBkYXRlJyAsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBpZFByb2Nlc28gLCBkZXNjcmlwY2lvblByb2Nlc28gLCBpZFBpZXphICwgaWRNYXF1aW5hICwgaWRUaXBvc1Byb2Nlc28gLCB2ZWNQaWV6YXNYaG9yYSB9ID0gcmVxLmJvZHlcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdpbnNlcnRQcm9jZXNvJyApXHJcbiAgICAgICAgY29uc3QgIHsgVHJhbnNhY3Rpb24gLCBSZXF1ZXN0ICxEYXRlICwgSW50ICwgVmFyQ2hhciB9ID0gcmVxdWlyZSAoICdtc3NxbCcgKVxyXG4gICAgICAgIGNvbnN0IG15VHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24gKCBjb25leGlvbiApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0UHJvY2VzbyA9IG5ldyBSZXF1ZXN0ICggbXlUcmFuc2FjdGlvbiApXHJcbiAgICAgICAgY29uc3QgYXNpbmNyb25vID0gcmVxdWlyZSAoICdhc3luYycgKVxyXG4gICAgICAgIG15VHJhbnNhY3Rpb24uYmVnaW4gKCBhc3luYyAoIGVycm9yVHJhc2FjdGlvbnMgKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICggZXJyb3JUcmFzYWN0aW9ucyApIHtcclxuICAgICAgICAgICAgICAgIG15VHJhbnNhY3Rpb24ucm9sbGJhY2sgKCAgKVxyXG4gICAgICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZXJyb3JUcmFzYWN0aW9ucy5tZXNzYWdlIH0gKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG15UmVxdWVzdFByb2Nlc28uaW5wdXQgKCAnZGVzY3JpcGNpb25Qcm9jZXNvJyAsIFZhckNoYXIgLCAgZGVzY3JpcGNpb25Qcm9jZXNvIClcclxuICAgICAgICAgICAgbXlSZXF1ZXN0UHJvY2Vzby5pbnB1dCAoICdpZFBpZXphJyAsIEludCAsICBpZFBpZXphIClcclxuICAgICAgICAgICAgbXlSZXF1ZXN0UHJvY2Vzby5pbnB1dCAoICdpZE1hcXVpbmEnICwgSW50ICwgIGlkTWFxdWluYSApXHJcbiAgICAgICAgICAgIG15UmVxdWVzdFByb2Nlc28uaW5wdXQgKCAnaWRUaXBvc1Byb2Nlc28nICwgSW50ICwgIGlkVGlwb3NQcm9jZXNvIClcclxuICAgICAgICAgICAgbXlSZXF1ZXN0UHJvY2Vzby5pbnB1dCAoICdpZFByb2Nlc28nICwgSW50ICwgIGlkUHJvY2VzbyApXHJcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UHJvY2Vzb3MgPSBgdXBkYXRlIHByb2Nlc29zXHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICBkZXNjcmlwY2lvbiA9IEBkZXNjcmlwY2lvblByb2Nlc28gLFxyXG4gICAgICAgICAgICBpZF9waWV6YSA9IEBpZFBpZXphICxcclxuICAgICAgICAgICAgaWRfbWFxdWluYSA9IEBpZE1hcXVpbmEgLFxyXG4gICAgICAgICAgICBpZF90aXBvc19wcm9jZXNvID0gQGlkVGlwb3NQcm9jZXNvXHJcbiAgICAgICAgICAgIHdoZXJlIGlkID0gQGlkUHJvY2VzbyA7IGRlbGV0ZSBwaWV6YXNfeF9ob3JhIHdoZXJlIGlkX3Byb2Nlc28gPSBAaWRQcm9jZXNvYFxyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZVByb2Nlc29zID0gYXdhaXQgbXlSZXF1ZXN0UHJvY2Vzby5xdWVyeSAoIHF1ZXJ5UHJvY2Vzb3MgKVxyXG4gICAgICAgICAgICBpZiAoIHJlc3BvbnNlUHJvY2Vzb3MgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIEFycmF5LmlzQXJyYXkgKCB2ZWNQaWV6YXNYaG9yYSApICYmIHZlY1BpZXphc1hob3JhLmxlbmd0aCA+IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXNpbmNyb25vLmVhY2hTZXJpZXMgKCB2ZWNQaWV6YXNYaG9yYSAsICggcGllemFYaHMgLCBjYWxsYmFjayApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbXlSZXF1ZXN0UGllWGhzID0gbmV3IFJlcXVlc3QgKCBteVRyYW5zYWN0aW9uIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXlSZXF1ZXN0UGllWGhzLmlucHV0ICggJ2NhbnRpZGFkUGllemFzWGhzJyAsIEludCAsIHBpZXphWGhzLmNhbnRpZGFkUGllemFzWGhzIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXlSZXF1ZXN0UGllWGhzLmlucHV0ICggJ2Rlc2RlUGllemFzWGhzJyAsIERhdGUgLCBwaWV6YVhocy5kZXNkZVBpZXphc1hocyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG15UmVxdWVzdFBpZVhocy5pbnB1dCAoICdoYXN0YVBpZXphc1hocycgLCBEYXRlICwgcGllemFYaHMuaGFzdGFQaWV6YXNYaHMgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBteVJlcXVlc3RQaWVYaHMuaW5wdXQgKCAnaWRQcm9jZXNvJyAsIEludCAsIHBhcnNlSW50ICggaWRQcm9jZXNvICkgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBxdWVyeVBpZXhocyA9IGBpbnNlcnQgaW50byBwaWV6YXNfeF9ob3JhICggY2FudGlkYWQgLCBmZV9kZXNkZSAsIGZlX2hhc3RhICwgaWRfcHJvY2VzbyAsIGVzdGFkbyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcyAoIEBjYW50aWRhZFBpZXphc1hocyAsIEBkZXNkZVBpZXphc1hocyAsIEBoYXN0YVBpZXphc1hocyAsIEBpZFByb2Nlc28gLCAxIClgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG15UmVxdWVzdFBpZVhocy5xdWVyeSAoIHF1ZXJ5UGlleGhzICwgKCBlcnJvciAsIHJlc3VsdCApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZXJyb3IgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgKCBlcnJvciApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAoICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gLCAoIGVycm9yQ2FsYmFjayApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBlcnJvckNhbGJhY2sgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBteVRyYW5zYWN0aW9uLnJvbGxiYWNrICggIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZXJyb3JDYWxiYWNrLm1lc3NhZ2UgfSApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBteVRyYW5zYWN0aW9uLmNvbW1pdCAoICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnUHJvY2VzbyBhY3R1YWxpemFkbyBjb3JyZWN0YW1lbnRlJyB9IClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSApXHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgbXlUcmFuc2FjdGlvbi5yb2xsYmFjayAoICApXHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSB9IClcclxuICAgIH1cclxufSApXHJcbnJvdXRlci5wdXQgKCAnL2RlbGV0ZScgLCBhc3luYyAoIHJlcSAsIHJlcyApID0+IHtcclxuICAgIGNvbnN0IHsgaWRQcm9jZXNvIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ2RlbGV0ZVByb2Nlc28nIClcclxuICAgICAgICBjb25zdCAgeyAgUmVxdWVzdCAgLCBJbnQgIH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0UHJvY2VzbyA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdFByb2Nlc28uaW5wdXQgKCAnaWRQcm9jZXNvJyAsIEludCAsICBpZFByb2Nlc28gKVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5UHJvY2Vzb3MgPSBgdXBkYXRlIHByb2Nlc29zXHJcbiAgICAgICAgc2V0XHJcbiAgICAgICAgZXN0YWRvID0gMFxyXG4gICAgICAgIHdoZXJlIGlkID0gQGlkUHJvY2VzbyBgXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VQcm9jZXNvcyA9IGF3YWl0IG15UmVxdWVzdFByb2Nlc28ucXVlcnkgKCBxdWVyeVByb2Nlc29zIClcclxuICAgICAgICBpZiAoIHJlc3BvbnNlUHJvY2Vzb3MgKSB7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogJ1Byb2Nlc29zIGVsaW1pbmFkbyBjb3JyZWN0YW1lbnRlJyB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSB9IClcclxuICAgIH1cclxufSApXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlciIsImNvbnN0IHtSb3V0ZXJ9ID0gcmVxdWlyZSgnZXhwcmVzcycpXHJcbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpXHJcblxyXG5yb3V0ZXIuZ2V0KCcvJyxhc3luYyAocmVxLHJlcykgPT4ge1xyXG4gICAgY29uc3Qge2FicmlyQ29uZXhpb24sY2VycmFyQ29uZXhpb259ID0gcmVxdWlyZSgnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInKVxyXG4gICAgYXdhaXQgYWJyaXJDb25leGlvbigpXHJcbiAgICB2YXIge1JlcXVlc3R9ID0gcmVxdWlyZSgnbXNzcWwnKVxyXG4gICAgdmFyIGNvbnN1bHRhID0gbmV3IFJlcXVlc3QoKVxyXG4gICAgY29uc3VsdGEucXVlcnkoXHJcbiAgICAgICAgYHNlbGVjdCB0LmlkIGFzIGlkVHVybm8sIHQuZGVzY3JpcGNpb24gYXMgZGVzY3JpcGNpb25UdXJubyx0LmhzX2luaWNpbyBhcyBoc0luaWNpb1R1cm5vICx0LmhzX2ZpbiBhcyBoc0ZpblR1cm5vICBcclxuICAgICAgICBmcm9tIHR1cm5vcyB0XHJcbiAgICAgICAgd2hlcmUgZXN0YWRvID0gMWAsXHJcbiAgICAgICAgKGVycixkYXRvKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKCFlcnIpe3Jlcy5qc29uKGRhdG8ucmVjb3Jkc2V0KTsgY2VycmFyQ29uZXhpb24oKSB9IGVsc2UgeyByZXMuanNvbih7bWVuc2FqZTplcnIubWVzc2FnZX0pOyBjZXJyYXJDb25leGlvbigpIH1cclxuICAgICAgICB9XHJcbiAgICApXHJcbn0pXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlciIsImNvbnN0IHtSb3V0ZXJ9ID0gcmVxdWlyZSgnZXhwcmVzcycpXHJcblxyXG5jb25zdCByb3V0ZXIgPSBSb3V0ZXIgKCAgKVxyXG5cclxuXHJcbnJvdXRlci5nZXQgKCAnLycgLCBhc3luYyAoIHJlcSAsIHJlcyApID0+IHtcclxuICAgIHZhciB7IGFicmlyQ29uZXhpb24gLCBjZXJyYXJDb25leGlvbiB9ID0gcmVxdWlyZSgnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInKVxyXG4gICAgYXdhaXQgYWJyaXJDb25leGlvbiAoICApXHJcbiAgICB2YXIgeyBSZXF1ZXN0IH0gPSByZXF1aXJlICgnbXNzcWwnKVxyXG4gICAgdmFyIGNvbnN1bHRhID0gbmV3IFJlcXVlc3QgKCAgKVxyXG4gICAgY29uc3VsdGEucXVlcnkgKFxyXG4gICAgICAgIGBzZWxlY3QgcG0uaWQgYXMgaWRQYXJhZGFNYXF1aW5hLCBwbS5ub21icmUgYXMgbm9tYnJlUGFyYWRhTWFxdWluYSwgcG0udGlwbyBhcyB0aXBvUGFyYWRhTWFxdWluYSAsIHBtLnNldHVwIGFzIHNldHVwUGFyYWRhTWFxdWluYSAsIHBtLmlkX2FyZWEgYXMgaWRBcmVhLCBhLm5vbWJyZSBhcyBub21icmVBcmVhXHJcbiAgICAgICAgZnJvbSBwYXJhZGFzX21hcXVpbmEgcG1cclxuXHRcdGpvaW4gYXJlYXMgYSBvbiBwbS5pZF9hcmVhPWEuaWRcclxuICAgICAgICB3aGVyZSBwbS5lc3RhZG8gPSAxYCxcclxuICAgICAgICAoIGUgLCBkYXRvICkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoICFlICl7XHJcbiAgICAgICAgICAgICAgICBjZXJyYXJDb25leGlvbiAoICApXHJcbiAgICAgICAgICAgICAgICByZXMuanNvbiAoIGRhdG8ucmVjb3Jkc2V0IClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHsgY2VycmFyQ29uZXhpb24gKCAgKVxyXG4gICAgICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgfSApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICApXHJcbn0pXHJcblxyXG5yb3V0ZXIucG9zdCAoICcvaW5zZXJ0JywgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IG5vbWJyZVBhcmFkYU1hcXVpbmEgLCB0aXBvUGFyYWRhTWFxdWluYSAsIHNldHVwUGFyYWRhTWFxdWluYSAsIGlkQXJlYSB9ID0gcmVxLmJvZHlcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIGNvbnN0IHsgUmVxdWVzdCAsIFZhckNoYXIgLCBJbnQgLCBCaXQgfSA9IHJlcXVpcmUgKCAnbXNzcWwnIClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdpbnNlcnRQYXJhZGFNYXF1aW5hJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ25vbWJyZVBhcmFkYU1hcXVpbmEnICwgVmFyQ2hhciAsIG5vbWJyZVBhcmFkYU1hcXVpbmEgKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICd0aXBvUGFyYWRhTWFxdWluYScgLCBCaXQgLCB0aXBvUGFyYWRhTWFxdWluYSApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2lkQXJlYScgLCBJbnQgLCBpZEFyZWEgKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdzZXR1cFBhcmFkYU1hcXVpbmEnICwgSW50ICwgc2V0dXBQYXJhZGFNYXF1aW5hIClcclxuICAgICAgICBjb25zdCBxdWVyeSA9IGBpbnNlcnQgaW50byBwYXJhZGFzX21hcXVpbmEgKCBub21icmUgLCB0aXBvICwgc2V0dXAgLCBpZF9hcmVhICwgZXN0YWRvIClcclxuICAgICAgICB2YWx1ZXNcclxuICAgICAgICAoIEBub21icmVQYXJhZGFNYXF1aW5hICwgQHRpcG9QYXJhZGFNYXF1aW5hICwgQHNldHVwUGFyYWRhTWFxdWluYSAsIEBpZEFyZWEgLCAxIClgXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdQYXJhZGEgZGUgTWFxdWluYSBJbnNlcnRhZG8gY29ycmVjdGFtZW50ZScgLCBzdGF0dXMgOiAyMDAgfSApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICAgIH1cclxufSApXHJcbnJvdXRlci5wdXQgKCAnL3VwZGF0ZScsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBpZFBhcmFkYU1hcXVpbmEgLCBub21icmVQYXJhZGFNYXF1aW5hICwgc2V0dXBQYXJhZGFNYXF1aW5hICwgdGlwb1BhcmFkYU1hcXVpbmEgLCBpZEFyZWEgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICBjb25zdCB7IFJlcXVlc3QgLCBWYXJDaGFyICwgSW50ICwgQml0IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAndXBkYXRlUGFyYWRhTWFxdWluYScgKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdub21icmVQYXJhZGFNYXF1aW5hJyAsIFZhckNoYXIgLCBub21icmVQYXJhZGFNYXF1aW5hIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAndGlwb1BhcmFkYU1hcXVpbmEnICwgQml0ICwgdGlwb1BhcmFkYU1hcXVpbmEgKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZEFyZWEnICwgSW50ICwgaWRBcmVhIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRQYXJhZGFNYXF1aW5hJyAsIEludCAsIGlkUGFyYWRhTWFxdWluYSApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ3NldHVwUGFyYWRhTWFxdWluYScgLCBJbnQgLCBzZXR1cFBhcmFkYU1hcXVpbmEgKVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gYHVwZGF0ZSBwYXJhZGFzX21hcXVpbmFcclxuICAgICAgICBzZXRcclxuICAgICAgICBub21icmUgPSBAbm9tYnJlUGFyYWRhTWFxdWluYSAsXHJcbiAgICAgICAgdGlwbyA9IEB0aXBvUGFyYWRhTWFxdWluYSAsXHJcbiAgICAgICAgc2V0dXAgPSBAc2V0dXBQYXJhZGFNYXF1aW5hICxcclxuICAgICAgICBpZF9hcmVhID0gQGlkQXJlYVxyXG4gICAgICAgIHdoZXJlIGlkID0gQGlkUGFyYWRhTWFxdWluYWBcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QucXVlcnkgKCBxdWVyeSApXHJcbiAgICAgICAgaWYgKCByZXN1bHQgKSB7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogJ1BhcmFkYSBkZSBtYXF1aW5hIGFjdHVhbGl6YWRhIGNvcnJlY3RhbWVudGUnICwgc3RhdHVzIDogMjAwIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgLCBzdGF0dXMgOiA0MDMgfSApXHJcbiAgICB9XHJcbn0pXHJcbnJvdXRlci5wdXQgKCAnL2RlbGV0ZScsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBpZFBhcmFkYU1hcXVpbmEgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICBjb25zdCB7IFJlcXVlc3QgLCBJbnQgfSA9IHJlcXVpcmUgKCAnbXNzcWwnIClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdkZWxldGVQYXJhZGFNYXF1aW5hJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2lkUGFyYWRhTWFxdWluYScgLCBJbnQgLCBpZFBhcmFkYU1hcXVpbmEgKVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gYHVwZGF0ZSBwYXJhZGFzX21hcXVpbmFcclxuICAgICAgICBzZXRcclxuICAgICAgICBlc3RhZG8gPSAwXHJcbiAgICAgICAgd2hlcmUgaWQgPSBAaWRQYXJhZGFNYXF1aW5hYFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnUGFyYWRhcyBkZSBNYXF1aW5hIGVsaW1pbmFkYSBjb3JyZWN0YW1lbnRlJyAsIHN0YXR1cyA6IDIwMCB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggKVxyXG4gICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZS5tZXNzYWdlICwgc3RhdHVzIDogNDAzIH0gKVxyXG4gICAgfVxyXG59KVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXIiLCJjb25zdCB7Um91dGVyfSA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxyXG5cclxuY29uc3Qgcm91dGVyID0gUm91dGVyICggIClcclxuXHJcbnJvdXRlci5nZXQgKCAnLycgLCBhc3luYyAocmVxLHJlcykgPT4ge1xyXG4gICAgY29uc3Qge2FicmlyQ29uZXhpb24sY2VycmFyQ29uZXhpb259ID0gcmVxdWlyZSgnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInKVxyXG4gICAgY29uc3Qge1JlcXVlc3R9ID0gIHJlcXVpcmUoJ21zc3FsJylcclxuICAgIGF3YWl0IGFicmlyQ29uZXhpb24oKVxyXG4gICAgdmFyIGNvbnN1bHRhID0gbmV3IFJlcXVlc3QoKVxyXG4gICAgY29uc3VsdGEucXVlcnkoXHJcbiAgICAgICAgYHNlbGVjdCB0LmlkIGFzIGlkVHJhYmFqYWRvciwgdC5ub21icmUgYXMgbm9tYnJlVHJhYmFqYWRvciwgdC5hcGVsbGlkbyBhcyBhcGVsbGlkb1RyYWJhamFkb3IsXHJcbiAgICAgICAgdC5mX25hY2ltaWVudG8gYXMgbmFjaW1pZW50b1RyYWJhamFkb3IsIHQuZl9pbmdyZXNvIGFzIGluZ3Jlc29UcmFiYWphZG9yLFxyXG4gICAgICAgIHQuaWRfcHVlc3RvIGFzIGlkUHVlc3RvLCBwLm5vbWJyZSBhcyBub21icmVQdWVzdG9cclxuICAgICAgICBmcm9tIHRyYWJhamFkb3JlcyB0XHJcbiAgICAgICAgam9pbiBwdWVzdG9zIHAgb24gdC5pZF9wdWVzdG89cC5pZFxyXG4gICAgICAgIHdoZXJlIHQuZXN0YWRvID0gMWAsXHJcbiAgICAgICAgKCBlcnIgLCBkYXRvICkgPT4ge1xyXG4gICAgICAgICAgICBpZighZXJyKXtyZXMuanNvbihkYXRvLnJlY29yZHNldCk7Y2VycmFyQ29uZXhpb24oKX1cclxuICAgICAgICAgICAgZWxzZSB7IHJlcy5qc29uKHttZW5zYWplOmVyci5tZXNzYWdlfSk7Y2VycmFyQ29uZXhpb24oKX1cclxuICAgICAgICB9XHJcbiAgICApXHJcbn0gKVxyXG5yb3V0ZXIucG9zdCAoICcvaW5zZXJ0JyAsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBub21icmVUcmFiYWphZG9yICwgYXBlbGxpZG9UcmFiYWphZG9yICwgbmFjaW1pZW50b1RyYWJhamFkb3IgLCBpbmdyZXNvVHJhYmFqYWRvciAsIGlkUHVlc3RvIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgTW9tZW50ID0gcmVxdWlyZSAgKCAnbW9tZW50JyApXHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAnaW5zZXJ0VHJhYmFqYWRvcicgKVxyXG4gICAgICAgIGNvbnN0IHsgUmVxdWVzdCAsIEludCAsIERhdGUgLCBWYXJDaGFyIH0gPSByZXF1aXJlICgnbXNzcWwnIClcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgUmVxdWVzdCAoIGNvbmV4aW9uIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnbm9tYnJlVHJhYmFqYWRvcicgLCBWYXJDaGFyICwgbm9tYnJlVHJhYmFqYWRvciApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2FwZWxsaWRvVHJhYmFqYWRvcicgLCBWYXJDaGFyICwgYXBlbGxpZG9UcmFiYWphZG9yIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnbmFjaW1pZW50b1RyYWJhamFkb3InICwgRGF0ZSAsICBuYWNpbWllbnRvVHJhYmFqYWRvciAgKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpbmdyZXNvVHJhYmFqYWRvcicgLCBEYXRlICwgIGluZ3Jlc29UcmFiYWphZG9yICApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2lkUHVlc3RvJyAsIEludCAsIGlkUHVlc3RvIClcclxuICAgICAgICBjb25zdCBxdWVyeSA9IGBzZXQgZGF0ZWZvcm1hdCBkbXkgOyBpbnNlcnQgaW50byB0cmFiYWphZG9yZXMgKCBub21icmUgLCBhcGVsbGlkbyAsIGZfbmFjaW1pZW50byAsIGZfaW5ncmVzbyAsIGlkX3B1ZXN0byAsIGVzdGFkbyApXHJcbiAgICAgICAgdmFsdWVzXHJcbiAgICAgICAgKCBAbm9tYnJlVHJhYmFqYWRvciAsIEBhcGVsbGlkb1RyYWJhamFkb3IgLCBAbmFjaW1pZW50b1RyYWJhamFkb3IgLCBAaW5ncmVzb1RyYWJhamFkb3IgLCBAaWRQdWVzdG8gLCAxIClgXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdUcmFiYWphZG9yIGluc2VydGFkbyBjb3JyZWN0YW1lbnRlJyAsIHN0YXR1cyA6IDIwMCB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICAgIH1cclxufSApXHJcblxyXG5yb3V0ZXIucHV0ICggJy91cGRhdGUnICwgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IGlkVHJhYmFqYWRvciAsIG5vbWJyZVRyYWJhamFkb3IgLCBhcGVsbGlkb1RyYWJhamFkb3IgLCBuYWNpbWllbnRvVHJhYmFqYWRvciAsIGluZ3Jlc29UcmFiYWphZG9yICwgaWRQdWVzdG8gfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAndXBkYXRlVHJhYmFqYWRvcicgKVxyXG4gICAgICAgIGNvbnN0IHsgUmVxdWVzdCAsIEludCAsIERhdGUgLCBWYXJDaGFyIH0gPSByZXF1aXJlICgnbXNzcWwnIClcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgUmVxdWVzdCAoIGNvbmV4aW9uIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnbm9tYnJlVHJhYmFqYWRvcicgLCBWYXJDaGFyICwgbm9tYnJlVHJhYmFqYWRvciApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2FwZWxsaWRvVHJhYmFqYWRvcicgLCBWYXJDaGFyICwgYXBlbGxpZG9UcmFiYWphZG9yIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnbmFjaW1pZW50b1RyYWJhamFkb3InICwgRGF0ZSAsIG5hY2ltaWVudG9UcmFiYWphZG9yIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnaW5ncmVzb1RyYWJhamFkb3InICwgRGF0ZSAsICBpbmdyZXNvVHJhYmFqYWRvciApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2lkUHVlc3RvJyAsIEludCAsIGlkUHVlc3RvIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRUcmFiYWphZG9yJyAsIEludCAsIGlkVHJhYmFqYWRvciApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgdXBkYXRlIHRyYWJhamFkb3Jlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9tYnJlID0gQG5vbWJyZVRyYWJhamFkb3IgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGVsbGlkbyA9IEBhcGVsbGlkb1RyYWJhamFkb3IgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmX25hY2ltaWVudG8gPSBAbmFjaW1pZW50b1RyYWJhamFkb3IgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmX2luZ3Jlc28gPSBAaW5ncmVzb1RyYWJhamFkb3IgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZF9wdWVzdG8gPSBAaWRQdWVzdG9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmUgaWQgPSBAaWRUcmFiYWphZG9yYFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnVHJhYmFqYWRvciBhY3R1YWxpemFkbyBjb3JyZWN0YW1lbnRlJyAsIHN0YXR1cyA6IDIwMCB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICAgIH1cclxufSApXHJcbnJvdXRlci5wdXQgKCAnL2RlbGV0ZScgLCBhc3luYyAoIHJlcSAsIHJlcyApID0+e1xyXG4gICAgY29uc3QgeyBpZFRyYWJhamFkb3IgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAnZGVsZXRlVHJhYmFqYWRvcicgKVxyXG4gICAgICAgIGNvbnN0IHsgUmVxdWVzdCAsIEludCB9ID0gcmVxdWlyZSAoJ21zc3FsJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2lkVHJhYmFqYWRvcicgLCBJbnQgLCBpZFRyYWJhamFkb3IgKVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gYHVwZGF0ZSB0cmFiYWphZG9yZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzdGFkbyA9IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmUgaWQgPSBAaWRUcmFiYWphZG9yYFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnVHJhYmFqYWRvciBlbGltaW5hZG8gY29ycmVjdGFtZW50ZScgLCBzdGF0dXMgOiAyMDAgfSApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgLCBzdGF0dXMgOiA0MDMgfSApXHJcbiAgICB9XHJcbn0gKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXJcclxuIiwiY29uc3Qge1JvdXRlcn0gPSByZXF1aXJlKCdleHByZXNzJylcclxuY29uc3QgTW9tZW50ID0gcmVxdWlyZSgnbW9tZW50JylcclxuY29uc3Qgcm91dGVyID0gUm91dGVyKClcclxuY29uc3QgY29udmllcnRlSG9yYSA9ICggaG9yYSApID0+IHtcclxuICAgIHZhciBIb3JJbmljaW9uTyA9IG5ldyBEYXRlKGAyMDIwLTAyLTE1VCR7aG9yYX06MDBgKVxyXG4gICAgSG9ySW5pY2lvbk8uc2V0SG91cnMoIEhvckluaWNpb25PLmdldEhvdXJzKCkgLSAzIClcclxuICAgIHJldHVybiBIb3JJbmljaW9uT1xyXG59XHJcbnJvdXRlci5wb3N0ICggJy9kZWxldGUnICwgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IGlkUGxhbmlsbGEgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICxjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIGNvbnN0IGNvbmV4aW9uQWJpZXJ0YSA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ2VsaW1pbmFQbGFuaWxsYScgKVxyXG4gICAgY29uc3QgeyBSZXF1ZXN0IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICBjb25zdCBjb25zdWx0YSA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb25BYmllcnRhIClcclxuICAgIHRyeXtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb25zdWx0YS5xdWVyeSggYHVwZGF0ZSBwbGFuaWxsYXNfcHJvZHVjY2lvblxyXG4gICAgICAgIHNldFxyXG4gICAgICAgIGVzdGFkbyA9IDBcclxuICAgICAgICB3aGVyZSBpZCA9ICR7IHBhcnNlSW50ICggaWRQbGFuaWxsYSApIH1gXHJcbiAgICAgICAgKVxyXG4gICAgICAgIGlmKHJlc3VsdCkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdFbGltaW5hY2lvbiBleGl0b3NhICEnIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgfSApXHJcbiAgICB9XHJcbn0pXHJcbnJvdXRlci5wb3N0KCAnL2xpc3RhcicsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICAgICAgICAgICAgZmVjaGFEZXNkZVByb2R1Y2Npb24gLCBmZWNoYUhhc3RhUHJvZHVjY2lvbiAsXHJcbiAgICAgICAgICAgICAgICBmZWNoYURlc2RlRnVuZGljaW9uICwgZmVjaGFIYXN0YUZ1bmRpY29uICwgaWRNYXF1aW5hICwgaWRQaWV6YSAsIGlkTW9sZGUgLGlkVGlwb1Byb2Nlc28gLCBpZE9wZXJhY2lvblxyXG4gICAgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIGNvbnN0IGNvbmV4aW9uQWJpZXJ0YSA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MKCAgKVxyXG4gICAgY29uc3QgeyBUcmFuc2FjdGlvbiAsIEludCB9ID0gcmVxdWlyZSggJ21zc3FsJyApXHJcbiAgICBjb25zdCB0cmFuc2FjY2lvbiA9IG5ldyBUcmFuc2FjdGlvbihjb25leGlvbkFiaWVydGEgKVxyXG4gICAgY29uc3QgeyBSZXF1ZXN0IH0gPSByZXF1aXJlKCAnbXNzcWwnIClcclxuICAgIGNvbnN0IG1zc3FsID0gcmVxdWlyZSggJ21zc3FsJyApXHJcbiAgICB0cmFuc2FjY2lvbi5iZWdpbiggYXN5bmMgZSA9PntcclxuICAgICAgICBpZiggZSApIHsgIHJlcy5qc29uKCB7IG1lbnNhamU6IGUubWVzc2FnZSB9ICkgIH1cclxuICAgICAgICBjb25zdCBzcWxDb25zdWx0YSA9IGBcclxuICAgICAgICBzZWxlY3QgcGwuaWQgYXMgaWRQbGFuaWxsYSwgcGwuZmVfY2FyZ2EgYXMgZmVjaGFDYXJnYSwgcGwuZmVfcHJvZHVjY2lvbiBhcyBmZWNoYVByb2R1Y2Npb24sIHBsLmZlX2Z1bmRpY2lvbiBhcyBmZWNoYUZ1bmRpY2lvbixcclxuICAgICAgICBwbC5ob3JhX2luaWNpbyBhcyBob3JhSW5pY2lvICwgcGwuaG9yYV9maW4gYXMgaG9yYUZpbiwgdG0uaWRfb3BlcmFjaW9uIGFzIGlkT3BlcmFjaW9uLCBtYXEuaWQgYXMgaWRNYXF1aW5hICxtYXEubm9tYnJlIGFzIG5vbWJyZU1hcXVpbmEgLCBwaWUuaWQgYXMgaWRQaWV6YSxcclxuICAgICAgICBwaWUubm9tYnJlIGFzIG5vbWJyZVBpZXphICwgbW9sLmlkIGFzIGlkTW9sZGUsICBtb2wubm9tYnJlIGFzIG5vbWJyZU1vbGRlICwgdHAuaWQgYXMgaWRUaXBvUHJvY2VzbywgdHAubm9tYnJlIGFzIHRpcG9Qcm9jZXNvXHJcbiAgICAgICAgLCBwbC5pZF9wcm9jZXNvIGFzIGlkUHJvY2Vzb1xyXG4gICAgICAgIGZyb20gcGxhbmlsbGFzX3Byb2R1Y2Npb24gcGxcclxuICAgICAgICBqb2luIG1vbGRlcyBtb2wgb24gcGwuaWRfbW9sZGUgPSBtb2wuaWRcclxuICAgICAgICBqb2luIHByb2Nlc29zIHAgb24gcGwuaWRfcHJvY2VzbyA9IHAuaWRcclxuICAgICAgICBqb2luIHBpZXphcyBwaWUgb24gcC5pZF9waWV6YSA9IHBpZS5pZFxyXG4gICAgICAgIGpvaW4gbWFxdWluYXMgbWFxIG9uIHAuaWRfbWFxdWluYSA9IG1hcS5pZFxyXG4gICAgICAgIGpvaW4gdGlwb3NfcHJvY2VzbyB0cCBvbiBwLmlkX3RpcG9zX3Byb2Nlc28gPSB0cC5pZFxyXG4gICAgICAgIGpvaW4gdGlwb3NfbWFxdWluYSB0bSBvbiBtYXEuaWRfdGlwb3NfbWFxdWluYSA9IHRtLmlkXHJcbiAgICAgICAgd2hlcmUgcGwuZXN0YWRvID0gMVxyXG4gICAgICAgIGFuZCAgcGwuZmVfZnVuZGljaW9uIGJldHdlZW4gQGZlY2hhRGVzZGVGdW5kaWNpb24gYW5kICBAZmVjaGFIYXN0YUZ1bmRpY29uXHJcbiAgICAgICAgYW5kICBwbC5mZV9wcm9kdWNjaW9uIGJldHdlZW4gIEBmZWNoYURlc2RlUHJvZHVjY2lvbiBhbmQgIEBmZWNoYUhhc3RhUHJvZHVjY2lvblxyXG4gICAgICAgIGFuZCAoICBAaWRNYXF1aW5hICBpcyBudWxsICBvciBwLmlkX21hcXVpbmEgPSAgQGlkTWFxdWluYSAgKVxyXG4gICAgICAgIGFuZCAoICBAaWRQaWV6YSAgaXMgbnVsbCAgb3IgcC5pZF9waWV6YSA9ICBAaWRQaWV6YSAgKVxyXG4gICAgICAgIGFuZCAoICBAaWRNb2xkZSAgaXMgbnVsbCAgb3IgcGwuaWRfbW9sZGUgPSAgQGlkTW9sZGUgIClcclxuICAgICAgICBhbmQgKCAgQGlkVGlwb1Byb2Nlc28gIGlzIG51bGwgIG9yIHAuaWRfdGlwb3NfcHJvY2VzbyA9ICBAaWRUaXBvUHJvY2VzbyAgKVxyXG4gICAgICAgIGFuZCAoICBAaWRPcGVyYWNpb24gIGlzIG51bGwgIG9yIHRtLmlkX29wZXJhY2lvbiA9ICAgQGlkT3BlcmFjaW9uICApIGBcclxuICAgICAgICBjb25zdCBjb25zdWx0YVBsYW5pbGxhID0gbmV3IFJlcXVlc3QoIHRyYW5zYWNjaW9uIClcclxuICAgICAgICBjb25zdWx0YVBsYW5pbGxhLmlucHV0KCAnZmVjaGFEZXNkZUZ1bmRpY2lvbicgLCBtc3NxbC5EYXRlICwgZmVjaGFEZXNkZUZ1bmRpY2lvbiApXHJcbiAgICAgICAgY29uc3VsdGFQbGFuaWxsYS5pbnB1dCggJ2ZlY2hhSGFzdGFGdW5kaWNvbicgLCBtc3NxbC5EYXRlICwgZmVjaGFIYXN0YUZ1bmRpY29uIClcclxuICAgICAgICBjb25zdWx0YVBsYW5pbGxhLmlucHV0KCAnZmVjaGFEZXNkZVByb2R1Y2Npb24nICwgbXNzcWwuRGF0ZSAsIGZlY2hhRGVzZGVQcm9kdWNjaW9uIClcclxuICAgICAgICBjb25zdWx0YVBsYW5pbGxhLmlucHV0KCAnZmVjaGFIYXN0YVByb2R1Y2Npb24nICwgbXNzcWwuRGF0ZSAsIGZlY2hhSGFzdGFQcm9kdWNjaW9uKVxyXG4gICAgICAgIGNvbnN1bHRhUGxhbmlsbGEuaW5wdXQoICdpZE1hcXVpbmEnICwgSW50ICwgaWRNYXF1aW5hID09PSAnJyA/IG51bGwgOiBwYXJzZUludCAoIGlkTWFxdWluYSApIClcclxuICAgICAgICBjb25zdWx0YVBsYW5pbGxhLmlucHV0KCAnaWRQaWV6YScgLCBJbnQgLCBpZFBpZXphID09PSAnJyA/IG51bGwgOiBwYXJzZUludCAoIGlkUGllemEgKSApXHJcbiAgICAgICAgY29uc3VsdGFQbGFuaWxsYS5pbnB1dCggJ2lkTW9sZGUnICwgSW50ICwgaWRNb2xkZSA9PT0gJycgPyBudWxsIDogcGFyc2VJbnQgKCAgaWRNb2xkZSApIClcclxuICAgICAgICBjb25zdWx0YVBsYW5pbGxhLmlucHV0KCAnaWRUaXBvUHJvY2VzbycgLCBJbnQgLCBpZFRpcG9Qcm9jZXNvID09PSAnJyA/IG51bGwgOiBwYXJzZUludCAoIGlkVGlwb1Byb2Nlc28gKSApXHJcbiAgICAgICAgY29uc3VsdGFQbGFuaWxsYS5pbnB1dCggJ2lkT3BlcmFjaW9uJyAsIEludCAsIGlkT3BlcmFjaW9uID09PSAnJyA/IG51bGwgOiBwYXJzZUludCAoICBpZE9wZXJhY2lvbiApIClcclxuICAgICAgICBjb25zdCBjb25zdWx0YU9wZXJhcmlvc1hwbGFuaWxsYSA9IG5ldyBSZXF1ZXN0KCB0cmFuc2FjY2lvbiApXHJcbiAgICAgICAgY29uc3QgY29uc3VsdGFSZWNoYXpvcyA9IG5ldyBSZXF1ZXN0KCB0cmFuc2FjY2lvbiApXHJcbiAgICAgICAgY29uc3QgY29uc3VsdGFab25hcyA9IG5ldyBSZXF1ZXN0KCB0cmFuc2FjY2lvbiApXHJcbiAgICAgICAgY29uc3QgY29uc3VsdGFQTSA9IG5ldyBSZXF1ZXN0KCB0cmFuc2FjY2lvbiApXHJcbiAgICAgICAgdmFyIHZlY1BsYW5pbGxhUHJvZHVjY2lvbiA9IFsgIF1cclxuICAgICAgICB2YXIgdmVjVHJhYmFqYWRvcmVzXHJcbiAgICAgICAgdmFyIHZlY1JlY2hhem9zXHJcbiAgICAgICAgdmFyIHZlY1pvbmFzXHJcbiAgICAgICAgdmFyIHZlY1BNXHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0UGxhbmlsbGFQcm9kdWNjaW9uID0gYXdhaXQgY29uc3VsdGFQbGFuaWxsYS5xdWVyeSggc3FsQ29uc3VsdGEgKVxyXG4gICAgICAgICAgICBpZihBcnJheS5pc0FycmF5KHJlc3VsdFBsYW5pbGxhUHJvZHVjY2lvbi5yZWNvcmRzZXQpKXtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFBsYW5pbGxhUHJvZHVjY2lvbi5yZWNvcmRzZXQuZm9yRWFjaCggcGxhID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGxhbmlsbGEgID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZFBsYW5pbGxhIDogcGxhLmlkUGxhbmlsbGEgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmZWNoYUNhcmdhIDogcGxhLmZlY2hhQ2FyZ2EgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmZWNoYVByb2R1Y2Npb24gOiBwbGEuZmVjaGFQcm9kdWNjaW9uICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmVjaGFGdW5kaWNpb24gOiBwbGEuZmVjaGFGdW5kaWNpb24gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBob3JhSW5pY2lvIDogbmV3IE1vbWVudCAoIHBsYS5ob3JhSW5pY2lvICkuZm9ybWF0KCBcIkhIOm1tXCIgKSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvcmFGaW4gOiBuZXcgTW9tZW50ICggIHBsYS5ob3JhRmluICkuZm9ybWF0KCBcIkhIOm1tXCIgKSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkT3BlcmFjaW9uIDogcGxhLmlkT3BlcmFjaW9uICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWRNYXF1aW5hIDogcGxhLmlkTWFxdWluYSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vbWJyZU1hcXVpbmEgOiBwbGEubm9tYnJlTWFxdWluYSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkUGllemEgOiBwbGEuaWRQaWV6YSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vbWJyZVBpZXphIDogcGxhLm5vbWJyZVBpZXphICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWRNb2xkZSA6IHBsYS5pZE1vbGRlICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9tYnJlTW9sZGUgOiBwbGEubm9tYnJlTW9sZGUgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZFRpcG9Qcm9jZXNvIDogcGxhLmlkVGlwb1Byb2Nlc28gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXBvUHJvY2VzbyA6IHBsYS50aXBvUHJvY2VzbyAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkUHJvY2VzbyA6IHBsYS5pZFByb2Nlc29cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmVjUGxhbmlsbGFQcm9kdWNjaW9uLnB1c2gocGxhbmlsbGEpXHJcbiAgICAgICAgICAgICAgICB9IClcclxuICAgICAgICAgICAgICAgIHZhciBsaXN0YUlkUGxhbmlsbGFzUHJvZHVjID0gJydcclxuICAgICAgICAgICAgICAgIHZlY1BsYW5pbGxhUHJvZHVjY2lvbi5mb3JFYWNoKChwbGEsaW5kZXhQbGFuaWxsYSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBpbmRleFBsYW5pbGxhID09PSAocmVzdWx0UGxhbmlsbGFQcm9kdWNjaW9uLnJlY29yZHNldC5sZW5ndGggLSAxKSl7IGxpc3RhSWRQbGFuaWxsYXNQcm9kdWMgKz0gYCR7cGFyc2VJbnQocGxhLmlkUGxhbmlsbGEpfSBgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNleyBsaXN0YUlkUGxhbmlsbGFzUHJvZHVjICs9IGAke3BhcnNlSW50KHBsYS5pZFBsYW5pbGxhKX0gLGAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGlmKCBsaXN0YUlkUGxhbmlsbGFzUHJvZHVjID09PSAnJyApeyBsaXN0YUlkUGxhbmlsbGFzUHJvZHVjID0gbnVsbCB9XHJcbiAgICAgICAgICAgICAgICB2YXIgc3FsQ29uc3VsdGFPcGVyYXJpb3NYcGxhbmlsbGEgPSBgc2VsZWN0IHR4cC5pZCBhcyBpZFRyYWJhamFkb3JYcGxhbmlsbGEgLCB0Lm5vbWJyZSBhcyBub21icmVUcmFiYWphZG9yLCB0LmFwZWxsaWRvIGFzIGFwZWxsaWRvVHJhYmFqYWRvciwgdHVyLmRlc2NyaXBjaW9uICBhcyB0dXJub1RyYWJhamFkb3IgLFxyXG4gICAgICAgICAgICAgICAgdHhwLmhvcmFfaW5pY2lvIGFzIGhvcmFJbmljaW8gLCB0eHAuaG9yYV9maW4gYXMgaG9yYUZpbiwgIHR4cC5wemFfcHJvZHVjaWRhcyBhcyBwaWV6YXNQcm9kdWNpZGFzICxcclxuICAgICAgICAgICAgICAgIHR4cC5jYWxvcmlhcyBhcyBjYWxvcmlhcyAsIHR4cC5pZF9wbGFuaWxsYSBhcyBpZFBsYW5pbGxhICwgdHhwLmlkX3RyYWJhamFkb3IgYXMgaWRUcmFiYWphZG9yICwgdHhwLmlkX3R1cm5vIGFzIGlkVHVybm9cclxuICAgICAgICAgICAgICAgIGZyb20gdHJhYmFqYWRvcl94X3BsYW5pbGxhIHR4cFxyXG4gICAgICAgICAgICAgICAgam9pbiB0cmFiYWphZG9yZXMgdCBvbiB0eHAuaWRfdHJhYmFqYWRvciA9IHQuaWRcclxuICAgICAgICAgICAgICAgIGpvaW4gdHVybm9zIHR1ciBvbiB0eHAuaWRfdHVybm8gPSB0dXIuaWRcclxuICAgICAgICAgICAgICAgIHdoZXJlIHR4cC5lc3RhZG8gPSAxXHJcbiAgICAgICAgICAgICAgICBhbmQgdHhwLmlkX3BsYW5pbGxhIGluICggJHsgbGlzdGFJZFBsYW5pbGxhc1Byb2R1YyB9ICkgIDsgYFxyXG4gICAgICAgICAgICAgICAgdmFyIHNxbENvbnN1bHRhUE0gPSBgIHNlbGVjdCBwbXhwLmlkIGFzIGlkUGFyYWRhTWFxdWluYVhwbGFuaWxsYSAsIHBtLmlkIGFzIGlkUGFyYWRhTWFxdWluYSAsIHBtLm5vbWJyZSBhcyBub21icmVQYXJhZGFNYXF1aW5hICxcclxuICAgICAgICAgICAgICAgIHBteHAuaG9yYV9pbmNpbyBhcyBob3JhSW5pY2lvUGFyYWRhTWFxdWluYSAsIHBteHAuaG9yYV9maW4gYXMgaG9yYUZpblBhcmFkYU1hcXVpbmEgLCBwbXhwLmlkX3BsYW5pbGxhIGFzIGlkUGxhbmlsbGEgLCBwbS50aXBvIGFzIHRpcG9QYXJhZGFNYXF1aW5hXHJcbiAgICAgICAgICAgICAgICBmcm9tIHBhcmFkYXNfbWFxdWluYXNfeF9wbGFuaWxsYSBwbXhwXHJcbiAgICAgICAgICAgICAgICBqb2luIHBhcmFkYXNfbWFxdWluYSBwbSBvbiBwbXhwLmlkX3BhcmFkYXNfbWFxdWluYSA9IHBtLmlkXHJcbiAgICAgICAgICAgICAgICB3aGVyZSBwbXhwLmVzdGFkbyA9IDFcclxuICAgICAgICAgICAgICAgIGFuZCBwbXhwLmlkX3BsYW5pbGxhIGluICggJHsgbGlzdGFJZFBsYW5pbGxhc1Byb2R1YyB9ICkgOyBgXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFiYWphZG9yZXNYcGxhbmlsbGEgPSBhd2FpdCAgY29uc3VsdGFPcGVyYXJpb3NYcGxhbmlsbGEucXVlcnkoIHNxbENvbnN1bHRhT3BlcmFyaW9zWHBsYW5pbGxhICsgc3FsQ29uc3VsdGFQTSApXHJcbiAgICAgICAgICAgICAgICBpZih0cmFiYWphZG9yZXNYcGxhbmlsbGEucmVjb3Jkc2V0c1swXSAmJiB0cmFiYWphZG9yZXNYcGxhbmlsbGEucmVjb3Jkc2V0c1sxXSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmVjVHJhYmFqYWRvcmVzID0gdHJhYmFqYWRvcmVzWHBsYW5pbGxhLnJlY29yZHNldHNbMF1cclxuICAgICAgICAgICAgICAgICAgICB2ZWNQTSA9IHRyYWJhamFkb3Jlc1hwbGFuaWxsYS5yZWNvcmRzZXRzWzFdXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpc3RhSWRUcmFiYWphZG9yZXMgPSAnJ1xyXG4gICAgICAgICAgICAgICAgICAgIHZlY1RyYWJhamFkb3Jlcy5mb3JFYWNoKCggdCAsIGkgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBpID09PSAoIHZlY1RyYWJhamFkb3Jlcy5sZW5ndGggLSAxKSl7IGxpc3RhSWRUcmFiYWphZG9yZXMgKz0gYCR7cGFyc2VJbnQodC5pZFRyYWJhamFkb3JYcGxhbmlsbGEpfSBgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXsgbGlzdGFJZFRyYWJhamFkb3JlcyArPSBgJHtwYXJzZUludCh0LmlkVHJhYmFqYWRvclhwbGFuaWxsYSl9ICxgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggbGlzdGFJZFRyYWJhamFkb3JlcyA9PT0gJycgKSB7IGxpc3RhSWRUcmFiYWphZG9yZXMgPSBudWxsIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3FsQ29uc3VsdGFSZWNoYXpvcyA9IGAgc2VsZWN0IHJ4dHlwLmlkIGFzIGlkUmVjaGF6b1h0cmFiYWphZG9yWXBsYW5pbGxhICwgZC5ub21icmUgYXMgbm9tYnJlUmVjaGF6byAsXHJcbiAgICAgICAgICAgICAgICAgICAgcnh0eXAudGlwbyBhcyB0aXBvUmVjaGF6byAsIHJ4dHlwLmNhbnRpZGFkIGFzIGNhbnRpZGFkUmVjaGF6b3MgLCByeHR5cC5pZF90cmFiYWphZG9yX3hfcGxhbmlsbGEgYXMgaWRUcmFiYWphZG9yWHBsYW5pbGxhICwgcnh0eXAuaWRfZGVmZWN0byBhcyBpZERlZmVjdG9cclxuICAgICAgICAgICAgICAgICAgICBmcm9tIHJlY2hhem9zX3hfdHJhYmFqYWRvcl95X3BsYW5pbGxhIHJ4dHlwXHJcbiAgICAgICAgICAgICAgICAgICAgam9pbiBkZWZlY3RvcyBkIG9uIHJ4dHlwLmlkX2RlZmVjdG8gPSBkLmlkXHJcbiAgICAgICAgICAgICAgICAgICAgd2hlcmUgcnh0eXAuZXN0YWRvID0gMVxyXG4gICAgICAgICAgICAgICAgICAgIGFuZCByeHR5cC5pZF90cmFiYWphZG9yX3hfcGxhbmlsbGEgaW4gKCAkeyBsaXN0YUlkVHJhYmFqYWRvcmVzIH0gKSA7IGBcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWNoYXpvcyA9IGF3YWl0IGNvbnN1bHRhUmVjaGF6b3MucXVlcnkoIHNxbENvbnN1bHRhUmVjaGF6b3MgKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCByZWNoYXpvcy5yZWNvcmRzZXQgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmVjUmVjaGF6b3MgPSByZWNoYXpvcy5yZWNvcmRzZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpc3RhSWRSZWNoYXpvcyA9ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY1JlY2hhem9zLmZvckVhY2goICggcmUgLCAgaW5kZXhSZWNoYXpvICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGluZGV4UmVjaGF6byA9PT0gKCB2ZWNSZWNoYXpvcy5sZW5ndGggLSAxKSl7IGxpc3RhSWRSZWNoYXpvcyArPSBgJHtwYXJzZUludCggcmUuaWRSZWNoYXpvWHRyYWJhamFkb3JZcGxhbmlsbGEgKX0gYCB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNleyBsaXN0YUlkUmVjaGF6b3MgKz0gYCR7cGFyc2VJbnQocmUuaWRSZWNoYXpvWHRyYWJhamFkb3JZcGxhbmlsbGEpfSAsYCB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGxpc3RhSWRSZWNoYXpvcyA9PT0gJycgKSB7IGxpc3RhSWRSZWNoYXpvcyA9IG51bGwgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcWxDb25zdWx0YVpvbmFzID0gYCBzZWxlY3QgenhyeXAuaWQgYXMgaWRab25hICwgenhyeXAubGV0cmEgYXMgbGV0cmFab25hICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgenhyeXAubnVtZXJvIGFzIG51bWVyb1pvbmEgLCB6eHJ5cC5jYW50aWRhZCBhcyBjYW50aWRhZFpvbmEgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB6eHJ5cC5pZF9yZWNoYXpvc194X3RyYWJhamFkb3JfeV9wbGFuaWxsYSBhcyBpZFJlY2hhem9zWHRyYWJhamFkb3JZcGxhbmlsbGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB6b25hc194X3JlY2hhem9feF9wbGFuaWxsYSB6eHJ5cFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVyZSB6eHJ5cC5lc3RhZG8gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB6eHJ5cC5pZF9yZWNoYXpvc194X3RyYWJhamFkb3JfeV9wbGFuaWxsYSBpbiAoICR7IGxpc3RhSWRSZWNoYXpvcyB9ICkgOyBgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlcmVuY2lhRW5NaW51dG9zID0gKGhvcmFJbmljaW8saG9yYUZpbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaF9pbmljaW8gPSBuZXcgTW9tZW50ICggIGhvcmFJbmljaW8gICkuZm9ybWF0ICggXCJISDptbVwiIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoX2ZpbiA9IG5ldyBNb21lbnQgKCAgaG9yYUZpbiAgKS5mb3JtYXQgKCBcIkhIOm1tXCIgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhEZXNkZSA9IG5ldyBEYXRlKGAxOTk1LTEyLTE3VDAzOiR7aF9pbmljaW99YClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoSGFzdGEgPSBuZXcgRGF0ZShgMTk5NS0xMi0xN1QwMzoke2hfZmlufWApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihoX2luaWNpbyA9PT0gJzA2OjAwJyAmJiBoX2ZpbiA9PT0gJzA2OjAwJyl7ICByZXR1cm4gMjQgKiA2MCAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZigoaEhhc3RhLWhEZXNkZSkvMTAwMCA8IDApeyByZXR1cm4gKGhIYXN0YS1oRGVzZGUpLzEwMDAgKyAxNDQwIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7IHJldHVybiAoaEhhc3RhLWhEZXNkZSkvMTAwMCB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpc3RhWm9uYXMgPSBhd2FpdCBjb25zdWx0YVpvbmFzLnF1ZXJ5KCBzcWxDb25zdWx0YVpvbmFzIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGxpc3RhWm9uYXMucmVjb3Jkc2V0ICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWNab25hcyA9IGxpc3RhWm9uYXMucmVjb3Jkc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWNQbGFuaWxsYVByb2R1Y2Npb24uZm9yRWFjaCggKHBsICwgaW5kZXhQbGFuaWxsYSApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbC52ZWNPcGVyYXJpb3MgPSBbXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsLnZlY1BhcmFkYXNNYXF1aW5hU2VsZWNjaW9uYWRhID0gW11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWNQTS5mb3JFYWNoKCBwbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwYXJzZUludCggcG0uaWRQbGFuaWxsYSApID09PSBwYXJzZUludCggcGwuaWRQbGFuaWxsYSApICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFkYU1hcSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZFBhcmFkYU1hcXVpbmFYcGxhbmlsbGE6IHBtLmlkUGFyYWRhTWFxdWluYVhwbGFuaWxsYSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRQYXJhZGFNYXF1aW5hIDogcG0uaWRQYXJhZGFNYXF1aW5hICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub21icmVQYXJhZGFNYXF1aW5hIDogcG0ubm9tYnJlUGFyYWRhTWFxdWluYSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzZGVQYXJhZGFNYXF1aW5hIDogbmV3IE1vbWVudCAoIHBtLmhvcmFJbmljaW9QYXJhZGFNYXF1aW5hICkuZm9ybWF0KCBcIkhIOm1tXCIgKSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzdGFQYXJhZGFNYXF1aW5hIDogbmV3IE1vbWVudCAoIHBtLmhvcmFGaW5QYXJhZGFNYXF1aW5hICkuZm9ybWF0KCBcIkhIOm1tXCIgKSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYWNpb25QYXJhZGFNYXF1aW5hIDogZGlyZXJlbmNpYUVuTWludXRvcyggcG0uaG9yYUluaWNpb1BhcmFkYU1hcXVpbmEgLCAgcG0uaG9yYUZpblBhcmFkYU1hcXVpbmEgKSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlwb1BhcmFkYU1hcXVpbmEgOiBwbS50aXBvUGFyYWRhTWFxdWluYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGwudmVjUGFyYWRhc01hcXVpbmFTZWxlY2Npb25hZGEucHVzaCggcGFyYWRhTWFxIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjVHJhYmFqYWRvcmVzLmZvckVhY2goICh0ciAsIGluZGV4VHJhYmFqYWRvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcnNlSW50KCBwbC5pZFBsYW5pbGxhICkgPT09IHBhcnNlSW50ICggdHIuaWRQbGFuaWxsYSApICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYVhwbGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRUcmFiYWphZG9yWHBsYW5pbGxhIDogdHIuaWRUcmFiYWphZG9yWHBsYW5pbGxhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkT3BlcmFyaW8gOiB0ci5pZFRyYWJhamFkb3IgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkVHVybm8gOiB0ci5pZFR1cm5vICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub21icmVUcmFiYWphZG9yIDogdHIubm9tYnJlVHJhYmFqYWRvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub21icmUgOiB0ci5pZFRyYWJhamFkb3IgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwZWxsaWRvVHJhYmFqYWRvciA6IHRyLmFwZWxsaWRvVHJhYmFqYWRvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dXJub1RyYWJhamFkb3IgOiB0ci50dXJub1RyYWJhamFkb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9yYUluaWNpbyA6IG5ldyBNb21lbnQgKCB0ci5ob3JhSW5pY2lvICkuZm9ybWF0KCBcIkhIOm1tXCIgKSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9yYUZpbiA6IG5ldyBNb21lbnQgKCB0ci5ob3JhRmluICkuZm9ybWF0KCBcIkhIOm1tXCIgKSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjY2lvbiA6IHRyLnBpZXphc1Byb2R1Y2lkYXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2Fsb3JpYXMgOiB0ci5jYWxvcmlhcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWNSZWNoYXpvIDogWyBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWNSZWNoYXpvcy5mb3JFYWNoKCByZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHBhcnNlSW50KCB0cmFYcGxhLmlkVHJhYmFqYWRvclhwbGFuaWxsYSApID09PSBwYXJzZUludCAoIHJlLmlkVHJhYmFqYWRvclhwbGFuaWxsYSApICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVjaCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkUmVjaGF6b1h0cmFiYWphZG9yWXBsYW5pbGxhIDogcmUuaWRSZWNoYXpvWHRyYWJhamFkb3JZcGxhbmlsbGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZFJlY2hhem8gOiByZS5pZERlZmVjdG8gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9tYnJlUmVjaGF6byA6IHJlLm5vbWJyZVJlY2hhem8gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlwbyA6IHJlLnRpcG9SZWNoYXpvICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnRpZGFkUmVjaGF6byA6IHJlLmNhbnRpZGFkUmVjaGF6b3MgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjWm9uYXM6IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY1pvbmFzLmZvckVhY2goIHpvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHBhcnNlSW50KCB6b24uaWRSZWNoYXpvc1h0cmFiYWphZG9yWXBsYW5pbGxhICkgPT09IHBhcnNlSW50KCByZWNoLmlkUmVjaGF6b1h0cmFiYWphZG9yWXBsYW5pbGxhICApKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHpvbmFYcmVjaGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZFpvbmEgOiB6b24uaWRab25hICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldHJhIDogem9uLmxldHJhWm9uYSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcm8gOiB6b24ubnVtZXJvWm9uYSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW50aWRhZCA6IHpvbi5jYW50aWRhZFpvbmFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNoLnZlY1pvbmFzLnB1c2goIHpvbmFYcmVjaGEgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYVhwbGEudmVjUmVjaGF6by5wdXNoKCByZWNoIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGwudmVjT3BlcmFyaW9zLnB1c2goIHRyYVhwbGEgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pICAvLyBob2xhIG11bmRvIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY2Npb24uY29tbWl0KCAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmpzb24oIHZlY1BsYW5pbGxhUHJvZHVjY2lvbiApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZSl7XHJcbiAgICAgICAgICAgIHRyYW5zYWNjaW9uLnJvbGxiYWNrKCAgKVxyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0woICApXHJcbiAgICAgICAgICAgIHJlcy5qc29uKCB7IG1lbnNhamU6IGUubWVzc2FnZSB9IClcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59KVxyXG5cclxucm91dGVyLnBvc3QoICcvdXBkYXRlJywgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICB2YXIgeyBmZWNoYVByb2R1Y2Npb24sIGZlY2hhRnVuZGljaW9uLCBpZFR1cm5vLCBIb3JhSW5pY2lvUHJvZHVjY2lvbixcclxuICAgICAgICBIb3JhRmluUHJvZHVjY2lvbiAsICBpZE9wZXJhY2lvbiAsIGlkTWFxdWluYSAsICBpZFBpZXphICwgIGlkTW9sZGUgLCBpZFRpcG9Qcm9jZXNvICxcclxuICAgICAgICB2ZWNPcGVyYXJpb3MgLCB2ZWNQYXJhZGFzTWFxdWluYVNlbGVjY2lvbmFkYSAsIGlkUGxhbmlsbGFcclxuICAgIH0gPSByZXEuYm9keVxyXG4gICAgY29uc29sZS5sb2cgKCBpZFBsYW5pbGxhIClcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIGNvbnN0IGNvbmV4aW9uQWJpZXJ0YSA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ3VwZGF0ZVBsYW5pbGxhJyApXHJcbiAgICBjb25zdCB7IFRyYW5zYWN0aW9uIH0gPSAgcmVxdWlyZSAoICdtc3NxbCcgKVxyXG4gICAgY29uc3QgbXNzcWwgID0gcmVxdWlyZSAoICdtc3NxbCcgKVxyXG4gICAgY29uc3QgeyBSZXF1ZXN0LFByZXBhcmVkU3RhdGVtZW50IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICBjb25zdCB0cmFuc2FjY2lvbiA9ICBhd2FpdCBuZXcgVHJhbnNhY3Rpb24gKCBjb25leGlvbkFiaWVydGEgKVxyXG4gICAgY29uc3QgcHNfaW5zZXJjaW9uUGxhbmlsbGFQcm9kdWNjaW9uID0gYXdhaXQgbmV3IFByZXBhcmVkU3RhdGVtZW50ICggdHJhbnNhY2Npb24gKVxyXG4gICAgY29uc3QgZGVsZXRlWm9uYXNSZWNoYXpvc09wZXJhcmlvc1BtID0gYXdhaXQgbmV3IFJlcXVlc3QgKCB0cmFuc2FjY2lvbiApXHJcbiAgICBjb25zdCBhc2luY3Jvbm8gPSByZXF1aXJlICggJ2FzeW5jJyApXHJcbiAgICB0cmFuc2FjY2lvbi5iZWdpbiAoIGFzeW5jIGZ1bmN0aW9uICggZXJyICkgIHtcclxuICAgICAgICBpZiAoICFlcnIgKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldG9kb1RyYW5zYWNjaW9uID0gIGFzeW5jICggICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHREZWxldGUgPSBhd2FpdCBkZWxldGVab25hc1JlY2hhem9zT3BlcmFyaW9zUG0ucXVlcnkoYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgem9uYXNfeF9yZWNoYXpvX3hfcGxhbmlsbGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmUgaWRfcmVjaGF6b3NfeF90cmFiYWphZG9yX3lfcGxhbmlsbGEgaW4gKCAoc2VsZWN0IHIuaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSByZWNoYXpvc194X3RyYWJhamFkb3JfeV9wbGFuaWxsYSByXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlIHIuaWRfdHJhYmFqYWRvcl94X3BsYW5pbGxhIGluICggKCBzZWxlY3QgdC5pZCBmcm9tIHRyYWJhamFkb3JfeF9wbGFuaWxsYSB0IHdoZXJlIHQuaWRfcGxhbmlsbGEgPSAke2lkUGxhbmlsbGF9ICkgKSApICkgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVjaGF6b3NfeF90cmFiYWphZG9yX3lfcGxhbmlsbGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmUgaWRfdHJhYmFqYWRvcl94X3BsYW5pbGxhIGluICggKCBzZWxlY3QgdC5pZCBmcm9tIHRyYWJhamFkb3JfeF9wbGFuaWxsYSB0IHdoZXJlIHQuaWRfcGxhbmlsbGEgPSAke2lkUGxhbmlsbGF9ICkgKSA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0cmFiYWphZG9yX3hfcGxhbmlsbGEgd2hlcmUgaWRfcGxhbmlsbGEgPSAke2lkUGxhbmlsbGF9IDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBhcmFkYXNfbWFxdWluYXNfeF9wbGFuaWxsYSB3aGVyZSBpZF9wbGFuaWxsYSA9ICR7aWRQbGFuaWxsYX0gO1xyXG4gICAgICAgICAgICAgICAgICAgIGApXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCByZXN1bHREZWxldGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBzX2luc2VyY2lvblBsYW5pbGxhUHJvZHVjY2lvbi5pbnB1dCAoICdmZV9wcm9kdWNjaW9uJyAsIG1zc3FsLkRhdGUgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwc19pbnNlcmNpb25QbGFuaWxsYVByb2R1Y2Npb24uaW5wdXQgKCAnZmVfZnVuZGljaW9uJyAsIG1zc3FsLkRhdGUgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwc19pbnNlcmNpb25QbGFuaWxsYVByb2R1Y2Npb24uaW5wdXQgKCAnaG9yYV9pbmljaW8nICwgbXNzcWwuVGltZSApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBzX2luc2VyY2lvblBsYW5pbGxhUHJvZHVjY2lvbi5pbnB1dCAoICdob3JhX2ZpbicgLCBtc3NxbC5UaW1lIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHNfaW5zZXJjaW9uUGxhbmlsbGFQcm9kdWNjaW9uLmlucHV0ICggJ2lkX21vbGRlJyAsIG1zc3FsLkludCApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBzX2luc2VyY2lvblBsYW5pbGxhUHJvZHVjY2lvbi5pbnB1dCAoICdpZFBsYW5pbGxhJyAsIG1zc3FsLkludCApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHBzX2luc2VyY2lvblBsYW5pbGxhUHJvZHVjY2lvbi5wcmVwYXJlIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBzZXQgZGF0ZWZvcm1hdCBkbXkgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjbGFyZSBAaWRQcm9jZSBpbnQgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0IEBpZFByb2NlID0gKHNlbGVjdCB0b3AgMSBpZCBmcm9tIHByb2Nlc29zIHAgIHdoZXJlIHAuaWRfbWFxdWluYSA9ICR7IGlkTWFxdWluYSB9IGFuZCBwLmlkX3BpZXphID0gJHsgaWRQaWV6YSB9IGFuZCBpZF90aXBvc19wcm9jZXNvID0gJHsgaWRUaXBvUHJvY2VzbyB9ICkgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlIHBsYW5pbGxhc19wcm9kdWNjaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlX3Byb2R1Y2Npb24gPSBAZmVfcHJvZHVjY2lvbiAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZV9mdW5kaWNpb24gPSBAZmVfZnVuZGljaW9uICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvcmFfaW5pY2lvID0gQGhvcmFfaW5pY2lvICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvcmFfZmluID0gQGhvcmFfZmluICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkX3Byb2Nlc28gPSBAaWRQcm9jZSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZF9tb2xkZSA9IEBpZF9tb2xkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmUgaWQgPSBAaWRQbGFuaWxsYWBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRvc1BsYW5pbGxhUHJvZHVjY2lvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlX3Byb2R1Y2Npb246IGZlY2hhUHJvZHVjY2lvbiAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZV9mdW5kaWNpb246IGZlY2hhRnVuZGljaW9uICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvcmFfaW5pY2lvOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jz8gY29udmllcnRlSG9yYSggSG9yYUluaWNpb1Byb2R1Y2Npb24gKSA6IG5ldyBEYXRlKGAyMDIwLTAyLTE1VCR7SG9yYUluaWNpb1Byb2R1Y2Npb259OjAwYCkgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9yYV9maW46IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnPyBjb252aWVydGVIb3JhKCBIb3JhRmluUHJvZHVjY2lvbiApIDogbmV3IERhdGUoYDIwMjAtMDItMTVUJHtIb3JhRmluUHJvZHVjY2lvbn06MDBgKSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZF90dXJubzogcGFyc2VJbnQoIGlkVHVybm8gKSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZF9tb2xkZTogcGFyc2VJbnQoIGlkTW9sZGUgKSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZFBsYW5pbGxhIDogcGFyc2VJbnQgKCBpZFBsYW5pbGxhIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0QzFcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0QzEgPSBhd2FpdCBwc19pbnNlcmNpb25QbGFuaWxsYVByb2R1Y2Npb24uZXhlY3V0ZSAoIGRhdG9zUGxhbmlsbGFQcm9kdWNjaW9uIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdW5wcmVwYXJlZCA9IGF3YWl0IHBzX2luc2VyY2lvblBsYW5pbGxhUHJvZHVjY2lvbi51bnByZXBhcmUgKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHVucHJlcGFyZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjY2lvbi5yb2xsYmFjayAoICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnRXJyb3IgSW5zZXJjaW9uUGxhbmlsbGEnIH0gKS5zdGF0dXMgKCA0MDMgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcmVzdWx0QzEgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmVjT3BlcmFyaW9zWHBsYW5pbGxhID0gWyAgXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjT3BlcmFyaW9zLmZvckVhY2ggKCBvcGVyYXJpbyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxvcmlhcyA6IHBhcnNlSW50ICggb3BlcmFyaW8uY2Fsb3JpYXMgKSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB6YV9wcm9kdWNpZGFzIDogcGFyc2VJbnQgKCBvcGVyYXJpby5wcm9kdWNjaW9uICkgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3JhX2luaWNpbzogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCc/IGNvbnZpZXJ0ZUhvcmEoIG9wZXJhcmlvLmhvcmFJbmljaW8gKSA6IG5ldyBEYXRlKGAyMDIwLTAyLTE1VCR7b3BlcmFyaW8uaG9yYUluaWNpb306MDBgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9yYV9maW46IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnPyBjb252aWVydGVIb3JhKCBvcGVyYXJpby5ob3JhRmluICkgOiBuZXcgRGF0ZShgMjAyMC0wMi0xNVQke29wZXJhcmlvLmhvcmFGaW59OjAwYCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkX3RyYWJhamFkb3I6IHBhcnNlSW50ICggb3BlcmFyaW8uaWRPcGVyYXJpbyApICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRfcGxhbmlsbGE6IHBhcnNlSW50ICggaWRQbGFuaWxsYSApICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRfdHVybm86IHBhcnNlSW50KCBvcGVyYXJpby5pZFR1cm5vICkgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWNSZWNoYXpvczogb3BlcmFyaW8udmVjUmVjaGF6b1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWNPcGVyYXJpb3NYcGxhbmlsbGEucHVzaCAoIG9wIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc2luY3Jvbm8uZWFjaFNlcmllcyAoIHZlY09wZXJhcmlvc1hwbGFuaWxsYSAsICggdHJhYmFqYWRvciAsIGNhbGxiYWNrICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0ICBwc19pbnNlcmNpb25UcmFiYWphZG9yZXNYUGxhbmlsbGEgPSBuZXcgUmVxdWVzdCggdHJhbnNhY2Npb24gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBzX2luc2VyY2lvblRyYWJhamFkb3Jlc1hQbGFuaWxsYS5pbnB1dCAoICdjYWxvcmlhcycgLCBtc3NxbC5JbnQgLCB0cmFiYWphZG9yLmNhbG9yaWFzIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwc19pbnNlcmNpb25UcmFiYWphZG9yZXNYUGxhbmlsbGEuaW5wdXQgKCAncHphX3Byb2R1Y2lkYXMnICwgbXNzcWwuSW50ICwgdHJhYmFqYWRvci5wemFfcHJvZHVjaWRhcyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHNfaW5zZXJjaW9uVHJhYmFqYWRvcmVzWFBsYW5pbGxhLmlucHV0ICggJ2lkX3R1cm5vJyAsIG1zc3FsLkludCAsIHRyYWJhamFkb3IuaWRfdHVybm8gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBzX2luc2VyY2lvblRyYWJhamFkb3Jlc1hQbGFuaWxsYS5pbnB1dCAoICdob3JhX2luaWNpbycgLCBtc3NxbC5UaW1lICwgdHJhYmFqYWRvci5ob3JhX2luaWNpbyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHNfaW5zZXJjaW9uVHJhYmFqYWRvcmVzWFBsYW5pbGxhLmlucHV0ICggJ2hvcmFfZmluJywgbXNzcWwuVGltZSAsIHRyYWJhamFkb3IuaG9yYV9maW4gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBzX2luc2VyY2lvblRyYWJhamFkb3Jlc1hQbGFuaWxsYS5pbnB1dCAoICdpZF90cmFiYWphZG9yJyAsIG1zc3FsLkludCAsIHRyYWJhamFkb3IuaWRfdHJhYmFqYWRvciApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHNfaW5zZXJjaW9uVHJhYmFqYWRvcmVzWFBsYW5pbGxhLmlucHV0ICggJ2lkX3BsYW5pbGxhJyAsIG1zc3FsLkludCAsIHRyYWJhamFkb3IuaWRfcGxhbmlsbGEgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2ZWNSZWNoYXpvc1RyYWJhamFkb3JYcGxhbmlsbGEgPSBbICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhYmFqYWRvci52ZWNSZWNoYXpvcy5mb3JFYWNoICggcmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVjaGF6b1ogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW50aWRhZCA6IHBhcnNlSW50ICggcmUuY2FudGlkYWRSZWNoYXpvICkgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlwbzogcmUudGlwbyA/IDEgOiAwICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkX2RlZmVjdG8gOiBwYXJzZUludCAoIHJlLmlkUmVjaGF6byApICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY1pvbmFzIDogcmUudmVjWm9uYXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWNSZWNoYXpvc1RyYWJhamFkb3JYcGxhbmlsbGEucHVzaCAoIHJlY2hhem9aIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb25zdWx0YSA9IGBpbnNlcnQgaW50byB0cmFiYWphZG9yX3hfcGxhbmlsbGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2Fsb3JpYXMgLCBwemFfcHJvZHVjaWRhcywgaWRfdHVybm8gLCBob3JhX2luaWNpbyAsIGhvcmFfZmluICwgaWRfdHJhYmFqYWRvciAsIGlkX3BsYW5pbGxhICwgZXN0YWRvKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChAY2Fsb3JpYXMgLCBAcHphX3Byb2R1Y2lkYXMgLCBAaWRfdHVybm8gLCBAaG9yYV9pbmljaW8gLCBAaG9yYV9maW4gLCBAaWRfdHJhYmFqYWRvciAsIEBpZF9wbGFuaWxsYSAsIDEpIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNsYXJlIEBpZF90cmFiYWphZG9yX3hfcGxhbmlsbGEgaW50IDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNsYXJlIEBpZF9yZWNoYXpvc194X3RyYWJhamFkb3JfeV9wbGFuaWxsYSBpbnQgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCBAaWRfdHJhYmFqYWRvcl94X3BsYW5pbGxhID0gKCBzZWxlY3QgbWF4KCBpZCApIGFzIGlkVHJhYmFqYWRvclhwbGFuaWxsYSBmcm9tIHRyYWJhamFkb3JfeF9wbGFuaWxsYSApIDsgYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY1JlY2hhem9zVHJhYmFqYWRvclhwbGFuaWxsYS5mb3JFYWNoICggcmVjaGF6byA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bHRhICs9IGBpbnNlcnQgaW50byByZWNoYXpvc194X3RyYWJhamFkb3JfeV9wbGFuaWxsYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2FudGlkYWQgLCB0aXBvICwgaWRfZGVmZWN0byAsIGlkX3RyYWJhamFkb3JfeF9wbGFuaWxsYSAsIGVzdGFkbylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggJHsgcmVjaGF6by5jYW50aWRhZCB9LCAkeyByZWNoYXpvLnRpcG8gfSAsICR7IHJlY2hhem8uaWRfZGVmZWN0byB9ICwgQGlkX3RyYWJhamFkb3JfeF9wbGFuaWxsYSAsMSkgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgQGlkX3JlY2hhem9zX3hfdHJhYmFqYWRvcl95X3BsYW5pbGxhID0gKHNlbGVjdCBtYXgoaWQpIGZyb20gcmVjaGF6b3NfeF90cmFiYWphZG9yX3lfcGxhbmlsbGEpIDsgYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmVjWm9uYXNYcmVjaGF6byA9IFsgIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjaGF6by52ZWNab25hcy5mb3JFYWNoICggem9uYSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgem9vID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnRpZGFkIDogcGFyc2VJbnQgKCB6b25hLmNhbnRpZGFkICkgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldHJhIDogem9uYS5sZXRyYSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJvIDogcGFyc2VJbnQgKCB6b25hLm51bWVybyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWNab25hc1hyZWNoYXpvLnB1c2goIHpvbyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY1pvbmFzWHJlY2hhem8uZm9yRWFjaCAoIHpvbmEgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3VsdGEgKz0gYCBpbnNlcnQgaW50byB6b25hc194X3JlY2hhem9feF9wbGFuaWxsYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNhbnRpZGFkICwgbGV0cmEgLCBudW1lcm8gLCBpZF9yZWNoYXpvc194X3RyYWJhamFkb3JfeV9wbGFuaWxsYSAsIGVzdGFkbyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggJHsgem9uYS5jYW50aWRhZCB9ICwgJyR7IHpvbmEubGV0cmEgfScgLCAkeyB6b25hLm51bWVybyB9ICwgQGlkX3JlY2hhem9zX3hfdHJhYmFqYWRvcl95X3BsYW5pbGxhICwgMSApIDsgYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHNfaW5zZXJjaW9uVHJhYmFqYWRvcmVzWFBsYW5pbGxhLnF1ZXJ5ICggY29uc3VsdGEgLCAoIGVyciAsIHJlc3VsdCApID0+IHsgaWYgKCBlcnIgKSB7ICBjYWxsYmFjayAoIGVyciApIH0gZWxzZSB7IGNhbGxiYWNrICggICkgfSB9IClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLCAoIGVyciApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGVyciApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY2Npb24ucm9sbGJhY2sgKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGVyci5tZXNzYWdlIH0gKS5zdGF0dXMgKCA0MDMgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZlY1BhcmFkYXNEZU1hcXVpbmEgPSBbICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY1BhcmFkYXNNYXF1aW5hU2VsZWNjaW9uYWRhLmZvckVhY2ggKCBwbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFNQUMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvcmFfaW5pY2lvOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jz8gY29udmllcnRlSG9yYSggcG0uZGVzZGVQYXJhZGFNYXF1aW5hICkgOiBuZXcgRGF0ZShgMjAyMC0wMi0xNVQke3BtLmRlc2RlUGFyYWRhTWFxdWluYX06MDBgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9yYV9maW46IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnPyBjb252aWVydGVIb3JhKCBwbS5oYXN0YVBhcmFkYU1hcXVpbmEgKSA6IG5ldyBEYXRlKGAyMDIwLTAyLTE1VCR7cG0uaGFzdGFQYXJhZGFNYXF1aW5hfTowMGApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZF9wYXJhZGFzX21hcXVpbmE6IHBhcnNlSW50KCBwbS5pZFBhcmFkYU1hcXVpbmEgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRfcGxhbmlsbGE6IGlkUGxhbmlsbGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjUGFyYWRhc0RlTWFxdWluYS5wdXNoICggcGFyYU1BQyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzaW5jcm9uby5lYWNoU2VyaWVzICggdmVjUGFyYWRhc0RlTWFxdWluYSAsICggUE0gLCBjYWxsYmFja1BNICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29uc3VsdGFJbnNlcmNpb25QYXJhZGFzRGVNYXF1aW5hID0gIG5ldyBSZXF1ZXN0ICggdHJhbnNhY2Npb24gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3VsdGFJbnNlcmNpb25QYXJhZGFzRGVNYXF1aW5hLmlucHV0ICggJ2hvcmFfaW5jaW8nICwgbXNzcWwuVGltZSAsIFBNLmhvcmFfaW5pY2lvIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bHRhSW5zZXJjaW9uUGFyYWRhc0RlTWFxdWluYS5pbnB1dCAoICdob3JhX2ZpbicgLCBtc3NxbC5UaW1lICwgUE0uaG9yYV9maW4gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3VsdGFJbnNlcmNpb25QYXJhZGFzRGVNYXF1aW5hLmlucHV0ICggJ2lkX3BhcmFkYXNfbWFxdWluYScgLCBtc3NxbC5JbnQgLCBQTS5pZF9wYXJhZGFzX21hcXVpbmEgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3VsdGFJbnNlcmNpb25QYXJhZGFzRGVNYXF1aW5hLmlucHV0ICggJ2lkX3BsYW5pbGxhJyAsIG1zc3FsLkludCAsIFBNLmlkX3BsYW5pbGxhIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bHRhSW5zZXJjaW9uUGFyYWRhc0RlTWFxdWluYS5xdWVyeSAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGluc2VydCBpbnRvIHBhcmFkYXNfbWFxdWluYXNfeF9wbGFuaWxsYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggaG9yYV9pbmNpbyAsIGhvcmFfZmluICwgaWRfcGFyYWRhc19tYXF1aW5hICwgaWRfcGxhbmlsbGEgLCBlc3RhZG8gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggQGhvcmFfaW5jaW8gLCBAaG9yYV9maW4gLCBAaWRfcGFyYWRhc19tYXF1aW5hICwgQGlkX3BsYW5pbGxhICwgMSApYCAsICggRVIgLCByZXN1bHRQTSApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggRVIgKSB7IGNhbGxiYWNrUE0oIEVSICkgfSBlbHNlIHsgY2FsbGJhY2tQTSggICkgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAsIGVycm9SID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZXJyb1IgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY2Npb24ucm9sbGJhY2sgKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlcnJvUi5tZXNzYWdlIH0gKS5zdGF0dXMgKCA0MDMgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY2Npb24uY29tbWl0ICggIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5zZXRIZWFkZXIgKCAnQ29udGVudC1UeXBlJyAsICd0ZXh0L2V2ZW50LXN0cmVhbScgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMgKCAyMDAgKS5qc29uICggeyBtZW5zYWplIDogJ0FjdHVhbGl6YWNpb24gZXhpdG9zYScgfSApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWNjaW9uLnJvbGxiYWNrICggIClcclxuICAgICAgICAgICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5qc29uKCB7IG1lbnNhamU6IGUubWVzc2FnZSAsIG1lbnNhamUyOiAnRXJyb3IgY2F0Y2ggRklOQUwnIH0gKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1ldG9kb1RyYW5zYWNjaW9uKClcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coICdlcnIgY29tbWl0JyApXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufSApXHJcbnJvdXRlci5wb3N0KCAnL2luc2VydCcsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgdmFyIHsgZmVjaGFQcm9kdWNjaW9uLCBmZWNoYUZ1bmRpY2lvbiwgaWRUdXJubywgSG9yYUluaWNpb1Byb2R1Y2Npb24sXHJcbiAgICAgICAgSG9yYUZpblByb2R1Y2Npb24sICBpZE9wZXJhY2lvbiwgaWRNYXF1aW5hLCAgaWRQaWV6YSwgIGlkTW9sZGUsIGlkVGlwb1Byb2Nlc28sXHJcbiAgICAgICAgdmVjT3BlcmFyaW9zLCB2ZWNQYXJhZGFzTWFxdWluYVNlbGVjY2lvbmFkYVxyXG4gICAgfSA9IHJlcS5ib2R5XHJcbiAgICB2YXIgIGlkUGxhbmlsbGFQcm9kdWNjaW9uXHJcbiAgICBjb25zdCB7YWJyaXJDb25leGlvblBPT0wsIGNlcnJhckNvbmV4aW9uUE9PTH0gPSByZXF1aXJlKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIGNvbnN0IGNvbmV4aW9uQWJpZXJ0YSA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MKCAnY29uc3VsdGFzYScgKVxyXG4gICAgY29uc3QgeyBUcmFuc2FjdGlvbiB9ID0gIHJlcXVpcmUoICdtc3NxbCcgKVxyXG4gICAgY29uc3QgbXNzcWwgID0gcmVxdWlyZSggJ21zc3FsJyApXHJcbiAgICBjb25zdCB7IFJlcXVlc3QsUHJlcGFyZWRTdGF0ZW1lbnQgfSA9IHJlcXVpcmUoICdtc3NxbCcgKVxyXG4gICAgY29uc3QgdHJhbnNhY2Npb24gPSAgYXdhaXQgbmV3IFRyYW5zYWN0aW9uKCBjb25leGlvbkFiaWVydGEgKVxyXG4gICAgY29uc3QgcHNfaW5zZXJjaW9uUGxhbmlsbGFQcm9kdWNjaW9uID0gYXdhaXQgbmV3IFByZXBhcmVkU3RhdGVtZW50KCB0cmFuc2FjY2lvbiApXHJcbiAgICBjb25zdCBjb25zdWx0YUlEcGxhbmlsbGFQcm9kdWNjaW9uID0gYXdhaXQgbmV3IFJlcXVlc3QoIHRyYW5zYWNjaW9uIClcclxuICAgIGNvbnN0IGFzaW5jcm9ubyA9IHJlcXVpcmUoICdhc3luYycgKVxyXG4gICAgdHJhbnNhY2Npb24uYmVnaW4oYXN5bmMgZnVuY3Rpb24gKCBlcnIgKSAge1xyXG4gICAgICAgIGlmKCFlcnIpe1xyXG4gICAgICAgICAgICBjb25zdCBtZXRvZG9UcmFuc2FjY2lvbiA9ICBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgICAgICAgICAgcHNfaW5zZXJjaW9uUGxhbmlsbGFQcm9kdWNjaW9uLmlucHV0KCAnZmVfcHJvZHVjY2lvbicsbXNzcWwuRGF0ZSApXHJcbiAgICAgICAgICAgICAgICAgICAgcHNfaW5zZXJjaW9uUGxhbmlsbGFQcm9kdWNjaW9uLmlucHV0KCAnZmVfZnVuZGljaW9uJyxtc3NxbC5EYXRlIClcclxuICAgICAgICAgICAgICAgICAgICBwc19pbnNlcmNpb25QbGFuaWxsYVByb2R1Y2Npb24uaW5wdXQoICdob3JhX2luaWNpbycsbXNzcWwuVGltZSApXHJcbiAgICAgICAgICAgICAgICAgICAgcHNfaW5zZXJjaW9uUGxhbmlsbGFQcm9kdWNjaW9uLmlucHV0KCAnaG9yYV9maW4nLG1zc3FsLlRpbWUgKVxyXG4gICAgICAgICAgICAgICAgICAgIHBzX2luc2VyY2lvblBsYW5pbGxhUHJvZHVjY2lvbi5pbnB1dCggJ2lkX21vbGRlJyxtc3NxbC5JbnQgKVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHBzX2luc2VyY2lvblBsYW5pbGxhUHJvZHVjY2lvbi5wcmVwYXJlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBgc2V0IGRhdGVmb3JtYXQgZG15IDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVjbGFyZSBAaWRQcm9jZSBpbnQgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQgQGlkUHJvY2UgPSAoc2VsZWN0IHRvcCAxIGlkIGZyb20gcHJvY2Vzb3MgcCAgd2hlcmUgcC5pZF9tYXF1aW5hID0gJHsgaWRNYXF1aW5hIH0gYW5kIHAuaWRfcGllemEgPSAkeyBpZFBpZXphIH0gYW5kIGlkX3RpcG9zX3Byb2Nlc28gPSAkeyBpZFRpcG9Qcm9jZXNvIH0gYW5kIGVzdGFkbyA9IDEgKSA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydCBpbnRvIHBsYW5pbGxhc19wcm9kdWNjaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICggZmVfY2FyZ2EgLCBmZV9wcm9kdWNjaW9uICwgZmVfZnVuZGljaW9uICwgaG9yYV9pbmljaW8gLCBob3JhX2ZpbiAsIGlkX3Byb2Nlc28gLCBpZF9tb2xkZSAgLCBlc3RhZG8gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgKCBHRVREQVRFKCkgLCBAZmVfcHJvZHVjY2lvbiAsIEBmZV9mdW5kaWNpb24gLCBAaG9yYV9pbmljaW8gLCBAaG9yYV9maW4gLCBAaWRQcm9jZSAsIEBpZF9tb2xkZSAsIDEgKWBcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0b3NQbGFuaWxsYVByb2R1Y2Npb24gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlX3Byb2R1Y2Npb246IGZlY2hhUHJvZHVjY2lvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmVfZnVuZGljaW9uOiBmZWNoYUZ1bmRpY2lvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9yYV9pbmljaW86IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnPyBjb252aWVydGVIb3JhKCBIb3JhSW5pY2lvUHJvZHVjY2lvbiApIDogbmV3IERhdGUoYDIwMjAtMDItMTVUJHtIb3JhSW5pY2lvUHJvZHVjY2lvbn06MDBgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9yYV9maW46IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnPyBjb252aWVydGVIb3JhKCBIb3JhRmluUHJvZHVjY2lvbiApIDogbmV3IERhdGUoYDIwMjAtMDItMTVUJHtIb3JhRmluUHJvZHVjY2lvbn06MDBgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWRfdHVybm86IHBhcnNlSW50KCBpZFR1cm5vICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkX21vbGRlOiBwYXJzZUludCggaWRNb2xkZSApXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRDMVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdEMxID0gYXdhaXQgcHNfaW5zZXJjaW9uUGxhbmlsbGFQcm9kdWNjaW9uLmV4ZWN1dGUoIGRhdG9zUGxhbmlsbGFQcm9kdWNjaW9uIClcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB1bnByZXBhcmVkID0gYXdhaXQgcHNfaW5zZXJjaW9uUGxhbmlsbGFQcm9kdWNjaW9uLnVucHJlcGFyZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHVucHJlcGFyZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWNjaW9uLnJvbGxiYWNrKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmpzb24oIHsgbWVuc2FqZTonRXJyb3IgSW5zZXJjaW9uUGxhbmlsbGEnLnllbGxvdyB9IClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0QzEpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZFBsYW5pbGxhUHJvZHVjY2lvbiA9IGF3YWl0IGNvbnN1bHRhSURwbGFuaWxsYVByb2R1Y2Npb24ucXVlcnkoIGBzZWxlY3QgbWF4KCBpZCApIGFzIGlkUGxhbmlsbGEgZnJvbSBwbGFuaWxsYXNfcHJvZHVjY2lvbmAgKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihpZFBsYW5pbGxhUHJvZHVjY2lvbi5yZWNvcmRzZXRbMF0uaWRQbGFuaWxsYSAmJiAhIGlzTmFOKCBpZFBsYW5pbGxhUHJvZHVjY2lvbi5yZWNvcmRzZXRbMF0uaWRQbGFuaWxsYSApKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZlY09wZXJhcmlvc1hwbGFuaWxsYSA9IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY09wZXJhcmlvcy5mb3JFYWNoKCBvcGVyYXJpbyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3AgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2Fsb3JpYXM6IHBhcnNlSW50KCBvcGVyYXJpby5jYWxvcmlhcyApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB6YV9wcm9kdWNpZGFzOiBwYXJzZUludCggb3BlcmFyaW8ucHJvZHVjY2lvbiApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvcmFfaW5pY2lvOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jz8gY29udmllcnRlSG9yYSggb3BlcmFyaW8uaG9yYUluaWNpbyApIDogbmV3IERhdGUoYDIwMjAtMDItMTVUJHtvcGVyYXJpby5ob3JhSW5pY2lvfTowMGApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvcmFfZmluOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jz8gY29udmllcnRlSG9yYSggb3BlcmFyaW8uaG9yYUZpbiApIDogbmV3IERhdGUoYDIwMjAtMDItMTVUJHtvcGVyYXJpby5ob3JhRmlufTowMGApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkX3RyYWJhamFkb3I6IHBhcnNlSW50KCBvcGVyYXJpby5pZE9wZXJhcmlvKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZF9wbGFuaWxsYTogcGFyc2VJbnQoIGlkUGxhbmlsbGFQcm9kdWNjaW9uLnJlY29yZHNldFswXS5pZFBsYW5pbGxhICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRfdHVybm86IHBhcnNlSW50KCBvcGVyYXJpby5pZFR1cm5vICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjUmVjaGF6b3M6IG9wZXJhcmlvLnZlY1JlY2hhem9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY09wZXJhcmlvc1hwbGFuaWxsYS5wdXNoKCBvcCApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzaW5jcm9uby5lYWNoU2VyaWVzICggdmVjT3BlcmFyaW9zWHBsYW5pbGxhICwgKCB0cmFiYWphZG9yICwgY2FsbGJhY2sgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCAgcHNfaW5zZXJjaW9uVHJhYmFqYWRvcmVzWFBsYW5pbGxhID0gbmV3IFJlcXVlc3QgKCB0cmFuc2FjY2lvbiApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwc19pbnNlcmNpb25UcmFiYWphZG9yZXNYUGxhbmlsbGEuaW5wdXQgKCAnY2Fsb3JpYXMnICwgbXNzcWwuSW50ICwgdHJhYmFqYWRvci5jYWxvcmlhcyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwc19pbnNlcmNpb25UcmFiYWphZG9yZXNYUGxhbmlsbGEuaW5wdXQgKCAncHphX3Byb2R1Y2lkYXMnICwgbXNzcWwuSW50ICwgdHJhYmFqYWRvci5wemFfcHJvZHVjaWRhcyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwc19pbnNlcmNpb25UcmFiYWphZG9yZXNYUGxhbmlsbGEuaW5wdXQgKCAnaWRfdHVybm8nICwgbXNzcWwuSW50ICwgdHJhYmFqYWRvci5pZF90dXJubyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwc19pbnNlcmNpb25UcmFiYWphZG9yZXNYUGxhbmlsbGEuaW5wdXQgKCAnaG9yYV9pbmljaW8nICwgbXNzcWwuVGltZSAsIHRyYWJhamFkb3IuaG9yYV9pbmljaW8gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHNfaW5zZXJjaW9uVHJhYmFqYWRvcmVzWFBsYW5pbGxhLmlucHV0ICggJ2hvcmFfZmluJyAsIG1zc3FsLlRpbWUgLCB0cmFiYWphZG9yLmhvcmFfZmluIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBzX2luc2VyY2lvblRyYWJhamFkb3Jlc1hQbGFuaWxsYS5pbnB1dCAoICdpZF90cmFiYWphZG9yJywgbXNzcWwuSW50ICwgdHJhYmFqYWRvci5pZF90cmFiYWphZG9yIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBzX2luc2VyY2lvblRyYWJhamFkb3Jlc1hQbGFuaWxsYS5pbnB1dCAoICdpZF9wbGFuaWxsYScgLCBtc3NxbC5JbnQgLCB0cmFiYWphZG9yLmlkX3BsYW5pbGxhIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2ZWNSZWNoYXpvc1RyYWJhamFkb3JYcGxhbmlsbGEgPSBbICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFiYWphZG9yLnZlY1JlY2hhem9zLmZvckVhY2goIHJlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVjaGF6b1ogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnRpZGFkOiBwYXJzZUludCggcmUuY2FudGlkYWRSZWNoYXpvICkgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXBvOiByZS50aXBvID8gMSA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkX2RlZmVjdG86IHBhcnNlSW50KCByZS5pZFJlY2hhem8gKSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY1pvbmFzOiByZS52ZWNab25hc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWNSZWNoYXpvc1RyYWJhamFkb3JYcGxhbmlsbGEucHVzaCAoIHJlY2hhem9aIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29uc3VsdGEgPSBgaW5zZXJ0IGludG8gdHJhYmFqYWRvcl94X3BsYW5pbGxhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2Fsb3JpYXMgLCBwemFfcHJvZHVjaWRhcywgaWRfdHVybm8gLCBob3JhX2luaWNpbyAsIGhvcmFfZmluICwgaWRfdHJhYmFqYWRvciAsIGlkX3BsYW5pbGxhICwgZXN0YWRvKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQGNhbG9yaWFzICwgQHB6YV9wcm9kdWNpZGFzICwgQGlkX3R1cm5vICwgQGhvcmFfaW5pY2lvICwgQGhvcmFfZmluICwgQGlkX3RyYWJhamFkb3IgLCBAaWRfcGxhbmlsbGEgLCAxKSA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNsYXJlIEBpZF90cmFiYWphZG9yX3hfcGxhbmlsbGEgaW50IDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2xhcmUgQGlkX3JlY2hhem9zX3hfdHJhYmFqYWRvcl95X3BsYW5pbGxhIGludCA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQgQGlkX3RyYWJhamFkb3JfeF9wbGFuaWxsYSA9ICggc2VsZWN0IG1heCggaWQgKSBhcyBpZFRyYWJhamFkb3JYcGxhbmlsbGEgZnJvbSB0cmFiYWphZG9yX3hfcGxhbmlsbGEgKSA7IGBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY1JlY2hhem9zVHJhYmFqYWRvclhwbGFuaWxsYS5mb3JFYWNoICggcmVjaGF6byA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3VsdGEgKz0gYGluc2VydCBpbnRvIHJlY2hhem9zX3hfdHJhYmFqYWRvcl95X3BsYW5pbGxhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNhbnRpZGFkICwgdGlwbyAsIGlkX2RlZmVjdG8gLCBpZF90cmFiYWphZG9yX3hfcGxhbmlsbGEgLCBlc3RhZG8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCAkeyByZWNoYXpvLmNhbnRpZGFkIH0sICR7IHJlY2hhem8udGlwbyB9ICwgJHsgcmVjaGF6by5pZF9kZWZlY3RvIH0gLCBAaWRfdHJhYmFqYWRvcl94X3BsYW5pbGxhICwxKSA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0IEBpZF9yZWNoYXpvc194X3RyYWJhamFkb3JfeV9wbGFuaWxsYSA9IChzZWxlY3QgbWF4KGlkKSBmcm9tIHJlY2hhem9zX3hfdHJhYmFqYWRvcl95X3BsYW5pbGxhKSA7IGBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmVjWm9uYXNYcmVjaGF6byA9IFsgIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNoYXpvLnZlY1pvbmFzLmZvckVhY2goIHpvbmEgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgem9vID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FudGlkYWQ6IHBhcnNlSW50ICggem9uYS5jYW50aWRhZCApICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldHJhOiB6b25hLmxldHJhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJvOiBwYXJzZUludCAoIHpvbmEubnVtZXJvIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWNab25hc1hyZWNoYXpvLnB1c2ggKCB6b28gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjWm9uYXNYcmVjaGF6by5mb3JFYWNoKCB6b25hID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3VsdGEgKz0gYCBpbnNlcnQgaW50byB6b25hc194X3JlY2hhem9feF9wbGFuaWxsYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2FudGlkYWQgLCBsZXRyYSAsIG51bWVybyAsIGlkX3JlY2hhem9zX3hfdHJhYmFqYWRvcl95X3BsYW5pbGxhICwgZXN0YWRvIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggJHsgem9uYS5jYW50aWRhZCB9ICwgJyR7IHpvbmEubGV0cmEgfScgLCAkeyB6b25hLm51bWVybyB9ICwgQGlkX3JlY2hhem9zX3hfdHJhYmFqYWRvcl95X3BsYW5pbGxhICwgMSApIDsgYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHNfaW5zZXJjaW9uVHJhYmFqYWRvcmVzWFBsYW5pbGxhLnF1ZXJ5KCBjb25zdWx0YSwoZXJyLHJlc3VsdCk9PnsgaWYoIGVyciApIHsgIGNhbGxiYWNrKCBlcnIgKSB9IGVsc2UgeyBjYWxsYmFjaygpIH0gfSApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gLCAoIGVyciApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZXJyICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWNjaW9uLnJvbGxiYWNrICggIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZXJyLm1lc3NhZ2UgfSApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2ZWNQYXJhZGFzRGVNYXF1aW5hID0gWyBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjUGFyYWRhc01hcXVpbmFTZWxlY2Npb25hZGEuZm9yRWFjaCAoIHBtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhTUFDID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvcmFfaW5pY2lvOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jz8gY29udmllcnRlSG9yYSggcG0uZGVzZGVQYXJhZGFNYXF1aW5hICkgOiBuZXcgRGF0ZShgMjAyMC0wMi0xNVQke3BtLmRlc2RlUGFyYWRhTWFxdWluYX06MDBgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3JhX2ZpbjogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCc/IGNvbnZpZXJ0ZUhvcmEoIHBtLmhhc3RhUGFyYWRhTWFxdWluYSApIDogbmV3IERhdGUoYDIwMjAtMDItMTVUJHtwbS5oYXN0YVBhcmFkYU1hcXVpbmF9OjAwYCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRfcGFyYWRhc19tYXF1aW5hOiBwYXJzZUludCggcG0uaWRQYXJhZGFNYXF1aW5hICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRfcGxhbmlsbGE6IGlkUGxhbmlsbGFQcm9kdWNjaW9uLnJlY29yZHNldFswXS5pZFBsYW5pbGxhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWNQYXJhZGFzRGVNYXF1aW5hLnB1c2ggKCBwYXJhTUFDIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzaW5jcm9uby5lYWNoU2VyaWVzICggdmVjUGFyYWRhc0RlTWFxdWluYSAsICggUE0gLCBjYWxsYmFja1BNICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25zdWx0YUluc2VyY2lvblBhcmFkYXNEZU1hcXVpbmEgPSAgbmV3IFJlcXVlc3QgKCB0cmFuc2FjY2lvbiApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bHRhSW5zZXJjaW9uUGFyYWRhc0RlTWFxdWluYS5pbnB1dCAoICdob3JhX2luY2lvJyAsIG1zc3FsLlRpbWUgLCBQTS5ob3JhX2luaWNpbyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bHRhSW5zZXJjaW9uUGFyYWRhc0RlTWFxdWluYS5pbnB1dCAoICdob3JhX2ZpbicgLCBtc3NxbC5UaW1lICwgUE0uaG9yYV9maW4gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdWx0YUluc2VyY2lvblBhcmFkYXNEZU1hcXVpbmEuaW5wdXQgKCAnaWRfcGFyYWRhc19tYXF1aW5hJyAsIG1zc3FsLkludCxQTS5pZF9wYXJhZGFzX21hcXVpbmEgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdWx0YUluc2VyY2lvblBhcmFkYXNEZU1hcXVpbmEuaW5wdXQgKCAnaWRfcGxhbmlsbGEnICwgbXNzcWwuSW50ICwgUE0uaWRfcGxhbmlsbGEgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdWx0YUluc2VyY2lvblBhcmFkYXNEZU1hcXVpbmEucXVlcnkgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGluc2VydCBpbnRvIHBhcmFkYXNfbWFxdWluYXNfeF9wbGFuaWxsYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCBob3JhX2luY2lvICwgaG9yYV9maW4gLCBpZF9wYXJhZGFzX21hcXVpbmEgLCBpZF9wbGFuaWxsYSAsIGVzdGFkbyApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggQGhvcmFfaW5jaW8gLCBAaG9yYV9maW4gLCBAaWRfcGFyYWRhc19tYXF1aW5hICwgQGlkX3BsYW5pbGxhICwgMSApYCwoIEVSLHJlc3VsdFBNICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIEVSICkgeyBjYWxsYmFja1BNICggRVIgKSB9IGVsc2UgeyBjYWxsYmFja1BNICggICkgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICwgZXJyb1IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGVycm9SICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY2Npb24ucm9sbGJhY2sgKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5qc29uKCB7IG1lbnNhamU6ZXJyb1IubWVzc2FnZSB9IClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWNjaW9uLmNvbW1pdCAoICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnNldEhlYWRlciggJ0NvbnRlbnQtVHlwZScsICd0ZXh0L2V2ZW50LXN0cmVhbScgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnSW5zZXJjaW9uIGV4aXRvcmEnIH0gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkgLy8gISBGSU4gRk9SIEVBQ0hcclxuICAgICAgICAgICAgICAgICAgICB9IC8vISBGSU4gIElJRlxyXG4gICAgICAgICAgICAgICAgfSAvLyEgRklOIERFTCBUUllcclxuICAgICAgICAgICAgICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjY2lvbi5yb2xsYmFjayAoICApXHJcbiAgICAgICAgICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIG1lbnNhamUyIDogJ0Vycm9yIGNhdGNoIEZJTkFMJyB9IClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtZXRvZG9UcmFuc2FjY2lvbigpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnZXJyIGNvbW1pdCcgKVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn0gKVxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlciIsImNvbnN0IHsgUm91dGVyIH0gPSByZXF1aXJlKCdleHByZXNzJylcclxuY29uc3Qgcm91dGVyID0gUm91dGVyKClcclxuXHJcbnJvdXRlci5nZXQoJy8nLCBhc3luYyAoIHJlcSwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uLGNlcnJhckNvbmV4aW9uIH0gPSByZXF1aXJlKCcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicpXHJcbiAgICBhd2FpdCBhYnJpckNvbmV4aW9uKClcclxuICAgIGNvbnN0IHsgUmVxdWVzdCB9ID0gcmVxdWlyZSgnbXNzcWwnKVxyXG4gICAgY29uc3QgY29uc3VsdGEgPSBuZXcgUmVxdWVzdCgpXHJcbiAgICBjb25zdWx0YS5xdWVyeSgnc2VsZWN0IGlkIGFzIGlkVGlwb1Byb2Nlc28sIG5vbWJyZSBhcyBub21icmVUaXBvUHJvY2VzbyBmcm9tIHRpcG9zX3Byb2Nlc28gd2hlcmUgZXN0YWRvID0gMSAnICwgKGUscmVzdWx0KT0+e1xyXG4gICAgICAgIGlmKGUpe1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvbigpXHJcbiAgICAgICAgICAgIHJlcy5qc29uKHttZW5zYWplOmUubWVzc2FnZX0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uKClcclxuICAgICAgICAgICAgcmVzLmpzb24ocmVzdWx0LnJlY29yZHNldClcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59KVxyXG5yb3V0ZXIucG9zdCgnLycsIGFzeW5jICggcmVxLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IGlkUGllemEsIGlkTWFxdWluYSB9ID0gcmVxLmJvZHlcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvbixjZXJyYXJDb25leGlvbiB9ID0gcmVxdWlyZSgnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInKVxyXG4gICAgYXdhaXQgYWJyaXJDb25leGlvbigpXHJcbiAgICBjb25zdCB7IFJlcXVlc3QgfSA9IHJlcXVpcmUoJ21zc3FsJylcclxuICAgIGNvbnN0IGNvbnN1bHRhID0gbmV3IFJlcXVlc3QoKVxyXG4gICAgY29uc3VsdGEucXVlcnkoYHNlbGVjdCB0cC5pZCBhcyBpZFRpcG9Qcm9jZXNvLCB0cC5ub21icmUgYXMgbm9tYnJlVGlwb1Byb2Nlc28gZnJvbSB0aXBvc19wcm9jZXNvIHRwXHJcbiAgICBqb2luIHByb2Nlc29zIHAgb24gdHAuaWQgPSBwLmlkX3RpcG9zX3Byb2Nlc28gd2hlcmUgcC5pZF9tYXF1aW5hID0gJHtpZE1hcXVpbmF9IGFuZCBwLmlkX3BpZXphID0gJHtpZFBpZXphfSBhbmQgdHAuZXN0YWRvID0gMWAsIChlLHJlc3VsdCk9PntcclxuICAgICAgICBpZihlKXtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb24oKVxyXG4gICAgICAgICAgICByZXMuanNvbih7bWVuc2FqZTplLm1lc3NhZ2V9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvbigpXHJcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3VsdC5yZWNvcmRzZXQpXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufSlcclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlciIsImNvbnN0IHsgUm91dGVyIH0gPSByZXF1aXJlICggJ2V4cHJlc3MnIClcclxuXHJcbmNvbnN0IHJvdXRlciA9IFJvdXRlciAoICApXHJcblxyXG5yb3V0ZXIuZ2V0ICggJy9saXN0JyAsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdjb25zdWx0YUNsaWVudGVzJyApXHJcbiAgICBjb25zdCB7IFJlcXVlc3QgfSA9IHJlcXVpcmUgKCAnbXNzcWwnIClcclxuICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgY29uc3QgcXVlcnkgPSBgIHNlbGVjdCBjLmlkIGFzIGlkQ2xpZW50ZSAsIGMubm9tYnJlIGFzIG5vbWJyZUNsaWVudGUgLCBjLnJhem9uX3NvY2lhbCBhcyByYXpvblNvY2lhbENsaWVudGVcclxuICAgIGZyb20gY2xpZW50ZXMgY1xyXG4gICAgd2hlcmUgYy5lc3RhZG8gPSAxYFxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QucXVlcnkgKCBxdWVyeSApXHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICByZXMuanNvbiAoIHJlc3VsdC5yZWNvcmRzZXQgKVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgfSApXHJcbiAgICB9XHJcbn0gKVxyXG5cclxucm91dGVyLnB1dCAoICcvZGVsZXRlJyAsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgICAgICBjb25zdCBjb25leGlvbjIgPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdkZWxldGVDbGllbnRlJyApXHJcbiAgICAgICAgY29uc3QgeyBSZXF1ZXN0ICwgSW50IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0MiA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24yICApXHJcbiAgICAgICAgbXlSZXF1ZXN0Mi5pbnB1dCAoICdpZENsaWVudGUnICwgSW50ICwgcGFyc2VJbnQgKCByZXEuYm9keS5pZENsaWVudGUgKSApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgdXBkYXRlIGNsaWVudGVzIHNldCBlc3RhZG8gPSAwIHdoZXJlIGlkID0gQGlkQ2xpZW50ZWBcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QyLnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdDbGllbnRlIEVsaW1pbmFkbyBDb3JyZWN0YW1lbnRlJyB9IClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZS5tZXNzYWdlIH0gKVxyXG4gICAgICAgIH1cclxufSApXHJcbnJvdXRlci5wdXQgKCAnL3VwZGF0ZScgLCBhc3luYyAoICByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IG5vbWJyZUNsaWVudGUgLCAgcmF6b25Tb2NpYWxDbGllbnRlICwgaWRDbGllbnRlIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICd1cGRhdGVDbGllbnRlJyApXHJcbiAgICBjb25zdCB7IFJlcXVlc3QgLCBJbnQgLCBWYXJDaGFyIH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgUmVxdWVzdCAoIGNvbmV4aW9uIClcclxuICAgIG15UmVxdWVzdC5pbnB1dCAoICdub21icmVDbGllbnRlJyAsIFZhckNoYXIgLCAgbm9tYnJlQ2xpZW50ZSApXHJcbiAgICBteVJlcXVlc3QuaW5wdXQgKCAncmF6b25Tb2NpYWxDbGllbnRlJyAsIFZhckNoYXIgLCAgcmF6b25Tb2NpYWxDbGllbnRlIClcclxuICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZENsaWVudGUnICwgSW50ICwgIGlkQ2xpZW50ZSApXHJcbiAgICBjb25zdCBxdWVyeSA9IGAgdXBkYXRlIGNsaWVudGVzXHJcbiAgICBzZXRcclxuICAgIG5vbWJyZSA9IEBub21icmVDbGllbnRlICxcclxuICAgIHJhem9uX3NvY2lhbCA9IEByYXpvblNvY2lhbENsaWVudGVcclxuICAgIHdoZXJlIGlkID0gQGlkQ2xpZW50ZWBcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdDbGllbnRlIEFjdHVhbGl6YWRvIENvcnJlY3RhbWVudGUgJyB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSB9IClcclxuICAgIH1cclxufSlcclxucm91dGVyLnBvc3QgKCAnL2luc2VydCcgLCAgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IG5vbWJyZUNsaWVudGUgLCAgcmF6b25Tb2NpYWxDbGllbnRlICB9ID0gcmVxLmJvZHlcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIGNvbnN0IHsgUmVxdWVzdCAsIFZhckNoYXIgfSA9IHJlcXVpcmUgKCAnbXNzcWwnIClcclxuICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAnaW5zZXJ0Q2xpZW50ZScgKVxyXG4gICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCAgY29uZXhpb24gKVxyXG4gICAgbXlSZXF1ZXN0LmlucHV0ICggJ25vbWJyZUNsaWVudGUnICwgVmFyQ2hhciAsIG5vbWJyZUNsaWVudGUgKVxyXG4gICAgbXlSZXF1ZXN0LmlucHV0ICggJ3Jhem9uU29jaWFsQ2xpZW50ZScgLCBWYXJDaGFyICwgcmF6b25Tb2NpYWxDbGllbnRlIClcclxuICAgIGNvbnN0IHF1ZXJ5ID0gYGluc2VydCBpbnRvIGNsaWVudGVzICggbm9tYnJlICwgcmF6b25fc29jaWFsICwgZXN0YWRvICApIHZhbHVlcyAgKCBAbm9tYnJlQ2xpZW50ZSAsIEByYXpvblNvY2lhbENsaWVudGUgLCAxIClgXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnQ2xpZW50ZSBJbnNlcnRhZG8gY29ycmVjdGFtZW50ZScgfSApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgfSApXHJcbiAgICB9XHJcbn0gKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXIiLCJjb25zdCB7IFJvdXRlciB9ID0gcmVxdWlyZSAoJ2V4cHJlc3MnKVxyXG5cclxuY29uc3Qgcm91dGVyID0gUm91dGVyICggKVxyXG5cclxuXHJcbnJvdXRlci5nZXQgKCAnL2xpc3QnICwgYXN5bmMgICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ2NvbnN1bHRhTGlzdGFDbGllbnRlcycgKVxyXG4gICAgICAgIGNvbnN0IHsgUmVxdWVzdCB9ID0gcmVxdWlyZSAoICdtc3NxbCcgKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gYHNlbGVjdCBpZCBhcyBpZFRpcG9NYXRlcmlhbCAsIG5vbWJyZSBhcyBub21icmVUaXBvTWF0ZXJpYWxcclxuICAgICAgICBmcm9tIHRpcG9zX21hdGVyaWFsXHJcbiAgICAgICAgd2hlcmUgZXN0YWRvID0gMWBcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QucXVlcnkgKCBxdWVyeSApXHJcbiAgICAgICAgaWYgKCByZXN1bHQgKSB7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgIHJlcy5qc29uICggcmVzdWx0LnJlY29yZHNldCApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgfSApXHJcbiAgICB9XHJcbn0pXHJcblxyXG5yb3V0ZXIucG9zdCAoICcvaW5zZXJ0JyAsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBub21icmVNYXRlcmlhbCB9ID0gcmVxLmJvZHlcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdpbnNlcnRUaXBvTWF0cmlhbCcgKVxyXG4gICAgICAgIGNvbnN0IHsgUmVxdWVzdCAsIFZhckNoYXIgfSA9IHJlcXVpcmUgKCAnbXNzcWwnKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdub21icmVNYXRlcmlhbCcgLCBWYXJDaGFyICwgbm9tYnJlTWF0ZXJpYWwgIClcclxuICAgICAgICBjb25zdCBxdWVyeSA9IGBpbnNlcnQgaW50byB0aXBvc19tYXRlcmlhbCAoIG5vbWJyZSAsIGVzdGFkbyApXHJcbiAgICAgICAgdmFsdWVzICggQG5vbWJyZU1hdGVyaWFsICwgMSApICBgXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdUaXBvIGRlIE1hdGVyaWFsIGluc2VydGFkbyBjb3JyZWN0YW1lbnRlICcgfSApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgfSApXHJcbiAgICB9XHJcbn0gKVxyXG5yb3V0ZXIucHV0ICggJy91cGRhdGUnICwgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IGlkVGlwb01hdGVyaWFsICAsICBub21icmVUaXBvTWF0ZXJpYWwgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAndXBkYXRlVGlwb01hdGVyaWFsJyApXHJcbiAgICAgICAgY29uc3QgeyBSZXF1ZXN0ICwgVmFyQ2hhciAsIEludCB9ID0gcmVxdWlyZSAoICdtc3NxbCcpXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ25vbWJyZVRpcG9NYXRlcmlhbCcgLCBWYXJDaGFyICwgbm9tYnJlVGlwb01hdGVyaWFsICApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2lkVGlwb01hdGVyaWFsJyAsIEludCAsIGlkVGlwb01hdGVyaWFsICApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgdXBkYXRlIHRpcG9zX21hdGVyaWFsXHJcbiAgICAgICAgc2V0XHJcbiAgICAgICAgbm9tYnJlID0gQG5vbWJyZVRpcG9NYXRlcmlhbFxyXG4gICAgICAgIHdoZXJlIGlkID0gQGlkVGlwb01hdGVyaWFsYFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnVGlwbyBkZSBNYXRlcmlhbCBhY3R1YWxpemFkbyBjb3JyZWN0YW1lbnRlICcgfSApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgfSApXHJcbiAgICB9XHJcbn0gKVxyXG5yb3V0ZXIucHV0ICggJy9kZWxldGUnICwgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IGlkVGlwb01hdGVyaWFsIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ2RlbGV0VGlwb01hdGVyaWFsJyApXHJcbiAgICAgICAgY29uc3QgeyBSZXF1ZXN0ICwgVmFyQ2hhciAsIEludCB9ID0gcmVxdWlyZSAoICdtc3NxbCcpXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2lkVGlwb01hdGVyaWFsJyAsIEludCAsIGlkVGlwb01hdGVyaWFsICApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgdXBkYXRlIHRpcG9zX21hdGVyaWFsXHJcbiAgICAgICAgc2V0XHJcbiAgICAgICAgZXN0YWRvID0gMFxyXG4gICAgICAgIHdoZXJlIGlkID0gQGlkVGlwb01hdGVyaWFsYFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnVGlwbyBkZSBNYXRlcmlhbCBlbGltaW5hZG8gIGNvcnJlY3RhbWVudGUgJyB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSB9IClcclxuICAgIH1cclxufSApXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlciIsImNvbnN0IHsgUm91dGVyIH0gPSByZXF1aXJlICggJ2V4cHJlc3MnIClcclxuXHJcbmNvbnN0IHJvdXRlciA9IFJvdXRlciAoICApXHJcblxyXG5yb3V0ZXIuZ2V0ICggJy8nICwgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICgnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ2xpc3RhQXJlYXMnIClcclxuICAgICAgICBjb25zdCB7IFJlcXVlc3QgfSA9IG5ldyByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1aXJlcyA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWlyZXMucXVlcnkgKFxyXG4gICAgICAgICAgICBgc2VsZWN0IGlkIGFzIGlkQXJlYSAsIG5vbWJyZSBhcyBub21icmVBcmVhXHJcbiAgICAgICAgICAgIGZyb20gYXJlYXNcclxuICAgICAgICAgICAgd2hlcmUgZXN0YWRvID0gMWBcclxuICAgICAgICApXHJcbiAgICAgICAgaWYgKCByZXN1bHQgKSB7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgIHJlcy5qc29uICggcmVzdWx0LnJlY29yZHNldCApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgfSApXHJcbiAgICB9XHJcbn0gKVxyXG5yb3V0ZXIucG9zdCAoICcvaW5zZXJ0JywgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IG5vbWJyZUFyZWEgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICBjb25zdCB7IFJlcXVlc3QgLCBWYXJDaGFyICB9ID0gcmVxdWlyZSAoICdtc3NxbCcgKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ2luc2VydEFyZWEnIClcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgUmVxdWVzdCAoIGNvbmV4aW9uIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnbm9tYnJlQXJlYScgLCBWYXJDaGFyICwgbm9tYnJlQXJlYSApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgaW5zZXJ0IGludG8gYXJlYXMgKCBub21icmUgLCBlc3RhZG8gKVxyXG4gICAgICAgIHZhbHVlc1xyXG4gICAgICAgICggQG5vbWJyZUFyZWEgLCAxIClgXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdBcmVhIEluc2VydGFkbyBjb3JyZWN0YW1lbnRlJyAsIHN0YXR1cyA6IDIwMCB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggKVxyXG4gICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZS5tZXNzYWdlICwgc3RhdHVzIDogNDAzIH0gKVxyXG4gICAgfVxyXG59KVxyXG5yb3V0ZXIucHV0ICggJy91cGRhdGUnLCBhc3luYyAoIHJlcSAsIHJlcyApID0+IHtcclxuICAgIGNvbnN0IHsgaWRBcmVhICwgbm9tYnJlQXJlYSAgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICBjb25zdCB7IFJlcXVlc3QgLCBWYXJDaGFyICwgSW50IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAndXBkYXRlQXJlYScgKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdub21icmVBcmVhJyAsIFZhckNoYXIgLCBub21icmVBcmVhIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRBcmVhJyAsIEludCAsIGlkQXJlYSApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgdXBkYXRlIGFyZWFzXHJcbiAgICAgICAgc2V0XHJcbiAgICAgICAgbm9tYnJlID0gQG5vbWJyZUFyZWFcclxuICAgICAgICB3aGVyZSBpZCA9IEBpZEFyZWFgXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdBcmVhIGFjdHVhbGl6YWRhIGNvcnJlY3RhbWVudGUnICwgc3RhdHVzIDogMjAwIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgLCBzdGF0dXMgOiA0MDMgfSApXHJcbiAgICB9XHJcbn0pXHJcbnJvdXRlci5wdXQgKCAnL2RlbGV0ZScsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBpZEFyZWEgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICBjb25zdCB7IFJlcXVlc3QgLCBJbnQgfSA9IHJlcXVpcmUgKCAnbXNzcWwnIClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdkZWxldGVBcmVhJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2lkQXJlYScgLCBJbnQgLCBpZEFyZWEgKVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gYHVwZGF0ZSBhcmVhc1xyXG4gICAgICAgIHNldFxyXG4gICAgICAgIGVzdGFkbyA9IDBcclxuICAgICAgICB3aGVyZSBpZCA9IEBpZEFyZWFgXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdBcmVhIGVsaW1pbmFkYSBjb3JyZWN0YW1lbnRlJyAsIHN0YXR1cyA6IDIwMCB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggKVxyXG4gICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZS5tZXNzYWdlICwgc3RhdHVzIDogNDAzIH0gKVxyXG4gICAgfVxyXG59KVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXIiLCJjb25zdCB7IFJvdXRlciB9ID0gcmVxdWlyZSAoICdleHByZXNzJyApXHJcbmNvbnN0IHJvdXRlciA9IFJvdXRlciAoICApXHJcblxyXG5yb3V0ZXIuZ2V0ICggICcvbGlzdCcgLCBhc3luYyAoIHJlcSAsIHJlcyApID0+IHtcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdsaXN0YVRpcG9zTWFxdWluYScgKVxyXG4gICAgICAgIGNvbnN0IHsgUmVxdWVzdCB9ID0gcmVxdWlyZSAoICdtc3NxbCcgKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gYHNlbGVjdCB0bS5pZCBhcyBpZFRpcG9NYXF1aW5hICwgdG0ubm9tYnJlIGFzIG5vbWJyZVRpcG9NYXF1aW5hICwgdG0uaWRfb3BlcmFjaW9uIGFzIGlkT3BlcmFjaW9uICxcclxuICAgICAgICBvLm5vbWJyZSBhcyBub21icmVPcGVyYWNpb25cclxuICAgICAgICBmcm9tIHRpcG9zX21hcXVpbmEgdG1cclxuICAgICAgICBqb2luIG9wZXJhY2lvbmVzIG8gb24gdG0uaWRfb3BlcmFjaW9uID0gby5pZFxyXG4gICAgICAgIHdoZXJlIHRtLmVzdGFkbyA9IDFgXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBteVJlcXVlc3QucXVlcnkgKCBxdWVyeSApXHJcbiAgICAgICAgaWYgKCByZXNwb25zZSApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCByZXNwb25zZS5yZWNvcmRzZXQgKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZS5tZXNzYWdlIH0gKVxyXG4gICAgfVxyXG59IClcclxucm91dGVyLnBvc3QgKCAnL2luc2VydCcsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBub21icmVUaXBvTWFxdWluYSAgLCBpZE9wZXJhY2lvbiB9ID0gcmVxLmJvZHlcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIGNvbnN0IHsgUmVxdWVzdCAsIFZhckNoYXIgLCBJbnQgfSA9IHJlcXVpcmUgKCAnbXNzcWwnIClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdpbnNlcnRUaXBvTWFxdWluYScgKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdub21icmVUaXBvTWFxdWluYScgLCBWYXJDaGFyICwgbm9tYnJlVGlwb01hcXVpbmEgKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZE9wZXJhY2lvbicgLCBJbnQgLCBpZE9wZXJhY2lvbiApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgaW5zZXJ0IGludG8gdGlwb3NfbWFxdWluYSAoIG5vbWJyZSAsIGlkX29wZXJhY2lvbiAsIGVzdGFkbyApXHJcbiAgICAgICAgdmFsdWVzXHJcbiAgICAgICAgKCBAbm9tYnJlVGlwb01hcXVpbmEgLCBAaWRPcGVyYWNpb24gLCAxIClgXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdUaXBvIGRlIG1hcXVpbmEgSW5zZXJ0YWRhIGNvcnJlY3RhbWVudGUnICwgc3RhdHVzIDogMjAwIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgLCBzdGF0dXMgOiA0MDMgfSApXHJcbiAgICB9XHJcbn0gKVxyXG5yb3V0ZXIucHV0ICggJy91cGRhdGUnLCBhc3luYyAoIHJlcSAsIHJlcyApID0+IHtcclxuICAgIGNvbnN0IHsgaWRUaXBvTWFxdWluYSAsIG5vbWJyZVRpcG9NYXF1aW5hICwgaWRPcGVyYWNpb24gfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICBjb25zdCB7IFJlcXVlc3QgLCBWYXJDaGFyICwgSW50IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAndXBkYXRlVGlwb01hcXVpbmEnIClcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgUmVxdWVzdCAoIGNvbmV4aW9uIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnbm9tYnJlVGlwb01hcXVpbmEnICwgVmFyQ2hhciAsIG5vbWJyZVRpcG9NYXF1aW5hIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRPcGVyYWNpb24nICwgSW50ICwgaWRPcGVyYWNpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZFRpcG9NYXF1aW5hJyAsIEludCAsIGlkVGlwb01hcXVpbmEgKVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gYHVwZGF0ZSB0aXBvc19tYXF1aW5hXHJcbiAgICAgICAgc2V0XHJcbiAgICAgICAgbm9tYnJlID0gQG5vbWJyZVRpcG9NYXF1aW5hICxcclxuICAgICAgICBpZF9vcGVyYWNpb24gPSBAaWRPcGVyYWNpb25cclxuICAgICAgICB3aGVyZSBpZCA9IEBpZFRpcG9NYXF1aW5hYFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnVGlwbyBkZSBtYXF1aW5hIGFjdHVhbGl6YWRhIGNvcnJlY3RhbWVudGUnICwgc3RhdHVzIDogMjAwIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoIClcclxuICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZS5tZXNzYWdlICwgc3RhdHVzIDogNDAzIH0gKVxyXG4gICAgfVxyXG59IClcclxucm91dGVyLnB1dCAoICcvZGVsZXRlJywgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IGlkVGlwb01hcXVpbmEgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICBjb25zdCB7IFJlcXVlc3QgLCBJbnQgfSA9IHJlcXVpcmUgKCAnbXNzcWwnIClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdkZWxldGVUaXBvTWFxdWluYScgKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZFRpcG9NYXF1aW5hJyAsIEludCAsIGlkVGlwb01hcXVpbmEgKVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gYHVwZGF0ZSB0aXBvc19tYXF1aW5hXHJcbiAgICAgICAgc2V0XHJcbiAgICAgICAgZXN0YWRvID0gMFxyXG4gICAgICAgIHdoZXJlIGlkID0gQGlkVGlwb01hcXVpbmFgXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdUaXBvIGRlIG1hcXVpbmEgZWxpbWluYWRhIGNvcnJlY3RhbWVudGUnICwgc3RhdHVzIDogMjAwIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgLCBzdGF0dXMgOiA0MDMgfSApXHJcbiAgICB9XHJcbn0gKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXIiLCJjb25zdCB7IFJvdXRlciB9ID0gcmVxdWlyZSAoICdleHByZXNzJyApXHJcbmNvbnN0IHJvdXRlciA9IFJvdXRlciAoICApXHJcblxyXG5yb3V0ZXIuZ2V0ICggICcvbGlzdCcgLCBhc3luYyAoIHJlcSAsIHJlcyApID0+IHtcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdsaXN0YVBsYW50YXMnIClcclxuICAgICAgICBjb25zdCB7IFJlcXVlc3QgfSA9IHJlcXVpcmUgKCAnbXNzcWwnIClcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgUmVxdWVzdCAoIGNvbmV4aW9uIClcclxuICAgICAgICBjb25zdCBxdWVyeSA9IGBzZWxlY3QgcC5pZCBhcyBpZFBsYW50YSAsIHAubm9tYnJlIGFzIG5vbWJyZVBsYW50YSAsIHAuYmFycmlvIGFzIGJhcnJpb1BsYW50YSAsXHJcbiAgICAgICAgcC5jcCBhcyBjb2RpZ29Qb3N0YWxQbGFudGEgLCBwLmNhbGxlIGFzIGNhbGxlUGxhbnRhICwgcC5hbHR1cmFfY2FsbGUgYXMgYWx0dXJhQ2FsbGVQbGFudGFcclxuICAgICAgICBmcm9tIHBsYW50YXMgcFxyXG4gICAgICAgIHdoZXJlIHAuZXN0YWRvID0gMWBcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICBpZiAoIHJlc3BvbnNlICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHJlc3BvbnNlLnJlY29yZHNldCApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgfSApXHJcbiAgICB9XHJcbn0gKVxyXG5yb3V0ZXIucG9zdCAoICcvaW5zZXJ0JywgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IG5vbWJyZVBsYW50YSAsIGJhcnJpb1BsYW50YSAsIGNvZGlnb1Bvc3RhbFBsYW50YSAsIGNhbGxlUGxhbnRhICwgYWx0dXJhQ2FsbGVQbGFudGEgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICBjb25zdCB7IFJlcXVlc3QgLCBWYXJDaGFyICwgSW50IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAnaW5zZXJ0UGxhbnRhJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ25vbWJyZVBsYW50YScgLCBWYXJDaGFyICwgbm9tYnJlUGxhbnRhIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnYmFycmlvUGxhbnRhJyAsIFZhckNoYXIgLCBiYXJyaW9QbGFudGEgKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdjb2RpZ29Qb3N0YWxQbGFudGEnICwgSW50ICwgY29kaWdvUG9zdGFsUGxhbnRhIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnY2FsbGVQbGFudGEnICwgVmFyQ2hhciAsIGNhbGxlUGxhbnRhIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnYWx0dXJhQ2FsbGVQbGFudGEnICwgSW50ICwgYWx0dXJhQ2FsbGVQbGFudGEgKVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gYGluc2VydCBpbnRvIHBsYW50YXMgKCBub21icmUgLCBiYXJyaW8gLCBjcCAsIGNhbGxlICwgYWx0dXJhX2NhbGxlICwgZXN0YWRvIClcclxuICAgICAgICB2YWx1ZXNcclxuICAgICAgICAoIEBub21icmVQbGFudGEgLCBAYmFycmlvUGxhbnRhICwgQGNvZGlnb1Bvc3RhbFBsYW50YSAsIEBjYWxsZVBsYW50YSAsIEBhbHR1cmFDYWxsZVBsYW50YSAsIDEgKWBcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QucXVlcnkgKCBxdWVyeSApXHJcbiAgICAgICAgaWYgKCByZXN1bHQgKSB7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogJ1BsYW50YSBJbnNlcnRhZGEgY29ycmVjdGFtZW50ZScgLCBzdGF0dXMgOiAyMDAgfSApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICAgIH1cclxufSApXHJcbnJvdXRlci5wdXQgKCAnL3VwZGF0ZScsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBpZFBsYW50YSAsIG5vbWJyZVBsYW50YSAsIGJhcnJpb1BsYW50YSAsIGNvZGlnb1Bvc3RhbFBsYW50YSAsIGNhbGxlUGxhbnRhICwgYWx0dXJhQ2FsbGVQbGFudGEgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICBjb25zdCB7IFJlcXVlc3QgLCBWYXJDaGFyICwgSW50IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAndXBkYXRlUGxhbnRhJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ25vbWJyZVBsYW50YScgLCBWYXJDaGFyICwgbm9tYnJlUGxhbnRhIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnYmFycmlvUGxhbnRhJyAsIFZhckNoYXIgLCBiYXJyaW9QbGFudGEgKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdjb2RpZ29Qb3N0YWxQbGFudGEnICwgSW50ICwgY29kaWdvUG9zdGFsUGxhbnRhIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnY2FsbGVQbGFudGEnICwgVmFyQ2hhciAsIGNhbGxlUGxhbnRhIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnYWx0dXJhQ2FsbGVQbGFudGEnICwgSW50ICwgYWx0dXJhQ2FsbGVQbGFudGEgKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZFBsYW50YScgLCBJbnQgLCBpZFBsYW50YSApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgdXBkYXRlIHBsYW50YXNcclxuICAgICAgICBzZXRcclxuICAgICAgICBub21icmUgPSBAbm9tYnJlUGxhbnRhICxcclxuICAgICAgICBiYXJyaW8gPSBAYmFycmlvUGxhbnRhICxcclxuICAgICAgICBjcCA9IEBjb2RpZ29Qb3N0YWxQbGFudGEgLFxyXG4gICAgICAgIGNhbGxlID0gQGNhbGxlUGxhbnRhICxcclxuICAgICAgICBhbHR1cmFfY2FsbGUgPSBAYWx0dXJhQ2FsbGVQbGFudGFcclxuICAgICAgICB3aGVyZSBpZCA9IEBpZFBsYW50YWBcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QucXVlcnkgKCBxdWVyeSApXHJcbiAgICAgICAgaWYgKCByZXN1bHQgKSB7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogJ1BsYW50YSBhY3R1YWxpemFkYSBjb3JyZWN0YW1lbnRlJyAsIHN0YXR1cyA6IDIwMCB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICBjZXJyYXJDb25leGlvblBPT0wgKCApXHJcbiAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICAgIH1cclxufSApXHJcbnJvdXRlci5wdXQgKCAnL2RlbGV0ZScsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBpZFBsYW50YSB9ID0gcmVxLmJvZHlcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIGNvbnN0IHsgUmVxdWVzdCAsIEludCB9ID0gcmVxdWlyZSAoICdtc3NxbCcgKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ2RlbGV0ZVBsYW50YScgKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZFBsYW50YScgLCBJbnQgLCBpZFBsYW50YSApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgdXBkYXRlIHBsYW50YXNcclxuICAgICAgICBzZXRcclxuICAgICAgICBlc3RhZG8gPSAwXHJcbiAgICAgICAgd2hlcmUgaWQgPSBAaWRQbGFudGFgXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdQbGFudGEgZWxpbWluYWRhIGNvcnJlY3RhbWVudGUnICwgc3RhdHVzIDogMjAwIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgLCBzdGF0dXMgOiA0MDMgfSApXHJcbiAgICB9XHJcbn0gKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXIiLCJjb25zdCB7IFJvdXRlciB9ID0gcmVxdWlyZSAoICdleHByZXNzJyApXHJcblxyXG5jb25zdCByb3V0ZXIgPSBSb3V0ZXIgKCAgKVxyXG5cclxucm91dGVyLmdldCAoICcvbGlzdCcgLCBhc3luYyAoIHJlcSAsIHJlcyApID0+IHtcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdsaXN0YXJQdWVzdG9zJyApXHJcbiAgICAgICAgY29uc3QgeyBSZXF1ZXN0IH0gPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgc2VsZWN0IGlkIGFzIGlkUHVlc3RvICwgbm9tYnJlIGFzIG5vbWJyZVB1ZXN0byBmcm9tIHB1ZXN0b3Mgd2hlcmUgZXN0YWRvID0gMWBcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QucXVlcnkgKCBxdWVyeSApXHJcbiAgICAgICAgaWYgKCAgcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHJlc3VsdC5yZWNvcmRzZXQgKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICAgIH1cclxufSApXHJcbnJvdXRlci5wb3N0ICggJy9pbnNlcnQnICwgYXN5bmMgKCByZXEgLCByZXMgKSA9PntcclxuICAgIGNvbnN0IHsgbm9tYnJlUHVlc3RvIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MICggJ2luc2VydFB1ZXN0bycgKVxyXG4gICAgICAgIGNvbnN0IHsgUmVxdWVzdCAsIFZhckNoYXIgfSA9IHJlcXVpcmUgKCdtc3NxbCcgKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdub21icmVQdWVzdG8nICwgVmFyQ2hhciAsIG5vbWJyZVB1ZXN0byApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgaW5zZXJ0IGludG8gcHVlc3RvcyAoIG5vbWJyZSAsIGVzdGFkbyApXHJcbiAgICAgICAgdmFsdWVzXHJcbiAgICAgICAgKCBAbm9tYnJlUHVlc3RvICwgMSApYFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5xdWVyeSAoIHF1ZXJ5IClcclxuICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiAnUHVlc3RvIGluc2VydGFkbyBjb3JyZWN0YW1lbnRlJyAsIHN0YXR1cyA6IDIwMCB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICAgIH1cclxufSApXHJcblxyXG5yb3V0ZXIucHV0ICggJy91cGRhdGUnICwgYXN5bmMgKCByZXEgLCByZXMgKSA9PntcclxuICAgIGNvbnN0IHsgaWRQdWVzdG8gLCBub21icmVQdWVzdG8gfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAndXBkYXRlUHVlc3RvJyApXHJcbiAgICAgICAgY29uc3QgeyBSZXF1ZXN0ICwgSW50ICwgRGF0ZSAsIFZhckNoYXIgfSA9IHJlcXVpcmUgKCdtc3NxbCcgKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdub21icmVQdWVzdG8nICwgVmFyQ2hhciAsIG5vbWJyZVB1ZXN0byApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2lkUHVlc3RvJyAsIEludCAsIGlkUHVlc3RvIClcclxuICAgICAgICBjb25zdCBxdWVyeSA9IGB1cGRhdGUgcHVlc3Rvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9tYnJlID0gQG5vbWJyZVB1ZXN0b1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZSBpZCA9IEBpZFB1ZXN0b2BcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QucXVlcnkgKCBxdWVyeSApXHJcbiAgICAgICAgaWYgKCByZXN1bHQgKSB7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogJ1B1ZXN0byBhY3R1YWxpemFkbyBjb3JyZWN0YW1lbnRlJyAsIHN0YXR1cyA6IDIwMCB9IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICAgIH1cclxufSApXHJcbnJvdXRlci5wdXQgKCAnL2RlbGV0ZScgLCBhc3luYyAoIHJlcSAsIHJlcyApID0+e1xyXG4gICAgY29uc3QgeyBpZFB1ZXN0byB9ID0gcmVxLmJvZHlcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUgKCAnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInIClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdkZWxldGVQdWVzdG8nIClcclxuICAgICAgICBjb25zdCB7IFJlcXVlc3QgLCBJbnQgfSA9IHJlcXVpcmUgKCdtc3NxbCcgKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICggY29uZXhpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZFB1ZXN0bycgLCBJbnQgLCBpZFB1ZXN0byApXHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgdXBkYXRlIHB1ZXN0b3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzdGFkbyA9IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmUgaWQgPSBAaWRQdWVzdG9gXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LnF1ZXJ5ICggcXVlcnkgKVxyXG4gICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6ICdQdWVzdG8gZWxpbWluYWRvIGNvcnJlY3RhbWVudGUnICwgc3RhdHVzIDogMjAwIH0gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgIHJlcy5qc29uICggeyBtZW5zYWplIDogZS5tZXNzYWdlICwgc3RhdHVzIDogNDAzIH0gKVxyXG4gICAgfVxyXG59IClcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcm91dGVyIiwiY29uc3QgeyBSb3V0ZXIgfSA9IHJlcXVpcmUgKCAnZXhwcmVzcycgKVxyXG5cclxuY29uc3Qgcm91dGVyID0gUm91dGVyICggIClcclxuXHJcblxyXG5yb3V0ZXIucG9zdCAoICcvZnVuZGljaW9uJyAsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBpZE1hcXVpbmEgLCBpZFBpZXphICwgaWRNb2xkZSAsIGZlY2hhRnVuZGljaW9uRGVzZGUgLCBmZWNoYUZ1bmRpY2lvbkhhc3RhIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgY29uc3QgbXNzcWwgPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdsaXN0YU9FRWZ1bmRpY2lvbicgKVxyXG4gICAgICAgICAgICBjb25zdCBteVJlcXVlcyA9IG5ldyAgbXNzcWwuUmVxdWVzdCAoIGNvbmV4aW9uIClcclxuICAgICAgICAgICAgbXlSZXF1ZXMuaW5wdXQgKCAnaWRNYXF1aW5hJyAsIG1zc3FsLkludCAsIGlkTWFxdWluYSApXHJcbiAgICAgICAgICAgIG15UmVxdWVzLmlucHV0ICggJ2lkUGllemEnICwgbXNzcWwuSW50ICwgaWRQaWV6YSApXHJcbiAgICAgICAgICAgIG15UmVxdWVzLmlucHV0ICggJ2lkTW9sZGUnICwgbXNzcWwuSW50ICwgaWRNb2xkZSApXHJcbiAgICAgICAgICAgIG15UmVxdWVzLmlucHV0ICggJ2ZlY2hhRnVuZGljaW9uRGVzZGUnICwgbXNzcWwuRGF0ZSAsIGZlY2hhRnVuZGljaW9uRGVzZGUgKVxyXG4gICAgICAgICAgICBteVJlcXVlcy5pbnB1dCAoICdmZWNoYUZ1bmRpY2lvbkhhc3RhJyAsIG1zc3FsLkRhdGUgLCBmZWNoYUZ1bmRpY2lvbkhhc3RhIClcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXMuZXhlY3V0ZSAoICdwYV9kYXRvc09FRWZ1bicgKVxyXG4gICAgICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgICAgICByZXMuanNvbiAoIHJlc3VsdC5yZWNvcmRzZXQgKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoICggZSApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgLCBzdGF0dXMgOiA0MDMgfSApXHJcbiAgICAgICAgfVxyXG59ICApXHJcblxyXG5yb3V0ZXIucG9zdCAoICcvZ3JhbmFsbGFkbycgLCBhc3luYyAoIHJlcSAsIHJlcyApID0+IHtcclxuICAgIGNvbnN0IHsgaWRNYXF1aW5hICwgaWRQaWV6YSAsIGlkTW9sZGUgLCBmZWNoYVByb2R1Y2Npb25EZXNkZSAsIGZlY2hhUHJvZHVjY2lvbkhhc3RhIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgY29uc3QgbXNzcWwgPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCAoICdsaXN0YU9FRWdyYW5hbGxhZG8nIClcclxuICAgICAgICAgICAgY29uc3QgbXlSZXF1ZXMgPSBuZXcgIG1zc3FsLlJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgICAgIG15UmVxdWVzLmlucHV0ICggJ2lkTWFxdWluYScgLCBtc3NxbC5JbnQgLCBpZE1hcXVpbmEgKVxyXG4gICAgICAgICAgICBteVJlcXVlcy5pbnB1dCAoICdpZFBpZXphJyAsIG1zc3FsLkludCAsIGlkUGllemEgKVxyXG4gICAgICAgICAgICBteVJlcXVlcy5pbnB1dCAoICdpZE1vbGRlJyAsIG1zc3FsLkludCAsIGlkTW9sZGUgKVxyXG4gICAgICAgICAgICBteVJlcXVlcy5pbnB1dCAoICdmZWNoYVByb2R1Y2Npb25EZXNkZScgLCBtc3NxbC5EYXRlICwgZmVjaGFQcm9kdWNjaW9uRGVzZGUgKVxyXG4gICAgICAgICAgICBteVJlcXVlcy5pbnB1dCAoICdmZWNoYVByb2R1Y2Npb25IYXN0YScgLCBtc3NxbC5EYXRlICwgZmVjaGFQcm9kdWNjaW9uSGFzdGEgKVxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlcy5leGVjdXRlICggJ3BhX2RhdG9zT0VFZ3JhJyApXHJcbiAgICAgICAgICAgIGlmICggcmVzdWx0ICkge1xyXG4gICAgICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgICAgIHJlcy5qc29uICggcmVzdWx0LnJlY29yZHNldCApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKCAgKVxyXG4gICAgICAgICAgICByZXMuanNvbiAoIHsgbWVuc2FqZSA6IGUubWVzc2FnZSAsIHN0YXR1cyA6IDQwMyB9IClcclxuICAgICAgICB9XHJcbn0gIClcclxuXHJcbnJvdXRlci5wb3N0ICggJy9tZWNhbml6YWRvJyAsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSAoICcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicgKVxyXG4gICAgY29uc3QgeyBpZE1hcXVpbmEgLCBpZFBpZXphICwgaWRNb2xkZSAsIGZlY2hhUHJvZHVjY2lvbkRlc2RlICwgZmVjaGFQcm9kdWNjaW9uSGFzdGEgfSA9IHJlcS5ib2R5XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAnbGlzdGFPRUVtZWNhbml6YWRvJyApXHJcbiAgICAgICAgY29uc3QgbXNzcWwgPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXMgPSBuZXcgIG1zc3FsLlJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgbXlSZXF1ZXMuaW5wdXQgKCAnaWRNYXF1aW5hJyAsIG1zc3FsLkludCAsIGlkTWFxdWluYSApXHJcbiAgICAgICAgbXlSZXF1ZXMuaW5wdXQgKCAnaWRQaWV6YScgLCBtc3NxbC5JbnQgLCBpZFBpZXphIClcclxuICAgICAgICBteVJlcXVlcy5pbnB1dCAoICdpZE1vbGRlJyAsIG1zc3FsLkludCAsIGlkTW9sZGUgKVxyXG4gICAgICAgIG15UmVxdWVzLmlucHV0ICggJ2ZlY2hhUHJvZHVjY2lvbkRlc2RlJyAsIG1zc3FsLkRhdGUgLCBmZWNoYVByb2R1Y2Npb25EZXNkZSApXHJcbiAgICAgICAgbXlSZXF1ZXMuaW5wdXQgKCAnZmVjaGFQcm9kdWNjaW9uSGFzdGEnICwgbXNzcWwuRGF0ZSAsIGZlY2hhUHJvZHVjY2lvbkhhc3RhIClcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlcy5leGVjdXRlICggJ3BhX2RhdG9zT0VFbWVjJyApXHJcbiAgICAgICAgaWYgKCByZXN1bHQgKSB7XHJcbiAgICAgICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgICAgIHJlcy5qc29uICggcmVzdWx0LnJlY29yZHNldCApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKCBlICkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCAoICApXHJcbiAgICAgICAgcmVzLmpzb24gKCB7IG1lbnNhamUgOiBlLm1lc3NhZ2UgLCBzdGF0dXMgOiA0MDMgfSApXHJcbiAgICB9XHJcbn0gKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXIiLCJjb25zdCB7IFJvdXRlciB9ID0gcmVxdWlyZSAoICdleHByZXNzJyApXHJcbmNvbnN0IHJvdXRlciA9IFJvdXRlciAoICApXHJcblxyXG5yb3V0ZXIucG9zdCAoICcvcmVjaGF6b3NQcmltZXJhVnVlbHRhJyAgLCBhc3luYyAoIHJlcSwgcmVzICkgPT57XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlICggJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJyApXHJcbiAgICBjb25zdCB7IGZlY2hhRnVuZGljaW9uRGVzZGUgLCBmZWNoYUZ1bmRpY2lvbkhhc3RhICwgaWRNYXF1aW5hICwgaWRQaWV6YSAsIGlkTW9sZGUgfSA9IHJlcS5ib2R5XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IG1zc3FsID0gcmVxdWlyZSAoICdtc3NxbCcgKVxyXG4gICAgICAgIGNvbnN0IGNvbmV4aW9uID0gYXdhaXQgYWJyaXJDb25leGlvblBPT0wgKCAnY29uc3VsdGFSZXBvcnRlUmVjaGF6b3MnIClcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgbXNzcWwuUmVxdWVzdCAoIGNvbmV4aW9uIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnZmVjaGFGdW5kaWNpb25EZXNkZScgLCBtc3NxbC5EYXRlICwgZmVjaGFGdW5kaWNpb25EZXNkZSApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0ICggJ2ZlY2hhRnVuZGljaW9uSGFzdGEnICwgbXNzcWwuRGF0ZSAsIGZlY2hhRnVuZGljaW9uSGFzdGEgKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCAoICdpZE1hcXVpbmEnICwgbXNzcWwuSW50ICwgaWRNYXF1aW5hIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRQaWV6YScgLCBtc3NxbC5JbnQgLCBpZFBpZXphIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQgKCAnaWRNb2xkZScgLCBtc3NxbC5JbnQgLCBpZE1vbGRlIClcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QuZXhlY3V0ZSAoICdwYV9yZWNoYXpvc1RvdGFsZXMnIClcclxuICAgICAgICBpZiAoIHJlc3VsdCApIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICAgICAgcmVzLmpzb24gKCByZXN1bHQucmVjb3Jkc2V0IClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoIGUgKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICggIClcclxuICAgICAgICByZXMuanNvbiAoIHsgc3RhdHVzIDogNDAzICwgbWVuc2FqZSA6IGUubWVzc2FnZSB9IClcclxuICAgIH1cclxufSApXHJcbnJvdXRlci5wb3N0ICgnL3BhcmFkYXNNYXF1aW5hJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICBjb25zdCB7aWRBcmVhICwgZmVjaGFGdW5kaWNpb25EZXNkZSAsIGZlY2hhRnVuZGljaW9uSGFzdGF9ID0gcmVxLmJvZHlcclxuICAgIGNvbnN0IHsgYWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0wgfSA9IHJlcXVpcmUoJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJylcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgbXNzcWwgPSByZXF1aXJlKCdtc3NxbCcpXHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCgncmVwb3J0ZVBhcmFkYXNNYXF1aW5hJylcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgbXNzcWwuUmVxdWVzdChjb25leGlvbilcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoJ2lkQXJlYScgLCBtc3NxbC5JbnQgLCBpZEFyZWEpXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCdmZWNoYUZ1bmRpY2lvbkRlc2RlJyAsIG1zc3FsLkRhdGUgLCBmZWNoYUZ1bmRpY2lvbkRlc2RlKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCgnZmVjaGFGdW5kaWNpb25IYXN0YScgLCBtc3NxbC5EYXRlICwgZmVjaGFGdW5kaWNpb25IYXN0YSlcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QuZXhlY3V0ZSgncGFfcmVwb3J0ZVBhcmFkYXNNYXF1aW5hJylcclxuICAgICAgICBpZihyZXN1bHQpIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MKClcclxuICAgICAgICAgICAgcmVzLmpzb24ocmVzdWx0LnJlY29yZHNldClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MKClcclxuICAgICAgICByZXMuanNvbih7bWVuc2FqZSA6IGUubWVzc2FnZX0pXHJcbiAgICB9XHJcbn0gKVxyXG5cclxucm91dGVyLnBvc3QgKCcvZGV0YWxsZVBhcmFNYXF1aW5hWG1hcXVpbmEnICwgYXN5bmMgKHJlcSxyZXMpID0+IHtcclxuICAgIGNvbnN0IHthYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCB9ID0gcmVxdWlyZSgnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInKVxyXG4gICAgY29uc3QgeyBmZWNoYURlc2RlRnVuZGljaW9uICwgZmVjaGFIYXN0YUZ1bmRpY2lvbiAsIG5vbWJyZU1hcXVpbmEsIGlkQXJlYSB9ID0gcmVxLmJvZHlcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgbXNzcWwgPSByZXF1aXJlKCdtc3NxbCcpXHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCgnY29uc3VsdGFEZXRhbGxlUGFyZGFNYXF1aW5hJylcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgbXNzcWwuUmVxdWVzdChjb25leGlvbilcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoJ2ZlY2hhRGVzZGVGdW5kaWNpb24nICwgbXNzcWwuRGF0ZSAsIGZlY2hhRGVzZGVGdW5kaWNpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCgnZmVjaGFIYXN0YUZ1bmRpY2lvbicgLCBtc3NxbC5EYXRlICwgZmVjaGFIYXN0YUZ1bmRpY2lvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCdub21icmVNYXF1aW5hJyAsIG1zc3FsLlZhckNoYXIgLCBub21icmVNYXF1aW5hIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoJ2lkQXJlYScgLCBtc3NxbC5JbnQgLCBpZEFyZWEgKVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5leGVjdXRlICgncGFfZGV0YWxsZVBhcmFkYU1hcXVpbmEnKVxyXG4gICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICgpXHJcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3VsdC5yZWNvcmRzZXQpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2goZSkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCgpXHJcbiAgICAgICAgcmVzLmpzb24oe3N0YXR1cyA6IDQwMyAsIG1lbnNhamUgOiBlLm1lc3NhZ2V9KVxyXG4gICAgfVxyXG59KVxyXG5yb3V0ZXIucG9zdCAoJy9wYXJhZGFzTWFxdWluYVhwbScgLCBhc3luYyAocmVxLHJlcykgPT4ge1xyXG4gICAgY29uc3Qge2FicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlKCcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicpXHJcbiAgICBjb25zdCB7IGZlY2hhRGVzZGVGdW5kaWNpb24gLCBmZWNoYUhhc3RhRnVuZGljaW9uICB9ID0gcmVxLmJvZHlcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgbXNzcWwgPSByZXF1aXJlKCdtc3NxbCcpXHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCgnY29uc3VsdGFQYXJkYU1hcXVpbmFYcG0nKVxyXG4gICAgICAgIGNvbnN0IG15UmVxdWVzdCA9IG5ldyBtc3NxbC5SZXF1ZXN0KGNvbmV4aW9uKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCgnZmVjaGFEZXNkZUZ1bmRpY2lvbicgLCBtc3NxbC5EYXRlICwgZmVjaGFEZXNkZUZ1bmRpY2lvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCdmZWNoYUhhc3RhRnVuZGljaW9uJyAsIG1zc3FsLkRhdGUgLCBmZWNoYUhhc3RhRnVuZGljaW9uIClcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteVJlcXVlc3QuZXhlY3V0ZSAoJ3BhX3JlcG9ydGVQTScpXHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKClcclxuICAgICAgICAgICAgcmVzLmpzb24ocmVzdWx0LnJlY29yZHNldClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MKClcclxuICAgICAgICByZXMuanNvbih7c3RhdHVzIDogNDAzICwgbWVuc2FqZSA6IGUubWVzc2FnZX0pXHJcbiAgICB9XHJcbn0pXHJcbnJvdXRlci5wb3N0ICgnL2RldGFsbGVQYXJhTWFxdWluYVhwbScgLCBhc3luYyAocmVxLHJlcykgPT4ge1xyXG4gICAgY29uc3Qge2FicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MIH0gPSByZXF1aXJlKCcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicpXHJcbiAgICBjb25zdCB7IGZlY2hhRGVzZGVGdW5kaWNpb24gLCBmZWNoYUhhc3RhRnVuZGljaW9uICwgbm9tYnJlUGFyYWRhTWFxdWluYSB9ID0gcmVxLmJvZHlcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgbXNzcWwgPSByZXF1aXJlKCdtc3NxbCcpXHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCgnY29uc3VsdGFEZXRhbGxlUGFyZGFNYXF1aW5hWHBtMicpXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IG1zc3FsLlJlcXVlc3QoY29uZXhpb24pXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCdmZWNoYURlc2RlRnVuZGljaW9uJyAsIG1zc3FsLkRhdGUgLCBmZWNoYURlc2RlRnVuZGljaW9uIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoJ2ZlY2hhSGFzdGFGdW5kaWNpb24nICwgbXNzcWwuRGF0ZSAsIGZlY2hhSGFzdGFGdW5kaWNpb24gKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCgnbm9tYnJlUGFyYWRhTWFxdWluYScgLCBtc3NxbC5WYXJDaGFyICwgbm9tYnJlUGFyYWRhTWFxdWluYSApXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LmV4ZWN1dGUgKCdwYV9kZXRhbGxlUGFyYWRhTWFxdWluYTInKVxyXG4gICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MICgpXHJcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3VsdC5yZWNvcmRzZXQpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2goZSkge1xyXG4gICAgICAgIGNlcnJhckNvbmV4aW9uUE9PTCgpXHJcbiAgICAgICAgcmVzLmpzb24oe3N0YXR1cyA6IDQwMyAsIG1lbnNhamUgOiBlLm1lc3NhZ2V9KVxyXG4gICAgfVxyXG59KVxyXG5cclxucm91dGVyLnBvc3QgKCAnL3JlY2hhem9zWHBpZXphJyAsIGFzeW5jICggcmVxICwgcmVzKSA9PiB7XHJcbiAgICBjb25zdCB7IGZlY2hhRnVuZGljaW9uRGVzZGUgLCBmZWNoYUZ1bmRpY2lvbkhhc3RhICwgaWRNYXF1aW5hICwgaWRQaWV6YSAsIGlkTW9sZGUgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7YWJyaXJDb25leGlvblBPT0wgLCBjZXJyYXJDb25leGlvblBPT0x9ID0gcmVxdWlyZSgnLi4vY29uZXhpb25lcy9zcWxTZXJ2ZXInKVxyXG4gICAgY29uc3QgbXNzcWwgPSByZXF1aXJlKCdtc3NxbCcpXHJcbiAgICB0cnl7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCgnY29uc3VsdGFSZWNoYXpvc1htYXF1aW5hJylcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSAgbmV3IG1zc3FsLlJlcXVlc3QoY29uZXhpb24pXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCdmZWNoYUZ1bmRpY2lvbkRlc2RlJyAsIG1zc3FsLkRhdGUgLCBmZWNoYUZ1bmRpY2lvbkRlc2RlKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCgnZmVjaGFGdW5kaWNpb25IYXN0YScgLCBtc3NxbC5EYXRlICwgZmVjaGFGdW5kaWNpb25IYXN0YSlcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoJ2lkTWFxdWluYScgLCBtc3NxbC5JbnQgLCBpZE1hcXVpbmEpXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCdpZFBpZXphJyAsIG1zc3FsLkludCAsIGlkUGllemEpXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCdpZE1vbGRlJyAsIG1zc3FsLkludCAsIGlkTW9sZGUpXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LmV4ZWN1dGUoJ3BhX3JlY2hhem9zWHBpZXphcycpXHJcbiAgICAgICAgaWYocmVzdWx0KXtcclxuICAgICAgICAgICAgY2VycmFyQ29uZXhpb25QT09MKClcclxuICAgICAgICAgICAgcmVzLmpzb24ocmVzdWx0LnJlY29yZHNldClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaChlKXtcclxuICAgICAgICBjZXJyYXJDb25leGlvblBPT0woKVxyXG4gICAgICAgIHJlcy5qc29uKHtzdGF0dXMgOiA0MDMgLCBtZW5zYWplIDogZS5tZXNzYWdlfSlcclxuICAgIH1cclxufSlcclxuXHJcbnJvdXRlci5wb3N0KCcvY2Fsb3JpYXMnICwgYXN5bmMgKCByZXEgLCByZXMgKSA9PiB7XHJcbiAgICBjb25zdCB7IGZlY2hhUHJvZHVjY2lvbkRlc2RlICwgZmVjaGFQcm9kdWNjaW9uSGFzdGEgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGFicmlyQ29uZXhpb25QT09MICwgY2VycmFyQ29uZXhpb25QT09MICB9ID0gcmVxdWlyZSAoJy4uL2NvbmV4aW9uZXMvc3FsU2VydmVyJylcclxuICAgIHRyeXtcclxuICAgICAgICBjb25zdCBjb25leGlvbiA9IGF3YWl0IGFicmlyQ29uZXhpb25QT09MKCAncmVwb3J0ZUNhbG9yaWFzJyApXHJcbiAgICAgICAgY29uc3QgbXNzcWwgPSByZXF1aXJlICggJ21zc3FsJyApXHJcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IG1zc3FsLlJlcXVlc3QgKCBjb25leGlvbiApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCAnZmVjaGFQcm9kdWNjaW9uRGVzZGUnICwgbXNzcWwuRGF0ZSAsIGZlY2hhUHJvZHVjY2lvbkRlc2RlIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoICdmZWNoYVByb2R1Y2Npb25IYXN0YScgLCBtc3NxbC5EYXRlICwgZmVjaGFQcm9kdWNjaW9uSGFzdGEgKVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG15UmVxdWVzdC5leGVjdXRlKCAncGFfY2Fsb3JpYXNYdHJhYmFqYWRvcicgKVxyXG4gICAgICAgIGlmKHJlc3VsdCkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKClcclxuICAgICAgICAgICAgcmVzLmpzb24oIHJlc3VsdC5yZWNvcmRzZXQgKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MKClcclxuICAgICAgICByZXMuanNvbih7ICBzdGF0dXMgOiA0MDMgLCBtZW5zYWplIDogZS5tZXNzYWdlIH0pXHJcbiAgICB9XHJcbn0pXHJcbnJvdXRlci5wb3N0KCcvZGV0YWxsZUNhbG9yaWFzJyAsIGFzeW5jICggcmVxICwgcmVzICkgPT4ge1xyXG4gICAgY29uc3QgeyBmZWNoYVByb2R1Y2Npb25EZXNkZSAsIGZlY2hhUHJvZHVjY2lvbkhhc3RhICwgaWRUcmFiYWphZG9yIH0gPSByZXEuYm9keVxyXG4gICAgY29uc3QgeyBhYnJpckNvbmV4aW9uUE9PTCAsIGNlcnJhckNvbmV4aW9uUE9PTCAgfSA9IHJlcXVpcmUgKCcuLi9jb25leGlvbmVzL3NxbFNlcnZlcicpXHJcbiAgICB0cnl7XHJcbiAgICAgICAgY29uc3QgY29uZXhpb24gPSBhd2FpdCBhYnJpckNvbmV4aW9uUE9PTCggJ3JlcG9ydGVEZXRhbGxlQ2Fsb3JpYXMnIClcclxuICAgICAgICBjb25zdCBtc3NxbCA9IHJlcXVpcmUgKCAnbXNzcWwnIClcclxuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgbXNzcWwuUmVxdWVzdCAoIGNvbmV4aW9uIClcclxuICAgICAgICBteVJlcXVlc3QuaW5wdXQoICdmZWNoYVByb2R1Y2Npb25EZXNkZScgLCBtc3NxbC5EYXRlICwgZmVjaGFQcm9kdWNjaW9uRGVzZGUgKVxyXG4gICAgICAgIG15UmVxdWVzdC5pbnB1dCggJ2ZlY2hhUHJvZHVjY2lvbkhhc3RhJyAsIG1zc3FsLkRhdGUgLCBmZWNoYVByb2R1Y2Npb25IYXN0YSApXHJcbiAgICAgICAgbXlSZXF1ZXN0LmlucHV0KCAnaWRUcmFiYWphZG9yJyAsIG1zc3FsLkludCAsIGlkVHJhYmFqYWRvciApXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbXlSZXF1ZXN0LmV4ZWN1dGUoICdwYV9kZXRhbGxlQ2Fsb3JpYXNUcmFiYWphZG9yZScgKVxyXG4gICAgICAgIGlmKHJlc3VsdCkge1xyXG4gICAgICAgICAgICBjZXJyYXJDb25leGlvblBPT0wgKClcclxuICAgICAgICAgICAgcmVzLmpzb24oIHJlc3VsdC5yZWNvcmRzZXQgKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgY2VycmFyQ29uZXhpb25QT09MKClcclxuICAgICAgICByZXMuanNvbih7ICBzdGF0dXMgOiA0MDMgLCBtZW5zYWplIDogZS5tZXNzYWdlIH0pXHJcbiAgICB9XHJcbn0pXHJcbm1vZHVsZS5leHBvcnRzID0gcm91dGVyIl0sInNvdXJjZVJvb3QiOiIifQ==