!function(a){var e={};function o(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return a[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=a,o.c=e,o.d=function(a,e,n){o.o(a,e)||Object.defineProperty(a,e,{enumerable:!0,get:n})},o.r=function(a){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(a,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(a,"__esModule",{value:!0})},o.t=function(a,e){if(1&e&&(a=o(a)),8&e)return a;if(4&e&&"object"==typeof a&&a&&a.__esModule)return a;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:a}),2&e&&"string"!=typeof a)for(var r in a)o.d(n,r,function(e){return a[e]}.bind(null,r));return n},o.n=function(a){var e=a&&a.__esModule?function(){return a.default}:function(){return a};return o.d(e,"a",e),e},o.o=function(a,e){return Object.prototype.hasOwnProperty.call(a,e)},o.p="",o(o.s=8)}([function(a,e){a.exports=require("mssql")},function(a,e,o){const n=o(0);var r;r={user:process.env.USERSQL,password:process.env.PASSWORDSQL,database:process.env.DATABASESQL,server:process.env.SERVERSQL,options:{enableArithAbort:!0,encrypt:!1}};var i={abrirConexion:void 0,cerrarConexion:void 0,abrirConexionPOOL:void 0,cerrarConexionPOOL:void 0};i.abrirConexion=async function(){await n.connect(r).then(a=>{a._connected||console.log("Error de Conexion",a._connected)})},i.cerrarConexion=async function(){await(void 0).close()};const s={};i.abrirConexionPOOL=async a=>{if(!Object.prototype.hasOwnProperty.call(s,a)){const e=new n.ConnectionPool(r),o=e.close.bind(e);return e.close=(...e)=>(delete s[a],o(...e)),await e.connect(),s[a]=e,s[a]}},i.cerrarConexionPOOL=()=>Promise.all(Object.values(s).map(a=>a.close())),a.exports=i},function(a,e){a.exports=require("express")},function(a,e){a.exports=require("mongoose")},function(a,e){a.exports=require("bcrypt-nodejs")},function(a,e,o){const n=o(3),r=new n.Schema({userName:{type:String,required:!0,unique:!0},password:{type:String,required:!0},email:{type:String,required:!0,unique:!0},nombre:{type:String,required:!0},apellido:{type:String,required:!0},perfil:{type:String,required:!0,enum:["Admin","nivel-1","nivel-2","nivel-3","nivel-4","nivel-5"]}});n.set("useCreateIndex",!0),n.set("useFindAndModify",!1),a.exports=n.model("usuario",r)},function(a,e){a.exports={secret:"javier1905"}},function(a,e){a.exports=require("jsonwebtoken")},function(a,e,o){const n=o(2),r=o(9);console.log("production");const i=n();i.use(r()),i.use(n.json()),i.use(n.urlencoded({extended:!0})),i.use("/api/maquinas",o(10)),i.use("/api/usuarios",o(11)),i.use("/api/logueo",o(14)),i.use("/api/autentificasion",o(15)),i.use("/api/piezas",o(16)),i.use("/api/moldes",o(17)),i.use("/api/defectos",o(18)),i.use("/api/operaciones",o(19)),i.use("/api/procesos",o(20)),i.use("/api/turnos",o(21)),i.use("/api/paradasMaquina",o(22)),i.use("/api/trabajadores",o(23)),i.use("/api/planillasProduccion",o(24)),i.use("/api/tiposProceso",o(26)),i.set("port",process.env.PORT||5e3),i.listen(i.get("port"),(a,e)=>{e?console.log(e):console.log("Servidor corriendo en el PUERTO",i.get("port"))})},function(a,e){a.exports=require("cors")},function(a,e,o){const{Router:n}=o(2),r=n();r.get("/",async(a,e)=>{const{abrirConexion:n,cerrarConexion:r}=o(1);await n();const{Request:i}=o(0);(new i).query("select m.id as idMaquina, m.nombre as nombreMaquina, m.descripcion as descripcionMaquina\n    from maquinas m\n    where m.estado = 1",(a,o)=>{a?(e.json({mensaje:a.message}),r()):(e.json(o.recordset),r())})}),r.get("/xoperacion/:idOperacion",async(a,e)=>{const{abrirConexion:n,cerrarConexion:r}=o(1),{idOperacion:i}=a.params;await n();const{Request:s}=o(0);(new s).query(`select m.id as idMaquina, m.nombre as nombreMaquina\n    from maquinas m \n    join tipos_maquina tm on m.id_tipos_maquina = tm.id \n    where m.estado = 1 and tm.id_operacion = ${i}`,(a,o)=>{a?(e.json({mensaje:a.message}),r()):(e.json(o.recordset),r())})}),a.exports=r},function(a,e,o){const{Router:n}=o(2),r=o(4);o(12);const i=o(5),s=o(13),t=n();t.get("/",async(a,e)=>{await i.find((a,o)=>{a?e.status(403).send("Error en el request"):e.status(200).send(o)})}),t.get("/perfiles",async(a,e)=>{try{const a=await s.find();e.status(200).json(a)}catch(a){e.status(404).json({mensaje:a.message})}}),t.post("/perfiles",async(a,e)=>{try{const{perfil:o}=a.body,n=new s({perfil:o});await n.save(),e.status(200).json({mensaje:"Guardado Exitosamente !"})}catch(a){e.status(403).json({mensaje:a.message})}}),t.get("/:id",async(a,e)=>{try{const o=await i.findById({_id:a.params.id});e.status(200).json(o)}catch(a){e.status(403).json({mensaje:a.message})}}),t.post("/",async(a,e)=>{try{var{userName:o,password:n,email:s,nombre:t,apellido:d,perfil:c}=a.body;n=await r.hashSync(n);const p=new i({userName:o,password:n,email:s,nombre:t,apellido:d,perfil:c});await p.save();e.status(200).json({mensaje:"Usuario guardado exitosamente !"})}catch(a){e.status(403).json({error:a.message})}}),t.put("/:id",(a,e)=>{const{id:o}=a.params,n=a.body;n.password&&(n.password=r.hashSync(n.password)),i.findByIdAndUpdate({_id:o},n,(a,o)=>{a?e.status(403).json({error:a.message}):e.status(200).json({mensaje:"Modificado correctamente !"})})}),a.exports=t},function(a,e,o){const n=o(3);var r;r=process.env.MONGODB_URI,n.connect(r,{useNewUrlParser:!0,useUnifiedTopology:!0});var i=n.connection;i.on("error",console.error.bind(console,"error de conexion")),i.once("open",()=>{console.log("Conectado a MONGODB")})},function(a,e,o){const n=o(3),r=new n.Schema({perfil:{type:String,require:!0,unique:!0,enum:["Admin","nivel-1","nivel-2","nivel-3","nivel-4","nivel-5"]}});n.set("useCreateIndex",!0),n.set("useFindAndModify",!1),a.exports=n.model("perfil",r)},function(a,e,o){const{Router:n}=o(2),r=o(4),i=o(5),{secret:s}=o(6),t=o(7),d=n();d.post("/",async(a,e,o)=>{try{const o=await i.find({userName:a.body.userName});if(o[0]){if(await r.compareSync(a.body.password,o[0].password)){const a={userName:o[0].userName,email:o[0].email,nombre:o[0].nombre,apellido:o[0].apellido,perfil:o[0].perfil};t.sign(a,s,{expiresIn:14400},(a,o)=>{a?e.status(404).json({mensaje:"Error al generar el token"}):e.status(200).json({token:o})})}else e.status(403).json({mensaje:"Password Incorrecta"})}else e.status(403).json({mensaje:"Usuario Inexistente !"})}catch(a){e.status(404).json({e:a})}}),a.exports=d},function(a,e,o){const n=o(2),r=o(7),i=o(6),s=n();s.get("/",(a,e)=>{if(a.headers.authorization){const o=a.headers.authorization.split(" ")[1];r.verify(o,i.secret,(a,o)=>{a?e.status(403).json({mensaje:a.name}):e.status(200).json(o)})}else e.status(403).json({mensaje:"No envio el Token en el headers"})}),a.exports=s},function(a,e,o){const n=o(2).Router();n.get("/",async(a,e)=>{const{abrirConexion:n,cerrarConexion:r}=o(1);await n();const{Request:i}=new o(0);(new i).query("select id as idPieza, nombre as nombrePieza from piezas where estado = 1",(a,o)=>{a?(e.json({mensaje:a.message}),r()):(e.json(o.recordset),r())})}),n.get("/xmaquina/:idMaquina",async(a,e)=>{const{abrirConexion:n,cerrarConexion:r}=o(1);await n();const{idMaquina:i}=a.params;var{Request:s}=o(0);(new s).query(`select p.id as idPieza, p.nombre as nombrePieza\n        from piezas p\n        join procesos pro\n        on pro.id_pieza = p.id\n        where p.estado = 1 and pro.id_maquina = ${i}`,(a,o)=>{a?(e.json({mensaje:a.message}),r()):(e.json(o.recordset),r())})}),a.exports=n},function(a,e,o){const{Router:n}=o(2),r=n();r.get("/",async(a,e)=>{const{abrirConexion:n,cerrarConexion:r}=o(1);await n();const{Request:i}=o(0);(new i).query("select id as idMolde,id_pieza as idPieza, nombre as nombreMolde from moldes where estado = 1",(a,o)=>{a?(e.json({mensaje:a.message}),r()):(e.json(o.recordset),r())})}),r.get("/xpieza/:idPieza",async(a,e)=>{const{abrirConexion:n,cerrarConexion:r}=o(1);await n();const{idPieza:i}=a.params,{Request:s}=o(0);(new s).query("select id as idMolde, nombre as nombreMolde from moldes where estado = 1 and id_pieza = "+i,(a,o)=>{a?(e.json({mensaje:a.message}),r()):(e.json(o.recordset),r())})}),a.exports=r},function(a,e,o){const{Router:n}=o(2),r=n();r.get("/",async(a,e)=>{const{abrirConexion:n,cerrarConexion:r}=o(1);await n();const{Request:i}=o(0);(new i).query("select d.id as idDefecto, d.nombre as nombreDefecto, d.id_operacion as idOperacion,o.nombre as nombreOperacion from defectos d join operaciones o on d.id_operacion=o.id where d.estado = 1",(a,o)=>{a?(e.json({mensaje:a.message}),r()):(e.json(o.recordset),r())})}),a.exports=r},function(a,e,o){const{Router:n}=o(2),r=n();r.get("/",async(a,e)=>{const{abrirConexion:n,cerrarConexion:r}=o(1);await n();var{Request:i}=o(0);(new i).query("select id as idOperacion, nombre as nombreOperacion\n        from operaciones where estado = 1",(a,o)=>{a?(e.json({mensaje:a.message}),r()):(e.json(o.recordset),r())})}),a.exports=r},function(a,e,o){const{Router:n}=o(2);router=n(),router.get("/",async(a,e)=>{const{abrirConexion:n,cerrarConexion:r}=o(1);await n();const{Request:i}=o(0);(new i).query("select id as idTipoProceso, nombre as nombreTipoProceso\n        from tipos_proceso\n        where estado = 1",(a,o)=>{a?(e.json({mensaje:a.message}),r()):(e.json(o.recordset),r())})}),router.post("/xmaquinapiezatipo",async(a,e)=>{const{abrirConexion:n,cerrarConexion:r}=o(1);await n();const{idMaquina:i,idPieza:s,idTipoProceso:t}=a.body,{Request:d}=o(0);(new d).query(`select pro.id as idProceso, pro.descripcion as descripcionProceso\n        from procesos pro\n        where pro.estado = 1\n        and pro.id_pieza = ${s}\n        and pro.id_maquina = ${i}\n        and pro.id_tipos_proceso = ${t}`,(a,o)=>{a?(e.json({mensaje:a.message}),r()):(e.json(o.recordset),r())})}),a.exports=router},function(a,e,o){const{Router:n}=o(2),r=n();r.get("/",async(a,e)=>{const{abrirConexion:n,cerrarConexion:r}=o(1);await n();var{Request:i}=o(0);(new i).query("select t.id as idTurno, t.descripcion as descripcionTurno,t.hs_inicio as hsInicioTurno ,t.hs_fin as hsFinTurno  \n        from turnos t\n        where estado = 1",(a,o)=>{a?(e.json({mensaje:a.message}),r()):(e.json(o.recordset),r())})}),a.exports=r},function(a,e,o){const{Router:n}=o(2),r=n();r.get("/",async(a,e)=>{var{abrirConexion:n,cerrarConexion:r}=o(1);await n();var{Request:i}=o(0);(new i).query("select pm.id as idParadaMaquina, pm.nombre as nombreParadaMaquina, pm.tipo as tipoParadaMaquina, pm.id_area as idArea, a.nombre as nombreArea\n        from paradas_maquina pm\n\t\tjoin areas a on pm.id_area=a.id\n        where pm.estado = 1",(a,o)=>{a?(r(),e.json({mensaje:a.message})):(r(),e.json(o.recordset))})}),a.exports=r},function(a,e,o){const{Router:n}=o(2),r=n();r.get("/",async(a,e)=>{const{abrirConexion:n,cerrarConexion:r}=o(1),{Request:i}=o(0);await n(),(new i).query("select t.id as idTrabajador, t.nombre as nombreTrabajador, t.apellido as apellidoTrabajador,\n        t.f_nacimiento as fechaNacimientoTrabajador, t.f_ingreso as fechaIngresoTrabajador,\n        t.id_puesto as idPuestoTrabajador, p.nombre as nombrePuesto\n        from trabajadores t\n        join puestos p on t.id_puesto=p.id\n        where t.estado = 1",(a,o)=>{a?(e.json({mensaje:a.message}),r()):(e.json(o.recordset),r())})}),a.exports=r},function(a,e,o){const{Router:n}=o(2),r=n();r.post("/listado",async(a,e)=>{const{fechaDesdeProduccion:n,fechaHastaProduccion:r,fechaDesdeFundicion:i,fechaHastaFundicon:s,idMaquina:t,idPieza:d,idMolde:c,idTipoProceso:p,idTipoMaquina:l}=a.body,{abrirConexionPOOL:u,cerrarConexionPOOL:m}=o(1),_=await u(),{Transaction:f}=o(0),j=new f(_),{Request:b}=o(0);j.begin(async a=>{a&&e.json({mensaje:a.message});const o=`set dateformat dmy ;\n        select pl.id as idPlanilla, pl.fe_carga as fechaCarga, pl.fe_produccion as fechaProduccion, pl.fe_fundicion as fechaFundicion, \n        pl.hora_inicio as horaInicio , pl.hora_fin as horaFin,maq.nombre as nombreMaquina , pie.nombre as nombrePieza , \n        mol.nombre, tp.nombre as nombreTipoProceso , pl.id_molde as idMolde , pl.id_proceso as idProceso\n        from planillas_produccion pl\n        join moldes mol on pl.id_molde = mol.id\n        join procesos p on pl.id_proceso = p.id\n        join piezas pie on p.id_pieza = pie.id\n        join maquinas maq on p.id_maquina = maq.id\n        join tipos_proceso tp on p.id_tipos_proceso = tp.id\n        where pl.estado = 1\n        and pl.fe_fundicion between '${i}' and '${s}'\n        and pl.fe_produccion between '${n}' and '${r}'\n        and ( ${t} is null  or p.id_maquina =  ${t})\n        and ( ${d} is null  or p.id_pieza =  ${d})\n        and ( ${c} is null  or pl.id_molde =  ${c})\n        and ( ${p} is null  or p.id_tipos_proceso =  ${p})\n        and ( ${l} is null  or maq.id_tipos_maquina =  ${l})`,u=new b(j),_=new b(j),f=new b(j),h=new b(j);new b(j);var x,y,q,w,P;try{var v=await u.query(o);if(Array.isArray(v.recordset)){x=v.recordset;var z="";x.forEach((a,e)=>{e===v.recordset.length-1?z+=`${parseInt(a.idPlanilla)} `:z+=`${parseInt(a.idPlanilla)} ,`});var g=`select txp.id as idTrabajadorXplanilla , t.nombre as nombreTrabajador, t.apellido as apellidoTrabajador, tur.descripcion  as turnoTrabajador ,\n                txp.hora_inicio as horaInicio , txp.hora_fin as horaFin,  txp.pza_producidas as piezasProducidas , \n                txp.calorias as calorias , txp.id_planilla as idPlanilla , txp.id_trabajador as idTrabajador , txp.id_turno as idTurno\n                from trabajador_x_planilla txp\n                join trabajadores t on txp.id_trabajador = t.id\n                join turnos tur on txp.id_turno = tur.id\n                where txp.estado = 1\n                and txp.id_planilla in ( ${z} )  ;`,T=` select pmxp.id as idParadaMaquinaXplanilla , pm.id as idParadaMaquina , pm.nombre as nombreParadaMaquina , \n                pmxp.hora_incio as horaInicioParadaMaquina , pmxp.hora_fin as horaFinParadaMaquina , pmxp.id_planilla as idPlanilla\n                from paradas_maquinas_x_planilla pmxp\n                join paradas_maquina pm on pmxp.id_paradas_maquina = pm.id\n                where pmxp.estado = 1\n                and pmxp.id_planilla in ( ${z} ) ;`;const a=await _.query(g+T);if(a.recordsets[0]&&a.recordsets[1]){y=a.recordsets[0],P=a.recordsets[1];var R="";y.forEach((a,e)=>{e===y.length-1?R+=`${parseInt(a.idTrabajadorXplanilla)} `:R+=`${parseInt(a.idTrabajadorXplanilla)} ,`});var I=` select rxtyp.id as idRechazoXtrabajadorYplanilla , d.nombre as nombreRechazo , \n                    rxtyp.tipo as tipoRechazo , rxtyp.cantidad as cantidadRechazos , rxtyp.id_trabajador_x_planilla as idTrabajadorXplanilla , rxtyp.id_defecto as idDefecto\n                    from rechazos_x_trabajador_y_planilla rxtyp\n                    join defectos d on rxtyp.id_defecto = d.id\n                    where rxtyp.estado = 1\n                    and rxtyp.id_trabajador_x_planilla in ( ${R} )`;const o=await f.query(I);if(o.recordset){q=o.recordset;var M="";q.forEach((a,e)=>{e===q.length-1?M+=`${parseInt(a.idRechazoXtrabajadorYplanilla)} `:M+=`${parseInt(a.idRechazoXtrabajadorYplanilla)} ,`});const a=` select zxryp.id as idZona , zxryp.letra as letraZona ,\n                        zxryp.numero as numeroZona , zxryp.cantidad as cantidadZona ,\n                        zxryp.id_rechazos_x_trabajador_y_planilla as idRechazosXtrabajadorYplanilla\n                        from zonas_x_rechazo_x_planilla zxryp\n                        where zxryp.estado = 1\n                        and zxryp.id_rechazos_x_trabajador_y_planilla in ( ${M} )`;var C=await h.query(a);C.recordset&&(w=C.recordset,x.forEach((a,e)=>{a.vecTrabajadores=[],a.vecParadasMaquina=[],P.forEach(e=>{if(parseInt(e.idPlanilla)===parseInt(a.idPlanilla)){var o={idParadaMaquinaXplanilla:e.idParadaMaquinaXplanilla,idParadaMaquina:e.idParadaMaquina,nombreParadaMaquina:e.nombreParadaMaquina,horaInicioParadaMaquina:e.horaInicioParadaMaquina,horaFinParadaMaquina:e.horaFinParadaMaquina};a.vecParadasMaquina.push(o)}}),y.forEach((e,o)=>{if(parseInt(a.idPlanilla)===parseInt(e.idPlanilla)){var n={idTrabajadorXplanilla:e.idTrabajadorXplanilla,idTrabajador:e.idTrabajador,idTurno:e.idTurno,nombreTrabajador:e.nombreTrabajador,apellidoTrabajador:e.apellidoTrabajador,turnoTrabajador:e.turnoTrabajador,horaInicio:e.horaInicio,horaFin:e.horaFin,piezasProducidas:e.piezasProducidas,calorias:e.calorias,vecRechazos:[]};q.forEach(a=>{if(parseInt(n.idTrabajadorXplanilla)===parseInt(a.idTrabajadorXplanilla)){var e={idRechazoXtrabajadorYplanilla:a.idRechazoXtrabajadorYplanilla,idDefecto:a.idDefecto,nombreRechazo:a.nombreRechazo,tipoRechazo:a.tipoRechazo,cantidadRechazos:a.cantidadRechazos,vecZonas:[]};w.forEach(a=>{if(parseInt(a.idRechazosXtrabajadorYplanilla)===parseInt(e.idRechazoXtrabajadorYplanilla)){var o={idZona:a.idZona,letraZona:a.letraZona,numeroZona:a.numeroZona,cantidadZona:a.cantidadZona};e.vecZonas.push(o)}}),n.vecRechazos.push(e)}}),a.vecTrabajadores.push(n)}})}),j.commit(),m(),e.json(x))}}}}catch(a){j.rollback(),m(),e.json({mensaje:a.message})}})}),r.post("/",async(a,e)=>{var n,{fechaProduccion:r,fechaFundicion:i,idTurno:s,HoraInicioProduccion:t,HoraFinProduccion:d,idOperacion:c,idMaquina:p,idPieza:l,idMolde:u,idTipoProceso:m,vecOperarios:_,vecParadasMaquinaSeleccionada:f}=a.body;const{abrirConexionPOOL:j,cerrarConexionPOOL:b}=o(1),h=await j("consultasa"),{Transaction:x}=o(0),y=o(0),{Request:q,PreparedStatement:w}=o(0),P=await new x(h),v=await new w(P),z=await new q(P),g=o(25);P.begin((async function(a){if(a)console.log("err commit");else{(async()=>{try{v.input("fe_produccion",y.Date),v.input("fe_fundicion",y.Date),v.input("hora_inicio",y.Time),v.input("hora_fin",y.Time),v.input("id_molde",y.Int),await v.prepare(`set dateformat dmy ;\n                        declare @idProce int ;\n                        set @idProce = (select top 1 id from procesos p  where p.id_maquina = ${p} and p.id_pieza = ${l} and id_tipos_proceso = ${m} and estado = 1 ) ;\n                        insert into planillas_produccion\n                        ( fe_carga , fe_produccion , fe_fundicion , hora_inicio , hora_fin , id_proceso , id_molde  , estado )\n                        values\n                        ( GETDATE() , @fe_produccion , @fe_fundicion , @hora_inicio , @hora_fin , @idProce , @id_molde , 1 )`);const c={fe_produccion:r,fe_fundicion:i,hora_inicio:new Date(`2020-02-15T${t}:00`),hora_fin:new Date(`2020-02-15T${d}:00`),id_turno:parseInt(s),id_molde:parseInt(u)};var a;if(a=await v.execute(c),await v.unprepare()&&(P.rollback(),b(),e.json({mensaje:"Error InsercionPlanilla".yellow})),a&&(n=await z.query("select max( id ) as idPlanilla from planillas_produccion")),n.recordset[0].idPlanilla&&!isNaN(n.recordset[0].idPlanilla)){var o=[];_.forEach(a=>{var e={calorias:parseInt(a.calorias),pza_producidas:parseInt(a.produccion),hora_inicio:new Date(`2020-02-15T${a.horaInicio}:00`),hora_fin:new Date(`2020-02-15T${a.horaFin}:00`),id_trabajador:parseInt(a.idOperario),id_planilla:parseInt(n.recordset[0].idPlanilla),id_turno:parseInt(a.idTurno),vecRechazos:a.vecRechazo};o.push(e)}),g.eachSeries(o,(a,e)=>{const o=new q(P);o.input("calorias",y.Int,a.calorias),o.input("pza_producidas",y.Int,a.pza_producidas),o.input("id_turno",y.Int,a.id_turno),o.input("hora_inicio",y.Time,a.hora_inicio),o.input("hora_fin",y.Time,a.hora_fin),o.input("id_trabajador",y.Int,a.id_trabajador),o.input("id_planilla",y.Int,a.id_planilla);var n=[];a.vecRechazos.forEach(a=>{var e={cantidad:parseInt(a.cantidadRechazo),tipo:a.tipo?1:0,id_defecto:parseInt(a.idRechazo),vecZonas:a.vecZonas};n.push(e)});var r="insert into trabajador_x_planilla\n                            (calorias , pza_producidas, id_turno , hora_inicio , hora_fin , id_trabajador , id_planilla , estado)\n                            values\n                            (@calorias , @pza_producidas , @id_turno , @hora_inicio , @hora_fin , @id_trabajador , @id_planilla , 1) ;\n                            declare @id_trabajador_x_planilla int ;\n                            declare @id_rechazos_x_trabajador_y_planilla int ;\n                            set @id_trabajador_x_planilla = ( select max( id ) as idTrabajadorXplanilla from trabajador_x_planilla ) ; ";n.forEach(a=>{r+=`insert into rechazos_x_trabajador_y_planilla\n                                (cantidad , tipo , id_defecto , id_trabajador_x_planilla , estado)\n                                values\n                                ( ${a.cantidad}, ${a.tipo} , ${a.id_defecto} , @id_trabajador_x_planilla ,1) ;\n                                set @id_rechazos_x_trabajador_y_planilla = (select max(id) from rechazos_x_trabajador_y_planilla) ; `;var e=[];a.vecZonas.forEach(a=>{var o={cantidad:parseInt(a.cantidad),letra:a.letra,numero:parseInt(a.numero)};e.push(o)}),e.forEach(a=>{r+=` insert into zonas_x_rechazo_x_planilla\n                                    (cantidad , letra , numero , id_rechazos_x_trabajador_y_planilla , estado )\n                                    values\n                                    ( ${a.cantidad} , '${a.letra}' , ${a.numero} , @id_rechazos_x_trabajador_y_planilla , 1 ) ; `})}),o.query(r,(a,o)=>{a?e(a):e()})},a=>{if(a)P.rollback(),b(),e.json({mensaje:a.message});else{var o=[];f.forEach(a=>{var e={hora_inicio:new Date(`2020-02-15T${a.desdeParadaMaquina}:00`),hora_fin:new Date(`2020-02-15T${a.hastaParadaMaquina}:00`),id_paradas_maquina:parseInt(a.idParadaMaquina),id_planilla:n.recordset[0].idPlanilla};o.push(e)}),g.eachSeries(o,(a,e)=>{const o=new q(P);o.input("hora_incio",y.Time,a.hora_inicio),o.input("hora_fin",y.Time,a.hora_fin),o.input("id_paradas_maquina",y.Int,a.id_paradas_maquina),o.input("id_planilla",y.Int,a.id_planilla),o.query("insert into paradas_maquinas_x_planilla\n                                        ( hora_incio , hora_fin , id_paradas_maquina , id_planilla , estado )\n                                        values\n                                        ( @hora_incio , @hora_fin , @id_paradas_maquina , @id_planilla , 1 )",(a,o)=>{a?e(a):e()})},a=>{a?(P.rollback(),b(),e.json({mensaje:a.message})):(P.commit(),b(),e.setHeader("Content-Type","text/event-stream"),e.json({mensaje:"Transaccion exitosa"}))})}})}//! FIN  IIF
}//! FIN DEL TRY
catch(a){P.rollback(),b(),e.json({mensaje:a.message,mensaje2:"Error catch FINAL"})}})()}}))}),a.exports=r},function(a,e){a.exports=require("async")},function(a,e,o){const{Router:n}=o(2),r=n();r.get("/",async(a,e)=>{const{abrirConexion:n,cerrarConexion:r}=o(1);await n();const{Request:i}=o(0);(new i).query("select id as idTipoProceso, nombre as nombreTipoProceso from tipos_proceso where estado = 1 ",(a,o)=>{a?(r(),e.json({mensaje:a.message})):(r(),e.json(o.recordset))})}),r.post("/",async(a,e)=>{const{idPieza:n,idMaquina:r}=a.body,{abrirConexion:i,cerrarConexion:s}=o(1);await i();const{Request:t}=o(0);(new t).query(`select tp.id as idTipoProceso, tp.nombre as nombreTipoProceso from tipos_proceso tp\n    join procesos p on tp.id = p.id_tipos_proceso where p.id_maquina = ${r} and p.id_pieza = ${n} and tp.estado = 1`,(a,o)=>{a?(s(),e.json({mensaje:a.message})):(s(),e.json(o.recordset))})}),a.exports=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,