!function(a){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return a[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=a,n.c=e,n.d=function(a,e,o){n.o(a,e)||Object.defineProperty(a,e,{enumerable:!0,get:o})},n.r=function(a){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(a,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(a,"__esModule",{value:!0})},n.t=function(a,e){if(1&e&&(a=n(a)),8&e)return a;if(4&e&&"object"==typeof a&&a&&a.__esModule)return a;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:a}),2&e&&"string"!=typeof a)for(var i in a)n.d(o,i,function(e){return a[e]}.bind(null,i));return o},n.n=function(a){var e=a&&a.__esModule?function(){return a.default}:function(){return a};return n.d(e,"a",e),e},n.o=function(a,e){return Object.prototype.hasOwnProperty.call(a,e)},n.p="",n(n.s=9)}([function(a,e){a.exports=require("mssql")},function(a,e,n){const o=n(0);var i;i={user:process.env.USERSQL,password:process.env.PASSWORDSQL,database:process.env.DATABASESQL,server:process.env.SERVERSQL,options:{enableArithAbort:!0,encrypt:!1}};var t={abrirConexion:void 0,cerrarConexion:void 0,abrirConexionPOOL:void 0,cerrarConexionPOOL:void 0};t.abrirConexion=async function(){await o.connect(i).then(a=>{a._connected||console.log("Error de Conexion",a._connected)})},t.cerrarConexion=async function(){await(void 0).close()};const r={};t.abrirConexionPOOL=async a=>{if(!Object.prototype.hasOwnProperty.call(r,a)){const e=new o.ConnectionPool(i),n=e.close.bind(e);return e.close=(...e)=>(delete r[a],n(...e)),await e.connect(),r[a]=e,r[a]}},t.cerrarConexionPOOL=()=>Promise.all(Object.values(r).map(a=>a.close())),a.exports=t},function(a,e){a.exports=require("express")},function(a,e){a.exports=require("jsonwebtoken")},function(a,e){a.exports={secret:"javier1905"}},function(a,e){a.exports=require("async")},function(a,e){a.exports=require("mongoose")},function(a,e){a.exports=require("bcrypt")},function(a,e){a.exports=require("moment")},function(a,e,n){const o=n(2),i=n(10);const t=o();t.use(i()),t.use(o.json()),t.use(o.urlencoded({extended:!0})),t.use(n(11)),t.use("/api/authRouterReact/admin",n(12)),t.use("/api/authRouterReact/nivel1",n(13)),t.use("/api/authRouterReact/nivel2",n(14)),t.use("/api/authRouterReact/nivel3",n(15)),t.use("/api/authRouterReact/nivel4",n(16)),t.use("/api/authRouterReact/nivel5",n(17)),t.use("/api/maquinas",n(18)),t.use("/api/usuarios",n(19),n(20)),t.use("/api/logueo",n(24)),t.use("/api/autentificasion",n(25)),t.use("/api/piezas",n(26)),t.use("/api/moldes",n(27)),t.use("/api/defectos",n(28)),t.use("/api/operaciones",n(29)),t.use("/api/procesos",n(30)),t.use("/api/turnos",n(31)),t.use("/api/paradasMaquina",n(32)),t.use("/api/trabajadores",n(33)),t.use("/api/planillasProduccion",n(34)),t.use("/api/tiposProceso",n(35)),t.use("/api/clientes",n(36)),t.use("/api/tiposMaterial",n(37)),t.use("/api/areas",n(38)),t.use("/api/tiposMaquina",n(39)),t.use("/api/plantas",n(40)),t.use("/api/puestos",n(41)),t.use("/api/oee",n(42)),t.use("/api/reportes",n(43)),t.set("port",process.env.PORT||5e3),t.listen(t.get("port"),(a,e)=>{e?console.log(e):console.log("Servidor corriendo en el PUERTO",t.get("port"))})},function(a,e){a.exports=require("cors")},function(a,e,n){const o=n(3),{secret:i}=n(4);a.exports=function(a,e,n){if("/api/logueo"===a.path)return n();if(a.headers.authorization){const t=a.headers.authorization.split(" ")[1];o.verify(t,i,(a,o)=>{if(!a)return n();e.status(403).json({mensaje:a.message,otro:"error  en la commprovacion token"})})}else e.status(403).json({mensaje:"No envio el tojen en el headers"})}},function(a,e,n){const{Router:o}=n(2),i=n(3),{secret:t}=n(4),r=o();r.get("/",(a,e)=>{const n=a.headers.authorization.split(" ")[1];i.verify(n,t,(a,n)=>a?e.status(403).json({mensaje:a.message}):"admin"!==n.perfil?e.status(403).json({mensaje:"usted no es admin"}):void e.status(200).json({permiso:!0}))}),a.exports=r},function(a,e,n){const{Router:o}=n(2),i=n(3),{secret:t}=n(4),r=o();r.get("/",(a,e)=>{const n=a.headers.authorization.split(" ")[1];i.verify(n,t,(a,n)=>a?e.status(403).json({mensaje:a.message}):"nivel-1"!==n.perfil?e.status(403).json({mensaje:"usted no es nivel 1"}):void e.status(200).json({permiso:!0}))}),a.exports=r},function(a,e,n){const{Router:o}=n(2),i=n(3),{secret:t}=n(4),r=o();r.get("/",(a,e)=>{const n=a.headers.authorization.split(" ")[1];i.verify(n,t,(a,n)=>a?e.status(403).json({mensaje:a.message}):"nivel-2"!==n.perfil?e.status(403).json({mensaje:"usted no es nivel 2"}):void e.status(200).json({permiso:!0}))}),a.exports=r},function(a,e,n){const{Router:o}=n(2),i=n(3),{secret:t}=n(4),r=o();r.get("/",(a,e)=>{const n=a.headers.authorization.split(" ")[1];i.verify(n,t,(a,n)=>a?e.status(403).json({mensaje:a.message}):"nivel-3"!==n.perfil?e.status(403).json({mensaje:"usted no es nivel 3"}):void e.status(200).json({permiso:!0}))}),a.exports=r},function(a,e,n){const{Router:o}=n(2),i=n(3),{secret:t}=n(4),r=o();r.get("/",(a,e)=>{const n=a.headers.authorization.split(" ")[1];i.verify(n,t,(a,n)=>a?e.status(403).json({mensaje:a.message}):"nivel-4"!==n.perfil?e.status(403).json({mensaje:"usted no es nivel 4"}):void e.status(200).json({permiso:!0}))}),a.exports=r},function(a,e,n){const{Router:o}=n(2),i=n(3),{secret:t}=n(4),r=o();r.get("/",(a,e)=>{const n=a.headers.authorization.split(" ")[1];i.verify(n,t,(a,n)=>a?e.status(403).json({mensaje:a.message}):"nivel-5"!==n.perfil?e.status(403).json({mensaje:"usted no es nivel 5"}):void e.status(200).json({permiso:!0}))}),a.exports=r},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{Request:t}=n(0);(new t).query("select m.id as idMaquina , m.nombre as nombreMaquina , m.descripcion as descripcionMaquina ,\n    m.id_tipos_maquina as idTipoMaquina , tm.nombre as nombreTipoMaquina , m.id_planta as idPlanta , p.nombre as nombrePlanta\n    from maquinas m\n    join tipos_maquina tm on m.id_tipos_maquina = tm.id\n    join plantas p on m.id_planta = p.id\n    where m.estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),i.get("/xoperacion/:idOperacion",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1),{idOperacion:t}=a.params;await o();const{Request:r}=n(0);(new r).query(`select m.id as idMaquina, m.nombre as nombreMaquina\n    from maquinas m\n    join tipos_maquina tm on m.id_tipos_maquina = tm.id\n    where m.estado = 1 and tm.id_operacion = ${t}`,(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),i.post("/insert",async(a,e)=>{const{nombreMaquina:o,descripcionMaquina:i,idTipoMaquina:t,idPlanta:r}=a.body,{abrirConexionPOOL:s,cerrarConexionPOOL:c}=n(1),{Request:d,VarChar:u,Int:p}=n(0);try{const a=new d(await s("insertMaquina"));a.input("nombreMaquina",u,o),a.input("descripcionMaquina",u,i),a.input("idTipoMaquina",p,t),a.input("idPlanta",p,r);const n="insert into maquinas ( nombre , descripcion , id_tipos_maquina , id_planta , estado )\n    values\n    ( @nombreMaquina , @descripcionMaquina , @idTipoMaquina , @idPlanta , 1 )";await a.query(n)&&(c(),e.json({mensaje:"Maquina Insertada correctamente",status:200}))}catch(a){c(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idMaquina:o,nombreMaquina:i,descripcionMaquina:t,idTipoMaquina:r,idPlanta:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=n(1),{Request:u,VarChar:p,Int:l}=n(0);try{const a=new u(await c("updateMaquina"));a.input("nombreMaquina",p,i),a.input("descripcionMaquina",p,t),a.input("idTipoMaquina",l,r),a.input("idPlanta",l,s),a.input("idMaquina",l,o);const n="update maquinas\n    set\n    nombre = @nombreMaquina ,\n    descripcion = @descripcionMaquina ,\n    id_tipos_maquina = @idTipoMaquina ,\n    id_planta = @idPlanta\n    where id = @idMaquina";await a.query(n)&&(d(),e.json({mensaje:"Maquina actualizada correctamente",status:200}))}catch(a){d(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idMaquina:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deleteMaquina"));a.input("idMaquina",s,o);const n="update maquinas\n    set\n    estado = 0\n    where id = @idMaquina";await a.query(n)&&(t(),e.json({mensaje:"Maquina eliminada correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const o=n(3),{secret:i}=n(4);a.exports=(a,e,n)=>{const t=a.headers.authorization.split(" ")[1];o.verify(t,i,(a,o)=>a?e.status(403).json({mensaje:a.message}):"Admin"!==o.perfil?e.status(403).json({mensaje:"Acceso denegado por no ser admin"}):n())}},function(a,n,o){const{Router:i}=o(2),t=o(7);o(21);o(22),o(23);const r=i();r.get("/",async(a,n)=>{const{abrirConexionPOOL:i,cerrarConexionPOOL:t}=o(1);try{const a=await i("liastaUsuario"),r=new(o(0).Request)(a),s=await r.execute("pa_listaUsuarios");s?(t(),n.json(s.recordset)):(t(),n.status(404).json({status:403,mensaje:e.message}))}catch(a){t(),n.status(404).json({status:403,mensaje:a.message})}}),
//! lista de perfiles
r.get("/perfiles",async(a,n)=>{const{abrirConexionPOOL:i,cerrarConexionPOOL:t}=o(1);try{const a=await i("listaPerfiles"),r=new(o(0).Request)(a),s=await r.execute("pa_listaPerfiles");s?(t(),n.json(s.recordset)):(t(),n.status(404).json({status:403,mensaje:e.message}))}catch(a){t(),n.status(404).json({status:403,mensaje:a.message})}}),//! inser perfiles MONGO
//! consulta usuario por id
r.get("/:id",async(a,n)=>{const i=a.params.id,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=o(1);try{const a=await t("getUsexId"),s=o(0),c=new s.Request(a);c.input("idUsuario",s.Int,i);const d="select\n        u.id as idUsuario ,\n        u.userName as userName ,\n        u.email as email ,\n        u.nombre as nombreUsuario ,\n        u.apellido as apellidoUsuario ,\n        p.id as idPerfil ,\n        p.nombre as nombrePerfil\n        from usuarios u\n        join perfiles p on p.id = u.id_perfil\n        where u.id = @idUsuario",u=await c.query(d);u?(r(),n.json(u.recordset)):(r(),n.status(404).json({status:403,mensaje:e.message}))}catch(a){r(),n.status(404).json({status:403,mensaje:a.message})}}),//!guarda usuario
r.post("/",async(a,e)=>{const{abrirConexionPOOL:n,cerrarConexionPOOL:i}=o(1),{userName:r,password:s,email:c,nombre:d,apellido:u,idPerfil:p}=a.body;try{const a=await n("saveUser"),l=o(0),m=new l.Request(a),P=t.hashSync(s,10);console.log(P),m.input("userName",l.VarChar,r),m.input("password",l.VarChar,P),m.input("email",l.VarChar,c),m.input("nombre",l.VarChar,d),m.input("apellido",l.VarChar,u),m.input("idPerfil",l.Int,p);const j=await m.execute("pa_insertUsuarios");j&&(i(),console.log(j),e.status(200).json({mensaje:"usuario insertado correctamente !"}))}catch(a){i(),e.status(403).json({error:a.message})}}),r.put("/",async(a,e)=>{const{abrirConexionPOOL:n,cerrarConexionPOOL:i}=o(1),{userName:r,password:s,email:c,nombre:d,apellido:u,idPerfil:p,idUsuario:l}=a.body;try{const a=await n("updateUser"),m=o(0),P=new m.Request(a);P.input("userName",m.VarChar,r),P.input("password",m.VarChar,t.hashSync(s)),P.input("email",m.VarChar,c),P.input("nombre",m.VarChar,d),P.input("apellido",m.VarChar,u),P.input("idPerfil",m.Int,p),P.input("idUsuario",m.Int,l);const j=await P.execute("pa_updateUsuarios");j&&(i(),console.log(j),e.status(200).json({mensaje:"usuario insertado correctamente !"}))}catch(a){i(),e.status(403).json({error:err.message})}}),a.exports=r},function(a,e,n){const o=n(6);var i;i=process.env.MONGODB_URI,o.connect(i,{useNewUrlParser:!0,useUnifiedTopology:!0});var t=o.connection;t.on("error",console.error.bind(console,"error de conexion")),t.once("open",()=>{console.log("Conectado a MONGODB")})},function(a,e,n){const o=n(6),i=new o.Schema({userName:{type:String,required:!0,unique:!0},password:{type:String,required:!0},email:{type:String,required:!0,unique:!0},nombre:{type:String,required:!0},apellido:{type:String,required:!0},perfil:{type:String,required:!0,enum:["Admin","nivel-1","nivel-2","nivel-3","nivel-4","nivel-5"]}});o.set("useCreateIndex",!0),o.set("useFindAndModify",!1),a.exports=o.model("usuario",i)},function(a,e,n){const o=n(6),i=new o.Schema({perfil:{type:String,require:!0,unique:!0,enum:["Admin","nivel-1","nivel-2","nivel-3","nivel-4","nivel-5"]}});o.set("useCreateIndex",!0),o.set("useFindAndModify",!1),a.exports=o.model("perfil",i)},function(a,e,n){const{Router:o}=n(2),i=n(7),{secret:t}=n(4),r=n(3),s=o();s.post("/",async(a,e,o)=>{const{abrirConexionPOOL:s,cerrarConexionPOOL:c}=n(1),{userName:d,password:u}=a.body;try{const a=await s("consultaUsuario"),{Request:o,VarChar:p}=n(0),l=new o(a);l.input("userName",p,d);const m=await l.execute("pa_getUsuarioXnombreUsuario"),P=String(m.recordset[0].password).trim();if(m.recordset.length>0)if(c(),i.compareSync(u,P)){const a={userName:m.recordset[0].userName,email:m.recordset[0].email,nombre:m.recordset[0].nombreUsuario,apellido:m.recordset[0].apellidoUsuario,perfil:m.recordset[0].nombrePerfil};r.sign(a,t,{expiresIn:14400},(a,n)=>{a?e.status(404).json({mensaje:"Error al generar el token"}):e.json({token:n})})}else e.status(403).json({mensaje:"Password Incorrecta"});else c(),e.status(403).json({mensaje:"Usuario Inexistente !"})}catch(a){c(),e.status(404).json({e:a})}}),a.exports=s},function(a,e,n){const o=n(2),i=n(3),t=n(4),r=o();r.get("/",(a,e)=>{if(a.headers.authorization){const n=a.headers.authorization.split(" ")[1];i.verify(n,t.secret,(a,n)=>{a?e.status(403).json({mensaje:a.name}):e.status(200).json(n)})}else e.status(403).json({mensaje:"No envio el Token en el headers"})}),a.exports=r},function(a,e,n){const o=n(2).Router();o.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{Request:t}=new n(0);(new t).query("select p.id as idPieza, p.nombre as nombrePieza , p.id_cliente as idCliente , c.nombre as nombreCliente ,\n        p.id_tipos_material as idTipoMaterial , tm.nombre as nombreTipoMaterial\n        from piezas p\n        join clientes c on p.id_cliente = c.id\n        join tipos_material tm on p.id_tipos_material = tm.id\n        where p.estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),o.get("/xmaquina/:idMaquina",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{idMaquina:t}=a.params;var{Request:r}=n(0);(new r).query(`select p.id as idPieza, p.nombre as nombrePieza\n        from piezas p\n        join procesos pro\n        on pro.id_pieza = p.id\n        where p.estado = 1 and pro.id_maquina = ${t}`,(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),o.post("/insert",async(a,e)=>{const{nombrePieza:o,idCliente:i,idTipoMaterial:t}=a.body,{abrirConexionPOOL:r,cerrarConexionPOOL:s}=n(1);try{const a=await r("insertPieza"),{Request:c,Int:d,VarChar:u}=n(0),p=new c(a);p.input("nombrePieza",u,o),p.input("idCliente",d,i),p.input("idTipoMaterial",d,t);const l="insert into piezas ( nombre , id_cliente , id_tipos_material , estado )\n        values ( @nombrePieza , @idCliente , @idTipoMaterial , 1 )";await p.query(l)&&(s(),e.json({mensaje:"Pieza insertada correctamente"}))}catch(a){s(),e.json({mensaje:a.message})}}),o.put("/update",async(a,e)=>{const{idPieza:o,nombrePieza:i,idCliente:t,idTipoMaterial:r}=a.body,{abrirConexionPOOL:s,cerrarConexionPOOL:c}=n(1);try{const a=await s("updatePieza"),{Request:d,Int:u,VarChar:p}=n(0),l=new d(a);l.input("idPieza",u,o),l.input("nombrePieza",p,i),l.input("idCliente",u,t),l.input("idTipoMaterial",u,r);const m="update piezas\n        set\n        nombre = @nombrePieza ,\n        id_cliente = @idCliente ,\n        id_tipos_material = @idTipoMaterial\n        where id = @idPieza";await l.query(m)&&(c(),e.json({mensaje:"Pieza actualizada correctamente"}))}catch(a){c(),e.json({mensaje:a.message})}}),o.put("/delete",async(a,e)=>{const{idPieza:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("deletePieza"),{Request:r,Int:s}=n(0),c=new r(a);c.input("idPieza",s,o);const d="update piezas\n        set\n        estado = 0\n        where id = @idPieza";await c.query(d)&&(t(),e.json({mensaje:"Pieza eliminada correctamente"}))}catch(a){t(),e.json({mensaje:a.message})}}),a.exports=o},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{Request:t}=n(0);(new t).query("select m.id as idMolde , m.nombre as nombreMolde , m.id_pieza as idPieza , p.nombre as nombrePieza\n    from moldes m\n    join piezas p on m.id_pieza = p.id\n    where m.estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),i.get("/xpieza/:idPieza",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{idPieza:t}=a.params,{Request:r}=n(0);(new r).query("select id as idMolde, nombre as nombreMolde from moldes where estado = 1 and id_pieza = "+t,(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),i.post("/insert",async(a,e)=>{const{nombreMolde:o,idPieza:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1),{Request:s,VarChar:c,Int:d}=n(0);try{const a=new s(await t("insertMolde"));a.input("nombreMolde",c,o),a.input("idPieza",d,i);const n="insert into moldes ( nombre , id_pieza , estado )\n        values\n        ( @nombreMolde , @idPieza , 1 )";await a.query(n)&&(r(),e.json({mensaje:"Molde Insertado correctamente",status:200}))}catch(a){r(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idMolde:o,nombreMolde:i,idPieza:t}=a.body,{abrirConexionPOOL:r,cerrarConexionPOOL:s}=n(1),{Request:c,VarChar:d,Int:u}=n(0);try{const a=new c(await r("updateMolde"));a.input("nombreMolde",d,i),a.input("idPieza",u,t),a.input("idMolde",u,o);const n="update moldes\n        set\n        nombre = @nombreMolde ,\n        id_pieza = @idPieza\n        where id = @idMolde";await a.query(n)&&(s(),e.json({mensaje:"Molde actualizado correctamente",status:200}))}catch(a){s(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idMolde:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deleteMolde"));a.input("idMolde",s,o);const n="update moldes\n        set\n        estado = 0\n        where id = @idMolde";await a.query(n)&&(t(),e.json({mensaje:"Molde eliminado correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{Request:t}=n(0);(new t).query("select d.id as idDefecto, d.nombre as nombreDefecto, d.id_operacion as idOperacion,o.nombre as nombreOperacion from defectos d join operaciones o on d.id_operacion=o.id where d.estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),i.post("/insert",async(a,e)=>{const{nombreDefecto:o,idOperacion:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1),{Request:s,VarChar:c,Int:d}=n(0);try{const a=new s(await t("insertDefecto"));a.input("nombreDefecto",c,o),a.input("idOperacion",d,i);const n="insert into defectos ( nombre , id_operacion , estado )\n        values\n        ( @nombreDefecto , @idOperacion , 1 )";await a.query(n)&&(r(),e.json({mensaje:"Defecto Insertado correctamente",status:200}))}catch(a){r(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idDefecto:o,nombreDefecto:i,idOperacion:t}=a.body,{abrirConexionPOOL:r,cerrarConexionPOOL:s}=n(1),{Request:c,VarChar:d,Int:u}=n(0);try{const a=new c(await r("updateDefecto"));a.input("nombreDefecto",d,i),a.input("idOperacion",u,t),a.input("idDefecto",u,o);const n="update defectos\n        set\n        nombre = @nombreDefecto ,\n        id_operacion = @idOperacion\n        where id = @idDefecto";await a.query(n)&&(s(),e.json({mensaje:"Defecto actualizado correctamente",status:200}))}catch(a){s(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idDefecto:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deleteDefecto"));a.input("idDefecto",s,o);const n="update defectos\n        set\n        estado = 0\n        where id = @idDefecto";await a.query(n)&&(t(),e.json({mensaje:"Defecto eliminado correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();var{Request:t}=n(0);(new t).query("select id as idOperacion, nombre as nombreOperacion\n        from operaciones where estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),i.post("/insert",async(a,e)=>{const{nombreOperacion:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("insertOperacion"),{Request:r,VarChar:s}=n(0),c=new r(a);c.input("nombreOperacion",s,o);const d="insert into operaciones ( nombre , estado )\n        values\n        ( @nombreOperacion , 1 )";await c.query(d)&&(t(),e.json({mensaje:"Operacion insertada correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{nombreOperacion:o,idOperacion:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1),{Request:s,VarChar:c,Int:d}=n(0);try{const a=new s(await t("updateOperacion"));a.input("nombreOperacion",c,o),a.input("idOperacion",d,i);const n="update operaciones\n        set\n        nombre = @nombreOperacion\n        where id = @idOperacion";await a.query(n)&&(r(),e.json({mensaje:"Operacion actualizada correctamente",status:200}))}catch(a){r(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idOperacion:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deleteOperacion"));a.input("idOperacion",s,o);const n="update operaciones\n        set\n        estado = 0\n        where id = @idOperacion";await a.query(n)&&(t(),e.json({mensaje:"Operacion eliminada correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2);router=o(),router.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{Request:t}=n(0);(new t).query("select id as idTipoProceso, nombre as nombreTipoProceso\n        from tipos_proceso\n        where estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),router.post("/xmaquinapiezatipo",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{idMaquina:t,idPieza:r,idTipoProceso:s}=a.body,{Request:c}=n(0);(new c).query(`select pro.id as idProceso, pro.descripcion as descripcionProceso\n        from procesos pro\n        where pro.estado = 1\n        and pro.id_pieza = ${r}\n        and pro.id_maquina = ${t}\n        and pro.id_tipos_proceso = ${s}`,(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),router.get("/list",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),t=await o("selectProcesos"),{Transaction:r,Request:s}=n(0),c=new r(t);c.begin(async a=>{a&&(c.rollback(),i(),e.json({mensaje:a.message}));try{var n=[];const a=new s(c),r=new s(c),d="select p.id as idProceso , p.descripcion as descipcionProceso , p.id_pieza as idPieza ,\n            pie.nombre as nombrePieza , p.id_maquina as idMaquina , maq.nombre as nombreMaquina ,\n            p.id_tipos_proceso as idTipoProceso , tp.nombre as nombreTipoProceso\n            from procesos p\n            join piezas pie on p.id_pieza = pie.id\n            join maquinas maq on p.id_maquina = maq.id\n            join tipos_proceso tp on p.id_tipos_proceso = tp.id\n            where p.estado = 1",u=await a.query(d);if(u){n=u.recordset;var o="";Array.isArray(n)&&n.forEach((a,e)=>{o+=` ${a.idProceso} ,`}),o=""===o?null:o.trim().substring(0,o.length-2),console.log(o);const a=`select pxh.id as idPiezasXhs , pxh.cantidad as cantidadPiezasXhs , pxh.fe_desde as desdePiezasXhs ,\n                pxh.fe_hasta as hastaPiezasXhs , pxh.id_proceso as idProceso\n                from piezas_x_hora pxh\n                where pxh.id_proceso in (${o})`,s=await r.query(a);var t=[];s&&(console.log(t),t=s.recordset,console.log(s.recordset),n.forEach((a,e)=>{a.vecPiezasXhora=[],t.forEach((e,n)=>{parseInt(a.idProceso)===parseInt(e.idProceso)&&a.vecPiezasXhora.push(e)})}),c.commit(),i(),e.json(n))}}catch(a){c.rollback(),i(),e.json({mensaje:a.message})}})}),router.post("/insert",async(a,e)=>{const{descripcionProceso:o,idPieza:i,idMaquina:t,idTiposProceso:r,vecPiezasXhora:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=n(1);try{const a=await c("insertProceso"),{Transaction:u,Request:p,Date:l,Int:m,VarChar:P}=n(0),j=new u(a),b=new p(j),h=n(5);j.begin(async a=>{a&&(j.rollback(),d(),e.json({mensaje:a.message})),b.input("descripcionProceso",P,o),b.input("idPieza",m,i),b.input("idMaquina",m,t),b.input("idTiposProceso",m,r);const n=await b.query("insert into procesos ( descripcion , id_pieza , id_maquina , id_tipos_proceso , estado )\n            values\n            ( @descripcionProceso , @idPieza , @idMaquina , @idTiposProceso , 1 ) ;\n            declare @idProceso int\n            set @idProceso = ( select top 1 max ( id ) from procesos )\n            select @idProceso as idProceso");var c;n&&(c=n.recordsets[0][0].idProceso,Array.isArray(s)&&s.length>0&&h.eachSeries(s,(a,e)=>{const n=new p(j);n.input("cantidadPiezasXhs",m,a.cantidadPiezasXhs),n.input("desdePiezasXhs",l,a.desdePiezasXhs),n.input("hastaPiezasXhs",l,a.hastaPiezasXhs),n.input("idProceso",m,parseInt(c));n.query("insert into piezas_x_hora ( cantidad , fe_desde , fe_hasta , id_proceso , estado )\n                        values ( @cantidadPiezasXhs , @desdePiezasXhs , @hastaPiezasXhs , @idProceso , 1 )",(a,n)=>{a?e(a):e()})},a=>{a?(j.rollback(),d(),e.json({mensaje:a.message})):(j.commit(),d(),e.json({mensaje:"Proceso insertado correctamente"}))}))})}catch(a){myTransaction.rollback(),d(),e.json({mensaje:a.message})}}),router.put("/update",async(a,e)=>{const{idProceso:o,descripcionProceso:i,idPieza:t,idMaquina:r,idTiposProceso:s,vecPiezasXhora:c}=a.body,{abrirConexionPOOL:d,cerrarConexionPOOL:u}=n(1);try{const a=await d("insertProceso"),{Transaction:p,Request:l,Date:m,Int:P,VarChar:j}=n(0),b=new p(a),h=new l(b),_=n(5);b.begin(async a=>{a&&(b.rollback(),u(),e.json({mensaje:a.message})),h.input("descripcionProceso",j,i),h.input("idPieza",P,t),h.input("idMaquina",P,r),h.input("idTiposProceso",P,s),h.input("idProceso",P,o);await h.query("update procesos\n            set\n            descripcion = @descripcionProceso ,\n            id_pieza = @idPieza ,\n            id_maquina = @idMaquina ,\n            id_tipos_proceso = @idTiposProceso\n            where id = @idProceso ; delete piezas_x_hora where id_proceso = @idProceso")&&Array.isArray(c)&&c.length>0&&_.eachSeries(c,(a,e)=>{const n=new l(b);n.input("cantidadPiezasXhs",P,a.cantidadPiezasXhs),n.input("desdePiezasXhs",m,a.desdePiezasXhs),n.input("hastaPiezasXhs",m,a.hastaPiezasXhs),n.input("idProceso",P,parseInt(o));n.query("insert into piezas_x_hora ( cantidad , fe_desde , fe_hasta , id_proceso , estado )\n                        values ( @cantidadPiezasXhs , @desdePiezasXhs , @hastaPiezasXhs , @idProceso , 1 )",(a,n)=>{a?e(a):e()})},a=>{a?(b.rollback(),u(),e.json({mensaje:a.message})):(b.commit(),u(),e.json({mensaje:"Proceso actualizado correctamente"}))})})}catch(a){myTransaction.rollback(),u(),e.json({mensaje:a.message})}}),router.put("/delete",async(a,e)=>{const{idProceso:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("deleteProceso"),{Request:r,Int:s}=n(0),c=new r(a);c.input("idProceso",s,o);const d="update procesos\n        set\n        estado = 0\n        where id = @idProceso ";await c.query(d)&&(t(),e.json({mensaje:"Procesos eliminado correctamente"}))}catch(a){t(),e.json({mensaje:a.message})}}),a.exports=router},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();var{Request:t}=n(0);(new t).query("select t.id as idTurno, t.descripcion as descripcionTurno,t.hs_inicio as hsInicioTurno ,t.hs_fin as hsFinTurno  \n        from turnos t\n        where estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{var{abrirConexion:o,cerrarConexion:i}=n(1);await o();var{Request:t}=n(0);(new t).query("select pm.id as idParadaMaquina, pm.nombre as nombreParadaMaquina, pm.tipo as tipoParadaMaquina , pm.setup as setupParadaMaquina , pm.id_area as idArea, a.nombre as nombreArea\n        from paradas_maquina pm\n\t\tjoin areas a on pm.id_area=a.id\n        where pm.estado = 1",(a,n)=>{a?(i(),e.json({mensaje:a.message})):(i(),e.json(n.recordset))})}),i.post("/insert",async(a,e)=>{const{nombreParadaMaquina:o,tipoParadaMaquina:i,setupParadaMaquina:t,idArea:r}=a.body,{abrirConexionPOOL:s,cerrarConexionPOOL:c}=n(1),{Request:d,VarChar:u,Int:p,Bit:l}=n(0);try{const a=new d(await s("insertParadaMaquina"));a.input("nombreParadaMaquina",u,o),a.input("tipoParadaMaquina",l,i),a.input("idArea",p,r),a.input("setupParadaMaquina",p,t);const n="insert into paradas_maquina ( nombre , tipo , setup , id_area , estado )\n        values\n        ( @nombreParadaMaquina , @tipoParadaMaquina , @setupParadaMaquina , @idArea , 1 )";await a.query(n)&&(c(),e.json({mensaje:"Parada de Maquina Insertado correctamente",status:200}))}catch(a){c(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idParadaMaquina:o,nombreParadaMaquina:i,setupParadaMaquina:t,tipoParadaMaquina:r,idArea:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=n(1),{Request:u,VarChar:p,Int:l,Bit:m}=n(0);try{const a=new u(await c("updateParadaMaquina"));a.input("nombreParadaMaquina",p,i),a.input("tipoParadaMaquina",m,r),a.input("idArea",l,s),a.input("idParadaMaquina",l,o),a.input("setupParadaMaquina",l,t);const n="update paradas_maquina\n        set\n        nombre = @nombreParadaMaquina ,\n        tipo = @tipoParadaMaquina ,\n        setup = @setupParadaMaquina ,\n        id_area = @idArea\n        where id = @idParadaMaquina";await a.query(n)&&(d(),e.json({mensaje:"Parada de maquina actualizada correctamente",status:200}))}catch(a){d(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idParadaMaquina:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deleteParadaMaquina"));a.input("idParadaMaquina",s,o);const n="update paradas_maquina\n        set\n        estado = 0\n        where id = @idParadaMaquina";await a.query(n)&&(t(),e.json({mensaje:"Paradas de Maquina eliminada correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1),{Request:t}=n(0);await o(),(new t).query("select t.id as idTrabajador, t.nombre as nombreTrabajador, t.apellido as apellidoTrabajador,\n        t.f_nacimiento as nacimientoTrabajador, t.f_ingreso as ingresoTrabajador,\n        t.id_puesto as idPuesto, p.nombre as nombrePuesto\n        from trabajadores t\n        join puestos p on t.id_puesto=p.id\n        where t.estado = 1",(a,n)=>{a?(e.json({mensaje:a.message}),i()):(e.json(n.recordset),i())})}),i.post("/insert",async(a,e)=>{const{nombreTrabajador:o,apellidoTrabajador:i,nacimientoTrabajador:t,ingresoTrabajador:r,idPuesto:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=(n(8),n(1));try{const a=await c("insertTrabajador"),{Request:u,Int:p,Date:l,VarChar:m}=n(0),P=new u(a);P.input("nombreTrabajador",m,o),P.input("apellidoTrabajador",m,i),P.input("nacimientoTrabajador",l,t),P.input("ingresoTrabajador",l,r),P.input("idPuesto",p,s);const j="set dateformat dmy ; insert into trabajadores ( nombre , apellido , f_nacimiento , f_ingreso , id_puesto , estado )\n        values\n        ( @nombreTrabajador , @apellidoTrabajador , @nacimientoTrabajador , @ingresoTrabajador , @idPuesto , 1 )";await P.query(j)&&(d(),e.json({mensaje:"Trabajador insertado correctamente",status:200}))}catch(a){d(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idTrabajador:o,nombreTrabajador:i,apellidoTrabajador:t,nacimientoTrabajador:r,ingresoTrabajador:s,idPuesto:c}=a.body,{abrirConexionPOOL:d,cerrarConexionPOOL:u}=n(1);try{const a=await d("updateTrabajador"),{Request:p,Int:l,Date:m,VarChar:P}=n(0),j=new p(a);j.input("nombreTrabajador",P,i),j.input("apellidoTrabajador",P,t),j.input("nacimientoTrabajador",m,r),j.input("ingresoTrabajador",m,s),j.input("idPuesto",l,c),j.input("idTrabajador",l,o);const b="update trabajadores\n                                    set\n                                    nombre = @nombreTrabajador ,\n                                    apellido = @apellidoTrabajador ,\n                                    f_nacimiento = @nacimientoTrabajador ,\n                                    f_ingreso = @ingresoTrabajador ,\n                                    id_puesto = @idPuesto\n                                    where id = @idTrabajador";await j.query(b)&&(u(),e.json({mensaje:"Trabajador actualizado correctamente",status:200}))}catch(a){u(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idTrabajador:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("deleteTrabajador"),{Request:r,Int:s}=n(0),c=new r(a);c.input("idTrabajador",s,o);const d="update trabajadores\n                                    set\n                                    estado = 0\n                                    where id = @idTrabajador";await c.query(d)&&(t(),e.json({mensaje:"Trabajador eliminado correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=n(8),t=o();t.post("/delete",async(a,e)=>{const{idPlanilla:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),r=await i("eliminaPlanilla"),{Request:s}=n(0),c=new s(r);try{await c.query(`update planillas_produccion\n        set\n        estado = 0\n        where id = ${parseInt(o)}`)&&(t(),e.json({mensaje:"Eliminacion exitosa !"}))}catch(a){t(),e.json({mensaje:a.message})}}),t.post("/listar",async(a,e)=>{const{fechaDesdeProduccion:o,fechaHastaProduccion:t,fechaDesdeFundicion:r,fechaHastaFundicon:s,idMaquina:c,idPieza:d,idMolde:u,idTipoProceso:p,idOperacion:l}=a.body,{abrirConexionPOOL:m,cerrarConexionPOOL:P}=n(1),j=await m(),{Transaction:b,Int:h}=n(0),_=new b(j),{Request:q}=n(0),y=n(0);_.begin(async a=>{a&&e.json({mensaje:a.message});const n=new q(_);n.input("fechaDesdeFundicion",y.Date,r),n.input("fechaHastaFundicon",y.Date,s),n.input("fechaDesdeProduccion",y.Date,o),n.input("fechaHastaProduccion",y.Date,t),n.input("idMaquina",h,""===c?null:parseInt(c)),n.input("idPieza",h,""===d?null:parseInt(d)),n.input("idMolde",h,""===u?null:parseInt(u)),n.input("idTipoProceso",h,""===p?null:parseInt(p)),n.input("idOperacion",h,""===l?null:parseInt(l));const m=new q(_),j=new q(_),b=new q(_);new q(_);var f,w,x,O,C=[];try{var M=await n.query("\n        select pl.id as idPlanilla, pl.fe_carga as fechaCarga, pl.fe_produccion as fechaProduccion, pl.fe_fundicion as fechaFundicion,\n        pl.hora_inicio as horaInicio , pl.hora_fin as horaFin, tm.id_operacion as idOperacion, maq.id as idMaquina ,maq.nombre as nombreMaquina , pie.id as idPieza,\n        pie.nombre as nombrePieza , mol.id as idMolde,  mol.nombre as nombreMolde , tp.id as idTipoProceso, tp.nombre as tipoProceso\n        , pl.id_proceso as idProceso\n        from planillas_produccion pl\n        join moldes mol on pl.id_molde = mol.id\n        join procesos p on pl.id_proceso = p.id\n        join piezas pie on p.id_pieza = pie.id\n        join maquinas maq on p.id_maquina = maq.id\n        join tipos_proceso tp on p.id_tipos_proceso = tp.id\n        join tipos_maquina tm on maq.id_tipos_maquina = tm.id\n        where pl.estado = 1\n        and  pl.fe_fundicion between @fechaDesdeFundicion and  @fechaHastaFundicon\n        and  pl.fe_produccion between  @fechaDesdeProduccion and  @fechaHastaProduccion\n        and (  @idMaquina  is null  or p.id_maquina =  @idMaquina  )\n        and (  @idPieza  is null  or p.id_pieza =  @idPieza  )\n        and (  @idMolde  is null  or pl.id_molde =  @idMolde  )\n        and (  @idTipoProceso  is null  or p.id_tipos_proceso =  @idTipoProceso  )\n        and (  @idOperacion  is null  or tm.id_operacion =   @idOperacion  ) ");if(Array.isArray(M.recordset)){M.recordset.forEach(a=>{var e={idPlanilla:a.idPlanilla,fechaCarga:a.fechaCarga,fechaProduccion:a.fechaProduccion,fechaFundicion:a.fechaFundicion,horaInicio:new i(a.horaInicio).format("HH:mm"),horaFin:new i(a.horaFin).format("HH:mm"),idOperacion:a.idOperacion,idMaquina:a.idMaquina,nombreMaquina:a.nombreMaquina,idPieza:a.idPieza,nombrePieza:a.nombrePieza,idMolde:a.idMolde,nombreMolde:a.nombreMolde,idTipoProceso:a.idTipoProceso,tipoProceso:a.tipoProceso,idProceso:a.idProceso};C.push(e)});var z="";C.forEach((a,e)=>{e===M.recordset.length-1?z+=`${parseInt(a.idPlanilla)} `:z+=`${parseInt(a.idPlanilla)} ,`}),""===z&&(z=null);var g=`select txp.id as idTrabajadorXplanilla , t.nombre as nombreTrabajador, t.apellido as apellidoTrabajador, tur.descripcion  as turnoTrabajador ,\n                txp.hora_inicio as horaInicio , txp.hora_fin as horaFin,  txp.pza_producidas as piezasProducidas ,\n                txp.calorias as calorias , txp.id_planilla as idPlanilla , txp.id_trabajador as idTrabajador , txp.id_turno as idTurno\n                from trabajador_x_planilla txp\n                join trabajadores t on txp.id_trabajador = t.id\n                join turnos tur on txp.id_turno = tur.id\n                where txp.estado = 1\n                and txp.id_planilla in ( ${z} )  ; `,T=` select pmxp.id as idParadaMaquinaXplanilla , pm.id as idParadaMaquina , pm.nombre as nombreParadaMaquina ,\n                pmxp.hora_incio as horaInicioParadaMaquina , pmxp.hora_fin as horaFinParadaMaquina , pmxp.id_planilla as idPlanilla , pm.tipo as tipoParadaMaquina\n                from paradas_maquinas_x_planilla pmxp\n                join paradas_maquina pm on pmxp.id_paradas_maquina = pm.id\n                where pmxp.estado = 1\n                and pmxp.id_planilla in ( ${z} ) ; `;const a=await m.query(g+T);if(a.recordsets[0]&&a.recordsets[1]){f=a.recordsets[0],O=a.recordsets[1];var v="";f.forEach((a,e)=>{e===f.length-1?v+=`${parseInt(a.idTrabajadorXplanilla)} `:v+=`${parseInt(a.idTrabajadorXplanilla)} ,`}),""===v&&(v=null);var R=` select rxtyp.id as idRechazoXtrabajadorYplanilla , d.nombre as nombreRechazo ,\n                    rxtyp.tipo as tipoRechazo , rxtyp.cantidad as cantidadRechazos , rxtyp.id_trabajador_x_planilla as idTrabajadorXplanilla , rxtyp.id_defecto as idDefecto\n                    from rechazos_x_trabajador_y_planilla rxtyp\n                    join defectos d on rxtyp.id_defecto = d.id\n                    where rxtyp.estado = 1\n                    and rxtyp.id_trabajador_x_planilla in ( ${v} ) ; `;const n=await j.query(R);if(n.recordset){w=n.recordset;var I="";w.forEach((a,e)=>{e===w.length-1?I+=`${parseInt(a.idRechazoXtrabajadorYplanilla)} `:I+=`${parseInt(a.idRechazoXtrabajadorYplanilla)} ,`}),""===I&&(I=null);const a=` select zxryp.id as idZona , zxryp.letra as letraZona ,\n                        zxryp.numero as numeroZona , zxryp.cantidad as cantidadZona ,\n                        zxryp.id_rechazos_x_trabajador_y_planilla as idRechazosXtrabajadorYplanilla\n                        from zonas_x_rechazo_x_planilla zxryp\n                        where zxryp.estado = 1\n                        and zxryp.id_rechazos_x_trabajador_y_planilla in ( ${I} ) ; `;var L=(a,e)=>{const n=new i(a).format("HH:mm");var o=new i(e).format("HH:mm"),t=new Date(`1995-12-17T03:${n}`),r=new Date(`1995-12-17T03:${o}`);return"06:00"===n&&"06:00"===o?1440:(r-t)/1e3<0?(r-t)/1e3+1440:(r-t)/1e3},D=await b.query(a);D.recordset&&(x=D.recordset,C.forEach((a,e)=>{a.vecOperarios=[],a.vecParadasMaquinaSeleccionada=[],O.forEach(e=>{if(parseInt(e.idPlanilla)===parseInt(a.idPlanilla)){var n={idParadaMaquinaXplanilla:e.idParadaMaquinaXplanilla,idParadaMaquina:e.idParadaMaquina,nombreParadaMaquina:e.nombreParadaMaquina,desdeParadaMaquina:new i(e.horaInicioParadaMaquina).format("HH:mm"),hastaParadaMaquina:new i(e.horaFinParadaMaquina).format("HH:mm"),duracionParadaMaquina:L(e.horaInicioParadaMaquina,e.horaFinParadaMaquina),tipoParadaMaquina:e.tipoParadaMaquina};a.vecParadasMaquinaSeleccionada.push(n)}}),f.forEach((e,n)=>{if(parseInt(a.idPlanilla)===parseInt(e.idPlanilla)){var o={idTrabajadorXplanilla:e.idTrabajadorXplanilla,idOperario:e.idTrabajador,idTurno:e.idTurno,nombreTrabajador:e.nombreTrabajador,nombre:e.idTrabajador,apellidoTrabajador:e.apellidoTrabajador,turnoTrabajador:e.turnoTrabajador,horaInicio:new i(e.horaInicio).format("HH:mm"),horaFin:new i(e.horaFin).format("HH:mm"),produccion:e.piezasProducidas,calorias:e.calorias,vecRechazo:[]};w.forEach(a=>{if(parseInt(o.idTrabajadorXplanilla)===parseInt(a.idTrabajadorXplanilla)){var e={idRechazoXtrabajadorYplanilla:a.idRechazoXtrabajadorYplanilla,idRechazo:a.idDefecto,nombreRechazo:a.nombreRechazo,tipo:a.tipoRechazo,cantidadRechazo:a.cantidadRechazos,vecZonas:[]};x.forEach(a=>{if(parseInt(a.idRechazosXtrabajadorYplanilla)===parseInt(e.idRechazoXtrabajadorYplanilla)){var n={idZona:a.idZona,letra:a.letraZona,numero:a.numeroZona,cantidad:a.cantidadZona};e.vecZonas.push(n)}}),o.vecRechazo.push(e)}}),a.vecOperarios.push(o)}})}),_.commit(),P(),e.json(C))}}}}catch(a){_.rollback(),P(),e.json({mensaje:a.message})}})}),t.post("/update",async(a,e)=>{var{fechaProduccion:o,fechaFundicion:i,idTurno:t,HoraInicioProduccion:r,HoraFinProduccion:s,idOperacion:c,idMaquina:d,idPieza:u,idMolde:p,idTipoProceso:l,vecOperarios:m,vecParadasMaquinaSeleccionada:P,idPlanilla:j}=a.body;console.log(j);const{abrirConexionPOOL:b,cerrarConexionPOOL:h}=n(1),_=await b("updatePlanilla"),{Transaction:q}=n(0),y=n(0),{Request:f,PreparedStatement:w}=n(0),x=await new q(_),O=await new w(x),C=await new f(x),M=n(5);x.begin((async function(a){if(a)console.log("err commit");else{(async()=>{try{if(await C.query(`\n                        delete zonas_x_rechazo_x_planilla\n                        where id_rechazos_x_trabajador_y_planilla in ( (select r.id\n                        from rechazos_x_trabajador_y_planilla r\n                        where r.id_trabajador_x_planilla in ( ( select t.id from trabajador_x_planilla t where t.id_planilla = ${j} ) ) ) ) ;\n                        delete rechazos_x_trabajador_y_planilla\n                        where id_trabajador_x_planilla in ( ( select t.id from trabajador_x_planilla t where t.id_planilla = ${j} ) ) ;\n                        delete trabajador_x_planilla where id_planilla = ${j} ;\n                        delete paradas_maquinas_x_planilla where id_planilla = ${j} ;\n                    `)){O.input("fe_produccion",y.Date),O.input("fe_fundicion",y.Date),O.input("hora_inicio",y.Time),O.input("hora_fin",y.Time),O.input("id_molde",y.Int),O.input("idPlanilla",y.Int),await O.prepare(`set dateformat dmy ;\n                            declare @idProce int ;\n                            set @idProce = (select top 1 id from procesos p  where p.id_maquina = ${d} and p.id_pieza = ${u} and id_tipos_proceso = ${l} ) ;\n                            update planillas_produccion\n                            set\n                            fe_produccion = @fe_produccion ,\n                            fe_fundicion = @fe_fundicion ,\n                            hora_inicio = @hora_inicio ,\n                            hora_fin = @hora_fin ,\n                            id_proceso = @idProce ,\n                            id_molde = @id_molde\n                            where id = @idPlanilla`);const c={fe_produccion:o,fe_fundicion:i,hora_inicio:new Date(`2020-02-15T${r}:00`),hora_fin:new Date(`2020-02-15T${s}:00`),id_turno:parseInt(t),id_molde:parseInt(p),idPlanilla:parseInt(j)};var a;if(a=await O.execute(c),await O.unprepare()&&(x.rollback(),h(),e.json({mensaje:"Error InsercionPlanilla"}).status(403)),a){var n=[];m.forEach(a=>{var e={calorias:parseInt(a.calorias),pza_producidas:parseInt(a.produccion),hora_inicio:new Date(`2020-02-15T${a.horaInicio}:00`),hora_fin:new Date(`2020-02-15T${a.horaFin}:00`),id_trabajador:parseInt(a.idOperario),id_planilla:parseInt(j),id_turno:parseInt(a.idTurno),vecRechazos:a.vecRechazo};n.push(e)}),M.eachSeries(n,(a,e)=>{const n=new f(x);n.input("calorias",y.Int,a.calorias),n.input("pza_producidas",y.Int,a.pza_producidas),n.input("id_turno",y.Int,a.id_turno),n.input("hora_inicio",y.Time,a.hora_inicio),n.input("hora_fin",y.Time,a.hora_fin),n.input("id_trabajador",y.Int,a.id_trabajador),n.input("id_planilla",y.Int,a.id_planilla);var o=[];a.vecRechazos.forEach(a=>{var e={cantidad:parseInt(a.cantidadRechazo),tipo:a.tipo?1:0,id_defecto:parseInt(a.idRechazo),vecZonas:a.vecZonas};o.push(e)});var i="insert into trabajador_x_planilla\n                                (calorias , pza_producidas, id_turno , hora_inicio , hora_fin , id_trabajador , id_planilla , estado)\n                                values\n                                (@calorias , @pza_producidas , @id_turno , @hora_inicio , @hora_fin , @id_trabajador , @id_planilla , 1) ;\n                                declare @id_trabajador_x_planilla int ;\n                                declare @id_rechazos_x_trabajador_y_planilla int ;\n                                set @id_trabajador_x_planilla = ( select max( id ) as idTrabajadorXplanilla from trabajador_x_planilla ) ; ";o.forEach(a=>{i+=`insert into rechazos_x_trabajador_y_planilla\n                                    (cantidad , tipo , id_defecto , id_trabajador_x_planilla , estado)\n                                    values\n                                    ( ${a.cantidad}, ${a.tipo} , ${a.id_defecto} , @id_trabajador_x_planilla ,1) ;\n                                    set @id_rechazos_x_trabajador_y_planilla = (select max(id) from rechazos_x_trabajador_y_planilla) ; `;var e=[];a.vecZonas.forEach(a=>{var n={cantidad:parseInt(a.cantidad),letra:a.letra,numero:parseInt(a.numero)};e.push(n)}),e.forEach(a=>{i+=` insert into zonas_x_rechazo_x_planilla\n                                        (cantidad , letra , numero , id_rechazos_x_trabajador_y_planilla , estado )\n                                        values\n                                        ( ${a.cantidad} , '${a.letra}' , ${a.numero} , @id_rechazos_x_trabajador_y_planilla , 1 ) ; `})}),n.query(i,(a,n)=>{a?e(a):e()})},a=>{if(a)x.rollback(),h(),e.json({mensaje:a.message}).status(403);else{var n=[];P.forEach(a=>{var e={hora_inicio:new Date(`2020-02-15T${a.desdeParadaMaquina}:00`),hora_fin:new Date(`2020-02-15T${a.hastaParadaMaquina}:00`),id_paradas_maquina:parseInt(a.idParadaMaquina),id_planilla:j};n.push(e)}),M.eachSeries(n,(a,e)=>{const n=new f(x);n.input("hora_incio",y.Time,a.hora_inicio),n.input("hora_fin",y.Time,a.hora_fin),n.input("id_paradas_maquina",y.Int,a.id_paradas_maquina),n.input("id_planilla",y.Int,a.id_planilla),n.query("insert into paradas_maquinas_x_planilla\n                                            ( hora_incio , hora_fin , id_paradas_maquina , id_planilla , estado )\n                                            values\n                                            ( @hora_incio , @hora_fin , @id_paradas_maquina , @id_planilla , 1 )",(a,n)=>{a?e(a):e()})},a=>{a?(x.rollback(),h(),e.json({mensaje:a.message}).status(403)):(x.commit(),h(),e.setHeader("Content-Type","text/event-stream"),e.status(200).json({mensaje:"Actualizacion exitosa"}))})}})}}}catch(a){x.rollback(),h(),e.json({mensaje:a.message,mensaje2:"Error catch FINAL"})}})()}}))}),t.post("/insert",async(a,e)=>{var o,{fechaProduccion:i,fechaFundicion:t,idTurno:r,HoraInicioProduccion:s,HoraFinProduccion:c,idOperacion:d,idMaquina:u,idPieza:p,idMolde:l,idTipoProceso:m,vecOperarios:P,vecParadasMaquinaSeleccionada:j}=a.body;const{abrirConexionPOOL:b,cerrarConexionPOOL:h}=n(1),_=await b("consultasa"),{Transaction:q}=n(0),y=n(0),{Request:f,PreparedStatement:w}=n(0),x=await new q(_),O=await new w(x),C=await new f(x),M=n(5);x.begin((async function(a){if(a)console.log("err commit");else{(async()=>{try{O.input("fe_produccion",y.Date),O.input("fe_fundicion",y.Date),O.input("hora_inicio",y.Time),O.input("hora_fin",y.Time),O.input("id_molde",y.Int),await O.prepare(`set dateformat dmy ;\n                        declare @idProce int ;\n                        set @idProce = (select top 1 id from procesos p  where p.id_maquina = ${u} and p.id_pieza = ${p} and id_tipos_proceso = ${m} and estado = 1 ) ;\n                        insert into planillas_produccion\n                        ( fe_carga , fe_produccion , fe_fundicion , hora_inicio , hora_fin , id_proceso , id_molde  , estado )\n                        values\n                        ( GETDATE() , @fe_produccion , @fe_fundicion , @hora_inicio , @hora_fin , @idProce , @id_molde , 1 )`);const d={fe_produccion:i,fe_fundicion:t,hora_inicio:new Date(`2020-02-15T${s}:00`),hora_fin:new Date(`2020-02-15T${c}:00`),id_turno:parseInt(r),id_molde:parseInt(l)};var a;if(a=await O.execute(d),await O.unprepare()&&(x.rollback(),h(),e.json({mensaje:"Error InsercionPlanilla".yellow})),a&&(o=await C.query("select max( id ) as idPlanilla from planillas_produccion")),o.recordset[0].idPlanilla&&!isNaN(o.recordset[0].idPlanilla)){var n=[];P.forEach(a=>{var e={calorias:parseInt(a.calorias),pza_producidas:parseInt(a.produccion),hora_inicio:new Date(`2020-02-15T${a.horaInicio}:00`),hora_fin:new Date(`2020-02-15T${a.horaFin}:00`),id_trabajador:parseInt(a.idOperario),id_planilla:parseInt(o.recordset[0].idPlanilla),id_turno:parseInt(a.idTurno),vecRechazos:a.vecRechazo};n.push(e)}),M.eachSeries(n,(a,e)=>{const n=new f(x);n.input("calorias",y.Int,a.calorias),n.input("pza_producidas",y.Int,a.pza_producidas),n.input("id_turno",y.Int,a.id_turno),n.input("hora_inicio",y.Time,a.hora_inicio),n.input("hora_fin",y.Time,a.hora_fin),n.input("id_trabajador",y.Int,a.id_trabajador),n.input("id_planilla",y.Int,a.id_planilla);var o=[];a.vecRechazos.forEach(a=>{var e={cantidad:parseInt(a.cantidadRechazo),tipo:a.tipo?1:0,id_defecto:parseInt(a.idRechazo),vecZonas:a.vecZonas};o.push(e)});var i="insert into trabajador_x_planilla\n                            (calorias , pza_producidas, id_turno , hora_inicio , hora_fin , id_trabajador , id_planilla , estado)\n                            values\n                            (@calorias , @pza_producidas , @id_turno , @hora_inicio , @hora_fin , @id_trabajador , @id_planilla , 1) ;\n                            declare @id_trabajador_x_planilla int ;\n                            declare @id_rechazos_x_trabajador_y_planilla int ;\n                            set @id_trabajador_x_planilla = ( select max( id ) as idTrabajadorXplanilla from trabajador_x_planilla ) ; ";o.forEach(a=>{i+=`insert into rechazos_x_trabajador_y_planilla\n                                (cantidad , tipo , id_defecto , id_trabajador_x_planilla , estado)\n                                values\n                                ( ${a.cantidad}, ${a.tipo} , ${a.id_defecto} , @id_trabajador_x_planilla ,1) ;\n                                set @id_rechazos_x_trabajador_y_planilla = (select max(id) from rechazos_x_trabajador_y_planilla) ; `;var e=[];a.vecZonas.forEach(a=>{var n={cantidad:parseInt(a.cantidad),letra:a.letra,numero:parseInt(a.numero)};e.push(n)}),e.forEach(a=>{i+=` insert into zonas_x_rechazo_x_planilla\n                                    (cantidad , letra , numero , id_rechazos_x_trabajador_y_planilla , estado )\n                                    values\n                                    ( ${a.cantidad} , '${a.letra}' , ${a.numero} , @id_rechazos_x_trabajador_y_planilla , 1 ) ; `})}),n.query(i,(a,n)=>{a?e(a):e()})},a=>{if(a)x.rollback(),h(),e.json({mensaje:a.message});else{var n=[];j.forEach(a=>{var e={hora_inicio:new Date(`2020-02-15T${a.desdeParadaMaquina}:00`),hora_fin:new Date(`2020-02-15T${a.hastaParadaMaquina}:00`),id_paradas_maquina:parseInt(a.idParadaMaquina),id_planilla:o.recordset[0].idPlanilla};n.push(e)}),M.eachSeries(n,(a,e)=>{const n=new f(x);n.input("hora_incio",y.Time,a.hora_inicio),n.input("hora_fin",y.Time,a.hora_fin),n.input("id_paradas_maquina",y.Int,a.id_paradas_maquina),n.input("id_planilla",y.Int,a.id_planilla),n.query("insert into paradas_maquinas_x_planilla\n                                        ( hora_incio , hora_fin , id_paradas_maquina , id_planilla , estado )\n                                        values\n                                        ( @hora_incio , @hora_fin , @id_paradas_maquina , @id_planilla , 1 )",(a,n)=>{a?e(a):e()})},a=>{a?(x.rollback(),h(),e.json({mensaje:a.message})):(x.commit(),h(),e.setHeader("Content-Type","text/event-stream"),e.json({mensaje:"Insercion exitora"}))})}})}//! FIN  IIF
}//! FIN DEL TRY
catch(a){x.rollback(),h(),e.json({mensaje:a.message,mensaje2:"Error catch FINAL"})}})()}}))}),a.exports=t},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexion:o,cerrarConexion:i}=n(1);await o();const{Request:t}=n(0);(new t).query("select id as idTipoProceso, nombre as nombreTipoProceso from tipos_proceso where estado = 1 ",(a,n)=>{a?(i(),e.json({mensaje:a.message})):(i(),e.json(n.recordset))})}),i.post("/",async(a,e)=>{const{idPieza:o,idMaquina:i}=a.body,{abrirConexion:t,cerrarConexion:r}=n(1);await t();const{Request:s}=n(0);(new s).query(`select tp.id as idTipoProceso, tp.nombre as nombreTipoProceso from tipos_proceso tp\n    join procesos p on tp.id = p.id_tipos_proceso where p.id_maquina = ${i} and p.id_pieza = ${o} and tp.estado = 1`,(a,n)=>{a?(r(),e.json({mensaje:a.message})):(r(),e.json(n.recordset))})}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/list",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),t=await o("consultaClientes"),{Request:r}=n(0),s=new r(t);try{const a=await s.query(" select c.id as idCliente , c.nombre as nombreCliente , c.razon_social as razonSocialCliente\n    from clientes c\n    where c.estado = 1");i(),e.json(a.recordset)}catch(a){i(),e.json({mensaje:a.message})}}),i.put("/delete",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),t=await o("deleteCliente"),{Request:r,Int:s}=n(0),c=new r(t);c.input("idCliente",s,parseInt(a.body.idCliente));try{await c.query("update clientes set estado = 0 where id = @idCliente")&&(i(),e.json({mensaje:"Cliente Eliminado Correctamente"}))}catch(a){i(),e.json({mensaje:a.message})}}),i.put("/update",async(a,e)=>{const{nombreCliente:o,razonSocialCliente:i,idCliente:t}=a.body,{abrirConexionPOOL:r,cerrarConexionPOOL:s}=n(1),c=await r("updateCliente"),{Request:d,Int:u,VarChar:p}=n(0),l=new d(c);l.input("nombreCliente",p,o),l.input("razonSocialCliente",p,i),l.input("idCliente",u,t);try{await l.query(" update clientes\n    set\n    nombre = @nombreCliente ,\n    razon_social = @razonSocialCliente\n    where id = @idCliente")&&(s(),e.json({mensaje:"Cliente Actualizado Correctamente "}))}catch(a){s(),e.json({mensaje:a.message})}}),i.post("/insert",async(a,e)=>{const{nombreCliente:o,razonSocialCliente:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1),{Request:s,VarChar:c}=n(0),d=new s(await t("insertCliente"));d.input("nombreCliente",c,o),d.input("razonSocialCliente",c,i);try{await d.query("insert into clientes ( nombre , razon_social , estado  ) values  ( @nombreCliente , @razonSocialCliente , 1 )")&&(r(),e.json({mensaje:"Cliente Insertado correctamente"}))}catch(a){r(),e.json({mensaje:a.message})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/list",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1);try{const a=await o("consultaListaClientes"),{Request:t}=n(0),r=new t(a),s="select id as idTipoMaterial , nombre as nombreTipoMaterial\n        from tipos_material\n        where estado = 1",c=await r.query(s);c&&(i(),e.json(c.recordset))}catch(a){i(),e.json({mensaje:a.message})}}),i.post("/insert",async(a,e)=>{const{nombreMaterial:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("insertTipoMatrial"),{Request:r,VarChar:s}=n(0),c=new r(a);c.input("nombreMaterial",s,o);const d="insert into tipos_material ( nombre , estado )\n        values ( @nombreMaterial , 1 )  ";await c.query(d)&&(t(),e.json({mensaje:"Tipo de Material insertado correctamente "}))}catch(a){t(),e.json({mensaje:a.message})}}),i.put("/update",async(a,e)=>{const{idTipoMaterial:o,nombreTipoMaterial:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1);try{const a=await t("updateTipoMaterial"),{Request:s,VarChar:c,Int:d}=n(0),u=new s(a);u.input("nombreTipoMaterial",c,i),u.input("idTipoMaterial",d,o);const p="update tipos_material\n        set\n        nombre = @nombreTipoMaterial\n        where id = @idTipoMaterial";await u.query(p)&&(r(),e.json({mensaje:"Tipo de Material actualizado correctamente "}))}catch(a){r(),e.json({mensaje:a.message})}}),i.put("/delete",async(a,e)=>{const{idTipoMaterial:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("deletTipoMaterial"),{Request:r,VarChar:s,Int:c}=n(0),d=new r(a);d.input("idTipoMaterial",c,o);const u="update tipos_material\n        set\n        estado = 0\n        where id = @idTipoMaterial";await d.query(u)&&(t(),e.json({mensaje:"Tipo de Material eliminado  correctamente "}))}catch(a){t(),e.json({mensaje:a.message})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1);try{const a=await o("listaAreas"),{Request:t}=new n(0),r=new t(a),s=await r.query("select id as idArea , nombre as nombreArea\n            from areas\n            where estado = 1");s&&(i(),e.json(s.recordset))}catch(a){i(),e.json({mensaje:a.message})}}),i.post("/insert",async(a,e)=>{const{nombreArea:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,VarChar:s}=n(0);try{const a=new r(await i("insertArea"));a.input("nombreArea",s,o);const n="insert into areas ( nombre , estado )\n        values\n        ( @nombreArea , 1 )";await a.query(n)&&(t(),e.json({mensaje:"Area Insertado correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idArea:o,nombreArea:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1),{Request:s,VarChar:c,Int:d}=n(0);try{const a=new s(await t("updateArea"));a.input("nombreArea",c,i),a.input("idArea",d,o);const n="update areas\n        set\n        nombre = @nombreArea\n        where id = @idArea";await a.query(n)&&(r(),e.json({mensaje:"Area actualizada correctamente",status:200}))}catch(a){r(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idArea:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deleteArea"));a.input("idArea",s,o);const n="update areas\n        set\n        estado = 0\n        where id = @idArea";await a.query(n)&&(t(),e.json({mensaje:"Area eliminada correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/list",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1);try{const a=await o("listaTiposMaquina"),{Request:t}=n(0),r=new t(a),s="select tm.id as idTipoMaquina , tm.nombre as nombreTipoMaquina , tm.id_operacion as idOperacion ,\n        o.nombre as nombreOperacion\n        from tipos_maquina tm\n        join operaciones o on tm.id_operacion = o.id\n        where tm.estado = 1",c=await r.query(s);c&&(i(),e.json(c.recordset))}catch(a){i(),e.json({mensaje:a.message})}}),i.post("/insert",async(a,e)=>{const{nombreTipoMaquina:o,idOperacion:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1),{Request:s,VarChar:c,Int:d}=n(0);try{const a=new s(await t("insertTipoMaquina"));a.input("nombreTipoMaquina",c,o),a.input("idOperacion",d,i);const n="insert into tipos_maquina ( nombre , id_operacion , estado )\n        values\n        ( @nombreTipoMaquina , @idOperacion , 1 )";await a.query(n)&&(r(),e.json({mensaje:"Tipo de maquina Insertada correctamente",status:200}))}catch(a){r(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idTipoMaquina:o,nombreTipoMaquina:i,idOperacion:t}=a.body,{abrirConexionPOOL:r,cerrarConexionPOOL:s}=n(1),{Request:c,VarChar:d,Int:u}=n(0);try{const a=new c(await r("updateTipoMaquina"));a.input("nombreTipoMaquina",d,i),a.input("idOperacion",u,t),a.input("idTipoMaquina",u,o);const n="update tipos_maquina\n        set\n        nombre = @nombreTipoMaquina ,\n        id_operacion = @idOperacion\n        where id = @idTipoMaquina";await a.query(n)&&(s(),e.json({mensaje:"Tipo de maquina actualizada correctamente",status:200}))}catch(a){s(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idTipoMaquina:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deleteTipoMaquina"));a.input("idTipoMaquina",s,o);const n="update tipos_maquina\n        set\n        estado = 0\n        where id = @idTipoMaquina";await a.query(n)&&(t(),e.json({mensaje:"Tipo de maquina eliminada correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/list",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1);try{const a=await o("listaPlantas"),{Request:t}=n(0),r=new t(a),s="select p.id as idPlanta , p.nombre as nombrePlanta , p.barrio as barrioPlanta ,\n        p.cp as codigoPostalPlanta , p.calle as callePlanta , p.altura_calle as alturaCallePlanta\n        from plantas p\n        where p.estado = 1",c=await r.query(s);c&&(i(),e.json(c.recordset))}catch(a){i(),e.json({mensaje:a.message})}}),i.post("/insert",async(a,e)=>{const{nombrePlanta:o,barrioPlanta:i,codigoPostalPlanta:t,callePlanta:r,alturaCallePlanta:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=n(1),{Request:u,VarChar:p,Int:l}=n(0);try{const a=new u(await c("insertPlanta"));a.input("nombrePlanta",p,o),a.input("barrioPlanta",p,i),a.input("codigoPostalPlanta",l,t),a.input("callePlanta",p,r),a.input("alturaCallePlanta",l,s);const n="insert into plantas ( nombre , barrio , cp , calle , altura_calle , estado )\n        values\n        ( @nombrePlanta , @barrioPlanta , @codigoPostalPlanta , @callePlanta , @alturaCallePlanta , 1 )";await a.query(n)&&(d(),e.json({mensaje:"Planta Insertada correctamente",status:200}))}catch(a){d(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idPlanta:o,nombrePlanta:i,barrioPlanta:t,codigoPostalPlanta:r,callePlanta:s,alturaCallePlanta:c}=a.body,{abrirConexionPOOL:d,cerrarConexionPOOL:u}=n(1),{Request:p,VarChar:l,Int:m}=n(0);try{const a=new p(await d("updatePlanta"));a.input("nombrePlanta",l,i),a.input("barrioPlanta",l,t),a.input("codigoPostalPlanta",m,r),a.input("callePlanta",l,s),a.input("alturaCallePlanta",m,c),a.input("idPlanta",m,o);const n="update plantas\n        set\n        nombre = @nombrePlanta ,\n        barrio = @barrioPlanta ,\n        cp = @codigoPostalPlanta ,\n        calle = @callePlanta ,\n        altura_calle = @alturaCallePlanta\n        where id = @idPlanta";await a.query(n)&&(u(),e.json({mensaje:"Planta actualizada correctamente",status:200}))}catch(a){u(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idPlanta:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1),{Request:r,Int:s}=n(0);try{const a=new r(await i("deletePlanta"));a.input("idPlanta",s,o);const n="update plantas\n        set\n        estado = 0\n        where id = @idPlanta";await a.query(n)&&(t(),e.json({mensaje:"Planta eliminada correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.get("/list",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1);try{const a=await o("listarPuestos"),{Request:t}=n(0),r=new t(a),s="select id as idPuesto , nombre as nombrePuesto from puestos where estado = 1",c=await r.query(s);c&&(i(),e.json(c.recordset))}catch(a){e.json({mensaje:a.message,status:403})}}),i.post("/insert",async(a,e)=>{const{nombrePuesto:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("insertPuesto"),{Request:r,VarChar:s}=n(0),c=new r(a);c.input("nombrePuesto",s,o);const d="insert into puestos ( nombre , estado )\n        values\n        ( @nombrePuesto , 1 )";await c.query(d)&&(t(),e.json({mensaje:"Puesto insertado correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),i.put("/update",async(a,e)=>{const{idPuesto:o,nombrePuesto:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1);try{const a=await t("updatePuesto"),{Request:s,Int:c,Date:d,VarChar:u}=n(0),p=new s(a);p.input("nombrePuesto",u,i),p.input("idPuesto",c,o);const l="update puestos\n                                    set\n                                    nombre = @nombrePuesto\n                                    where id = @idPuesto";await p.query(l)&&(r(),e.json({mensaje:"Puesto actualizado correctamente",status:200}))}catch(a){r(),e.json({mensaje:a.message,status:403})}}),i.put("/delete",async(a,e)=>{const{idPuesto:o}=a.body,{abrirConexionPOOL:i,cerrarConexionPOOL:t}=n(1);try{const a=await i("deletePuesto"),{Request:r,Int:s}=n(0),c=new r(a);c.input("idPuesto",s,o);const d="update puestos\n                                    set\n                                    estado = 0\n                                    where id = @idPuesto";await c.query(d)&&(t(),e.json({mensaje:"Puesto eliminado correctamente",status:200}))}catch(a){t(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.post("/fundicion",async(a,e)=>{const{idMaquina:o,idPieza:i,idMolde:t,fechaFundicionDesde:r,fechaFundicionHasta:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=n(1),u=n(0);try{const a=await c("listaOEEfundicion"),n=new u.Request(a);n.input("idMaquina",u.Int,o),n.input("idPieza",u.Int,i),n.input("idMolde",u.Int,t),n.input("fechaFundicionDesde",u.Date,r),n.input("fechaFundicionHasta",u.Date,s);const p=await n.execute("pa_datosOEEfun");p&&(d(),e.json(p.recordset))}catch(a){d(),e.json({mensaje:a.message,status:403})}}),i.post("/granallado",async(a,e)=>{const{idMaquina:o,idPieza:i,idMolde:t,fechaProduccionDesde:r,fechaProduccionHasta:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=n(1),u=n(0);try{const a=await c("listaOEEgranallado"),n=new u.Request(a);n.input("idMaquina",u.Int,o),n.input("idPieza",u.Int,i),n.input("idMolde",u.Int,t),n.input("fechaProduccionDesde",u.Date,r),n.input("fechaProduccionHasta",u.Date,s);const p=await n.execute("pa_datosOEEgra");p&&(d(),e.json(p.recordset))}catch(a){d(),e.json({mensaje:a.message,status:403})}}),i.post("/mecanizado",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),{idMaquina:t,idPieza:r,idMolde:s,fechaProduccionDesde:c,fechaProduccionHasta:d}=a.body;try{const a=await o("listaOEEmecanizado"),u=n(0),p=new u.Request(a);p.input("idMaquina",u.Int,t),p.input("idPieza",u.Int,r),p.input("idMolde",u.Int,s),p.input("fechaProduccionDesde",u.Date,c),p.input("fechaProduccionHasta",u.Date,d);const l=await p.execute("pa_datosOEEmec");l&&(i(),e.json(l.recordset))}catch(a){i(),e.json({mensaje:a.message,status:403})}}),a.exports=i},function(a,e,n){const{Router:o}=n(2),i=o();i.post("/rechazosPrimeraVuelta",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),{fechaFundicionDesde:t,fechaFundicionHasta:r,idMaquina:s,idPieza:c,idMolde:d}=a.body;try{const a=n(0),u=await o("consultaReporteRechazos"),p=new a.Request(u);p.input("fechaFundicionDesde",a.Date,t),p.input("fechaFundicionHasta",a.Date,r),p.input("idMaquina",a.Int,s),p.input("idPieza",a.Int,c),p.input("idMolde",a.Int,d);const l=await p.execute("pa_rechazosTotales");l&&(i(),e.json(l.recordset))}catch(a){i(),e.json({status:403,mensaje:a.message})}}),i.post("/paradasMaquina",async(a,e)=>{const{idArea:o,fechaFundicionDesde:i,fechaFundicionHasta:t}=a.body,{abrirConexionPOOL:r,cerrarConexionPOOL:s}=n(1);try{const a=n(0),c=await r("reporteParadasMaquina"),d=new a.Request(c);d.input("idArea",a.Int,o),d.input("fechaFundicionDesde",a.Date,i),d.input("fechaFundicionHasta",a.Date,t);const u=await d.execute("pa_reporteParadasMaquina");u&&(s(),e.json(u.recordset))}catch(a){s(),e.json({mensaje:a.message})}}),i.post("/detalleParaMaquinaXmaquina",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),{fechaDesdeFundicion:t,fechaHastaFundicion:r,nombreMaquina:s,idArea:c}=a.body;try{const a=n(0),d=await o("consultaDetallePardaMaquina"),u=new a.Request(d);u.input("fechaDesdeFundicion",a.Date,t),u.input("fechaHastaFundicion",a.Date,r),u.input("nombreMaquina",a.VarChar,s),u.input("idArea",a.Int,c);const p=await u.execute("pa_detalleParadaMaquina");p&&(i(),e.json(p.recordset))}catch(a){i(),e.json({status:403,mensaje:a.message})}}),i.post("/paradasMaquinaXpm",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),{fechaDesdeFundicion:t,fechaHastaFundicion:r}=a.body;try{const a=n(0),s=await o("consultaPardaMaquinaXpm"),c=new a.Request(s);c.input("fechaDesdeFundicion",a.Date,t),c.input("fechaHastaFundicion",a.Date,r);const d=await c.execute("pa_reportePM");d&&(i(),e.json(d.recordset))}catch(a){i(),e.json({status:403,mensaje:a.message})}}),i.post("/detalleParaMaquinaXpm",async(a,e)=>{const{abrirConexionPOOL:o,cerrarConexionPOOL:i}=n(1),{fechaDesdeFundicion:t,fechaHastaFundicion:r,nombreParadaMaquina:s}=a.body;try{const a=n(0),c=await o("consultaDetallePardaMaquinaXpm2"),d=new a.Request(c);d.input("fechaDesdeFundicion",a.Date,t),d.input("fechaHastaFundicion",a.Date,r),d.input("nombreParadaMaquina",a.VarChar,s);const u=await d.execute("pa_detalleParadaMaquina2");u&&(i(),e.json(u.recordset))}catch(a){i(),e.json({status:403,mensaje:a.message})}}),i.post("/rechazosXpieza",async(a,e)=>{const{fechaFundicionDesde:o,fechaFundicionHasta:i,idMaquina:t,idPieza:r,idMolde:s}=a.body,{abrirConexionPOOL:c,cerrarConexionPOOL:d}=n(1),u=n(0);try{const a=await c("consultaRechazosXmaquina"),n=new u.Request(a);n.input("fechaFundicionDesde",u.Date,o),n.input("fechaFundicionHasta",u.Date,i),n.input("idMaquina",u.Int,t),n.input("idPieza",u.Int,r),n.input("idMolde",u.Int,s);const p=await n.execute("pa_rechazosXpiezas");p&&(d(),e.json(p.recordset))}catch(a){d(),e.json({status:403,mensaje:a.message})}}),i.post("/calorias",async(a,e)=>{const{fechaProduccionDesde:o,fechaProduccionHasta:i}=a.body,{abrirConexionPOOL:t,cerrarConexionPOOL:r}=n(1);try{const a=await t("reporteCalorias"),s=n(0),c=new s.Request(a);c.input("fechaProduccionDesde",s.Date,o),c.input("fechaProduccionHasta",s.Date,i);const d=await c.execute("pa_caloriasXtrabajador");d&&(r(),e.json(d.recordset))}catch(a){r(),e.json({status:403,mensaje:a.message})}}),i.post("/detalleCalorias",async(a,e)=>{const{fechaProduccionDesde:o,fechaProduccionHasta:i,idTrabajador:t}=a.body,{abrirConexionPOOL:r,cerrarConexionPOOL:s}=n(1);try{const a=await r("reporteDetalleCalorias"),c=n(0),d=new c.Request(a);d.input("fechaProduccionDesde",c.Date,o),d.input("fechaProduccionHasta",c.Date,i),d.input("idTrabajador",c.Int,t);const u=await d.execute("pa_detalleCaloriasTrabajadore");u&&(s(),e.json(u.recordset))}catch(a){s(),e.json({status:403,mensaje:a.message})}}),a.exports=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,